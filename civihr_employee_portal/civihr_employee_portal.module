<?php

use Drupal\civihr_employee_portal\Blocks\Base;
use Drupal\civihr_employee_portal\Mail\AccountActivatedSystemMail;
use Drupal\civihr_employee_portal\Helpers\WebformHelper;
use Drupal\civihr_employee_portal\Forms\AbsenceRequestForm;
use Drupal\civihr_employee_portal\Helpers\HelperClass;
use Drupal\civihr_employee_portal\Security\PublicFirewall;
use Drupal\civihr_employee_portal\Forms\OnboardingWebForm;
use Drupal\civihr_employee_portal\Forms\OnboardingWizardCustomizationForm;
use Drupal\civihr_employee_portal\Mail\PasswordResetSystemMail;

/**
 * Implements hook_css_alter().
 */
function civihr_employee_portal_css_alter(&$css) {

  // Remove defaults system messages css file.
  unset($css[drupal_get_path('module', 'system') . '/system.messages.css']);

  // Removing unwanted css files from civicrm pages.
  if (_isCiviCRM()) {
    // Multi-dimensional array containing module name and file path.
    $removeFiles = [
      ['module_name' => 'ctools', 'file_name' => '/css/ctools.css'],
      ['module_name' => 'date_api', 'file_name' => '/date.css'],
      ['module_name' => 'date_popup', 'file_name' => '/themes/datepicker.1.7.css'],
      ['module_name' => 'panels', 'file_name' => '/css/panels.css'],
      ['module_name' => 'radix_layouts', 'file_name' => '/radix_layouts.css'],
      ['module_name' => 'views_tooltip', 'file_name' => '/views_tooltip.css'],
      ['module_name' => 'tipsy', 'file_name' => '/stylesheets/tipsy.css'],
    ];
    // Removes above files.
   _remove_resources($css, $removeFiles);
  }
}

/**
 * Implements hook_js_alter()
 */
function civihr_employee_portal_js_alter(&$javascript) {

  global $user;
  $uf = get_civihr_uf_match_data($user->uid);

  // Unset jcarousel on panel admin pages as it's causes infinite loops
  // "admin/structure/pages"
  if (strpos(current_path(), 'admin/structure/pages') !== FALSE) {
    foreach ($javascript['settings']['data'] as $key => $value) {
      if (isset($value['jcarousel'])) {
        unset($javascript['settings']['data'][$key]);
      }
    }
  }

  drupal_add_js(['currentDrupalUserId' => $user->uid], 'setting');
  drupal_add_js(['currentCiviCRMUserId' => $uf['contact_id']], 'setting');

  _setup_modals();

  // Removing unwanted js files from civicrm pages.
  if (_isCiviCRM()) {

    // Multi-dimensional array containing module name and file path.
    $removeFiles = [
      ['module_name' => 'tipsy', 'file_name' => '/javascripts/jquery.tipsy.js'],
      ['module_name' => 'tipsy', 'file_name' => '/javascripts/tipsy.js']
    ];
    // Removes above files.
     _remove_resources($javascript, $removeFiles);
  }
}

/**
 * Removes javascript/css from civicrm pages.
 *
 * @param array &$resourcesList variable contains all the references to loaded
 *   js/css array from alter.
 *
 * @param array $blacklist contains multi-dimensional array : module_name key
 *   as name of the contrib module from which we need to remove corresponding
 *   file using file_name key.
 */
function _remove_resources(&$resourcesList, $blacklist = []) {
  if ($resourcesList) {
    foreach ($blacklist as $key => $value) {
      unset($resourcesList[drupal_get_path('module', $value['module_name']) . $value['file_name']]);
    }
  }
}

/**
 * Implements hook_menu_alter().
 *
 * @param array $items
 */
function civihr_employee_portal_menu_alter(&$items) {
  if (isset($items['user/%user/edit'])) {
    $items['user/%user/edit']['theme callback'] = '_user_edit_theme_callback';
  }
}

/**
 * The user edit page theme is overridden to use the admin them if the user is
 * an admin. It should appear to be part of CiviHR regardless of roles.
 *
 * @return string
 */
function _user_edit_theme_callback() {
  return 'civihr_default_theme';
}

/**
 * Checks if the current page is an CiviCRM loaded page.
 *
 * @return bool
 *  Returns true when the current page is on CiviCRM.
 *
 */
function _isCiviCRM() {
  return arg(0) == 'civicrm';
}

/**
 * Sets up all the different type of ctools modals that are used on the site
 */
function _setup_modals() {
    $basic_modal = array(
        'modalOptions' => array('opacity' => .5, 'background-color' => '#000'),
        'animation' => 'fadeIn'
    );

    $bootstrap_modal = array_replace_recursive($basic_modal, array(
        'modalSize' => array('height' => 'auto', 'width' => 'auto'),
        'modalTheme' => 'ctools_custom_modal_html',
        'modalClass' => 'civihr-bootstrap'
    ));

    $custom_modal = array_replace_recursive($basic_modal, array(
        'modalSize' => array('height' => 'auto', 'width' => 'auto'),
        'animation' => 'fadeIn',
        'modalClass' => 'civihr-custom'
    ));

    $custom_modal__large = array_replace_recursive($custom_modal, array(
        'modalClass' => 'civihr-custom--large'
    ));

    drupal_add_js(array(
        'civihr-default-style' => $basic_modal,
        'civihr-bootstrap-style' => $bootstrap_modal,
        'civihr-custom-style' => $custom_modal,
        'civihr-custom-large-style' => $custom_modal__large
    ), 'setting');
}

/**
 * Adds a script to a specific page.
 *
 * @param string $resources the name of the script file (extension included)
 * @param string $extension
 * @param string $page
 * @param string $scope
 */
function _add_script_to_page($resources, $extension = NULL, $page = NULL, $scope = 'footer') {
  $options = ['type' => 'file', 'scope' => $scope];

  if (!is_null($page) && arg(0) != $page) {
    return;
  }

  if ($extension) {
    civicrm_resources_load($extension, $resources);
  }
  else {
    if (is_array($resources)) {
      foreach ($resources as $value) {
        drupal_add_js(drupal_get_path('module', 'civihr_employee_portal') . $value, $options);
      }
    }
    else {
      drupal_add_js(drupal_get_path('module', 'civihr_employee_portal') . $resources, $options);
    }
  }
}

/**
 * Rebuilds appraisal view.
 */
function _rebuild_appraisal_view() {
  $extensions = CRM_Core_PseudoConstant::getExtensions();
  if (!empty($extensions['uk.co.compucorp.civicrm.appraisals'])) {
    $civi_settings = parse_url(CIVICRM_DSN);
    $civi_db_name = trim($civi_settings['path'], '/');

    db_query('DROP VIEW IF EXISTS appraisal');
    db_query("CREATE VIEW appraisal AS
              SELECT a.id, a.contact_id, ac.cycle_type_id, ac.cycle_start_date, ac.cycle_end_date, a.status_id, a.manager_id, a.self_appraisal_due, a.manager_appraisal_due, a.grade_due, a.grade
              FROM {$civi_db_name}.civicrm_appraisal a
              LEFT JOIN {$civi_db_name}.civicrm_appraisal_cycle ac ON ac.id = a.appraisal_cycle_id
              ORDER BY a.id ASC");

    // Set to false so it will not rebuild until not asked to rebuild
    variable_set('rebuild_appraisal_view', 'FALSE');
  }
}

/**
 * Rebuilds hrvacancy view.
 */
function _rebuild_hrvacancy_view() {
  $extensions = CRM_Core_PseudoConstant::getExtensions();
  if (!empty($extensions['org.civicrm.hrrecruitment'])) {
    $civi_settings = parse_url(CIVICRM_DSN);
    $civi_db_name = trim($civi_settings['path'], '/');

    db_query('DROP VIEW IF EXISTS hrvacancy');
    db_query("CREATE VIEW hrvacancy AS
              SELECT id, start_date, end_date, status_id, description, position, salary, location
              FROM {$civi_db_name}.civicrm_hrvacancy
              WHERE status_id = 2");

    // Set to false so it will not rebuild until not asked to rebuild
    variable_set('rebuild_hrvacancy_view', 'FALSE');
  }
}

/**
 * Rebuilds Tasks view.
 */
function _rebuild_tasks_view() {
  $extensions = CRM_Core_PseudoConstant::getExtensions();
  if (!empty($extensions['uk.co.compucorp.civicrm.tasksassignments'])) {
    $activityTypes = _get_activity_type_ids_by_component('CiviTask');
    if (!empty($activityTypes)) {
      db_query('DROP VIEW IF EXISTS tasks');
      db_query('CREATE VIEW tasks AS ' . _get_tasks_documents_sql_query($activityTypes));

      // Set to false so it will not rebuild until not asked to rebuild
      variable_set('rebuild_tasks_view', 'FALSE');
    }
  }
}

/**
 * Rebuilds Documents view.
 */
function _rebuild_documents_view() {
  $extensions = CRM_Core_PseudoConstant::getExtensions();
  if (!empty($extensions['uk.co.compucorp.civicrm.tasksassignments'])) {
    $activityTypes = _get_activity_type_ids_by_component('CiviDocument');
    if (!empty($activityTypes)) {
      db_query('DROP VIEW IF EXISTS documents');
      db_query('CREATE VIEW documents AS ' . _get_tasks_documents_sql_query($activityTypes));

      // Set to false so it will not rebuild until not asked to rebuild
      variable_set('rebuild_documents_view', 'FALSE');
    }
  }
}

/**
 * Return an array containg activity type IDs of given component.
 *
 * @param string $component
 * @return array
 * @throws API_Exception
 */
function _get_activity_type_ids_by_component($component) {
  $civi_settings = parse_url(CIVICRM_DSN);
  $civi_db_name = trim($civi_settings['path'], '/');
  $typeIds = array();
  $optionGroup = civicrm_api3('OptionGroup', 'get', array(
    'sequential' => 1,
    'name' => "activity_type",
  ));

  if (!isset($optionGroup['id'])) {
    throw new API_Exception(ts("Cannot find OptionGroup with 'name' = 'activity_type'."));
  }

  $componentQuery = "SELECT * FROM {$civi_db_name}.civicrm_component WHERE name = %1";
  $componentParams = array(
    1 => array($component, 'String'),
  );
  $componentResult = CRM_Core_DAO::executeQuery($componentQuery, $componentParams);
  if ($componentResult->fetch())
  {
    $componentId = $componentResult->id;
    $result = civicrm_api3('OptionValue', 'get', array(
      'sequential' => 0,
      'option_group_id' => $optionGroup['id'],
      'component_id' => $componentId,
    ));
    if (!empty($result['values'])) {
      foreach ($result['values'] as $value) {
        $typeIds[] = $value['value'];
      }
    }
  }

  return $typeIds;
}

/**
 * Return a string containing SQL query to select Activity data required
 * for create SQL View for Tasks / Documents.
 * $activityTypes array should contain a set activity_type_id pointing to
 * Task types or Document types.
 *
 * @param array $activityTypes
 * @return string
 */
function _get_tasks_documents_sql_query(array $activityTypes) {
  $civi_settings = parse_url(CIVICRM_DSN);
  $civi_db_name = trim($civi_settings['path'], '/');

  return "SELECT a.id, a.activity_type_id, a.subject, a.activity_date_time,
            acustom.expire_date, a.details, a.status_id, a.is_deleted, ca.case_id,
            COUNT(ef.id) AS file_count, acs.contact_id AS source_contact_id,
            contact_source.sort_name AS source_contact_name, act.contact_id AS target_contact_id,
            contact_target.sort_name AS target_contact_name, aca.contact_id AS assignee_contact_id,
            contact_assignee.sort_name AS assignee_contact_name
            FROM {$civi_db_name}.civicrm_activity a
            LEFT JOIN {$civi_db_name}.civicrm_value_activity_custom_fields_11 acustom ON acustom.entity_id = a.id
            LEFT JOIN {$civi_db_name}.civicrm_case_activity ca ON ca.activity_id = a.id
            LEFT JOIN {$civi_db_name}.civicrm_entity_file ef ON ef.entity_id = a.id AND ef.entity_table = 'civicrm_activity'
            LEFT JOIN {$civi_db_name}.civicrm_activity_contact acs ON acs.activity_id = a.id AND acs.record_type_id = 2
            LEFT JOIN {$civi_db_name}.civicrm_contact contact_source ON contact_source.id = acs.contact_id
            LEFT JOIN {$civi_db_name}.civicrm_activity_contact act ON act.activity_id = a.id AND act.record_type_id = 3
            LEFT JOIN {$civi_db_name}.civicrm_contact contact_target ON contact_target.id = act.contact_id
            LEFT JOIN {$civi_db_name}.civicrm_activity_contact aca ON aca.activity_id = a.id AND aca.record_type_id = 1
            LEFT JOIN {$civi_db_name}.civicrm_contact contact_assignee ON contact_assignee.id = aca.contact_id
            WHERE a.is_deleted = 0 AND a.is_current_revision = 1 AND a.activity_type_id IN (" . implode(',', $activityTypes) . ")
            GROUP BY a.id, aca.contact_id";
}

/**
 * Rebuilds the absence list view.
 */
function _rebuild_absence_list_view() {
  $civi_settings = parse_url(CIVICRM_DSN);
  $civi_db_name = trim($civi_settings['path'], '/');

  try {
    $res = civicrm_api3('HRAbsenceType', 'get', array());
    $absenceTypes = $res['values'];
    // Build the option values based on Absence types
    $options = '';

    foreach ($absenceTypes as $absenceType) {
      if ($absenceType['allow_credits'] == '1') {
        // Default credit types
        $options .= $absenceType['credit_activity_type_id'] . ',';
      }
      if ($absenceType['allow_debits'] == '1') {
        // Default debit types
        $options .= $absenceType['debit_activity_type_id']. ',';
      }
    }

    // Activity target contact ID (3 types of activity contacts -> source, assignee, target)
    $activityContacts = CRM_Core_OptionGroup::values('activity_contacts', FALSE, FALSE, FALSE, NULL, 'name');
    $targetID = CRM_Utils_Array::key('Activity Targets', $activityContacts);
    $assigneeID = CRM_Utils_Array::key('Activity Assignees', $activityContacts);

    // Get the main "absence" activity ID
    $activityTypes = CRM_Core_OptionGroup::values('activity_type', FALSE, FALSE, FALSE, NULL, 'name');
    $activityTypeId = CRM_Utils_Array::key('Absence', $activityTypes);
    watchdog('Rebuild view TRUE', 'ABSENCE LIST MYSQL VIEW');

    /**
     * Leave / sickness list view
     */
    $result = db_query('DROP view if exists absence_list');
    $result = db_query("CREATE VIEW absence_list AS
                        SELECT request.id, request.details, request.activity_type_id, absence_type_debit.title as debit_title, absence_type_credit.title as credit_title,
                                IF(absence_type_debit.title IS NOT NULL, absence_type_debit.title, absence_type_credit.title) as absence_title,
                            CASE absence_type_credit.credit_activity_type_id
                                WHEN request.activity_type_id THEN 1
                                ELSE 0 END AS is_credit, tgt.contact_id, tgt.record_type_id, min(absence.activity_date_time) as absence_start_date, max(absence.activity_date_time) as absence_end_date, drupal_contact.uf_id as drupal_uid,
                                SUM(CASE WHEN absence.status_id = 9 THEN 0 WHEN absence.status_id = 3 THEN 0 ELSE absence.duration END) as duration, request.status_id as absence_status,
                        UNIX_TIMESTAMP(STR_TO_DATE(min(absence.activity_date_time), '%Y-%m-%d')) as absence_start_date_timestamp,
                        UNIX_TIMESTAMP(STR_TO_DATE(max(absence.activity_date_time), '%Y-%m-%d')) as absence_end_date_timestamp
                        FROM " . $civi_db_name . ".civicrm_activity request
                        INNER JOIN " . $civi_db_name . ".civicrm_activity absence ON (absence.source_record_id = request.id AND absence.activity_type_id = " . $activityTypeId . ")
                        INNER JOIN " . $civi_db_name . ".civicrm_activity_contact tgt ON tgt.activity_id = request.id AND tgt.record_type_id = " . $targetID . "
                        LEFT JOIN " . $civi_db_name . ".civicrm_hrabsence_type absence_type_debit
                        ON request.activity_type_id = absence_type_debit.debit_activity_type_id
                        LEFT JOIN " . $civi_db_name . ".civicrm_hrabsence_type absence_type_credit
                        ON request.activity_type_id = absence_type_credit.credit_activity_type_id
                        LEFT JOIN " . $civi_db_name . ".civicrm_uf_match drupal_contact
                        ON tgt.contact_id = drupal_contact.contact_id
                        WHERE (request.activity_type_id IN (" . rtrim($options, ',') . "))
                        GROUP BY request.id");
    /**
     * Manager approval view
     */
    $result = db_query('DROP view if exists absence_approval_list');
    $result = db_query("CREATE VIEW absence_approval_list AS
                        SELECT request.id, request.activity_type_id, absence_type_debit.title as debit_title, absence_type_credit.title as credit_title,
                                IF(absence_type_debit.title IS NOT NULL, absence_type_debit.title, absence_type_credit.title) as absence_title,
                            CASE absence_type_credit.credit_activity_type_id
                                WHEN request.activity_type_id THEN 1
                                ELSE 0 END AS is_credit, tgt.contact_id AS manager_id, tgt_contact.contact_id AS employee_id, tgt.record_type_id, min(absence.activity_date_time) as absence_start_date, max(absence.activity_date_time) as absence_end_date, drupal_contact.uf_id as drupal_uid,
                                SUM(CASE WHEN absence.status_id = 9 THEN 0 WHEN absence.status_id = 3 THEN 0 ELSE absence.duration END) as duration, request.status_id as absence_status,
                        UNIX_TIMESTAMP(STR_TO_DATE(min(absence.activity_date_time), '%Y-%m-%d')) as absence_start_date_timestamp,
                        UNIX_TIMESTAMP(STR_TO_DATE(max(absence.activity_date_time), '%Y-%m-%d')) as absence_end_date_timestamp
                        FROM " . $civi_db_name . ".civicrm_activity request
                        INNER JOIN " . $civi_db_name . ".civicrm_activity absence ON (absence.source_record_id = request.id AND absence.activity_type_id = " . $activityTypeId . ")
                        INNER JOIN " . $civi_db_name . ".civicrm_activity_contact tgt ON tgt.activity_id = request.id AND tgt.record_type_id = " . $assigneeID . "
                        INNER JOIN " . $civi_db_name . ".civicrm_activity_contact tgt_contact ON tgt_contact.activity_id = request.id AND tgt_contact.record_type_id = " . $targetID . "
                        LEFT JOIN " . $civi_db_name . ".civicrm_hrabsence_type absence_type_debit
                        ON request.activity_type_id = absence_type_debit.debit_activity_type_id
                        LEFT JOIN " . $civi_db_name . ".civicrm_hrabsence_type absence_type_credit
                        ON request.activity_type_id = absence_type_credit.credit_activity_type_id
                        LEFT JOIN " . $civi_db_name . ".civicrm_uf_match drupal_contact
                        ON tgt.contact_id = drupal_contact.contact_id
                        WHERE (request.activity_type_id IN (" . rtrim($options, ',') . "))
                        GROUP BY request.id");

    // Set to false so it will not rebuild until not asked to rebuild
    variable_set('rebuild_absence_list_view', 'FALSE');
  }
  catch (Exception $e) {
    drupal_set_message('Cannot create database views: ' . $e->getMessage(), 'error');
  }
}

/**
 * Rebuilds the length of service view.
 */
function _rebuild_length_of_service_view() {
  $civi_settings = parse_url(CIVICRM_DSN);
  $civi_db_name = trim($civi_settings['path'], '/');

  $result = db_query('DROP view if exists civicrm_value_length_of_service_11');
  $result = db_query("CREATE VIEW civicrm_value_length_of_service_11 AS
                      SELECT id, entity_id, length_of_service
                      FROM {$civi_db_name}.civicrm_value_length_of_service_11");

  // Set to false so it will not rebuild until not asked to rebuild
  variable_set('rebuild_length_of_service', 'FALSE');
}

/**
 * Rebuilds the absence activity view.
 */
function _rebuild_absence_activity_view() {
  $civi_settings = parse_url(CIVICRM_DSN);
  $civi_db_name = trim($civi_settings['path'], '/');

  $customGroup = civicrm_api3('CustomGroup', 'getsingle', array(
    'sequential' => 1,
    'name' => "Absence_Comment",
  ));

  if (!array_key_exists('is_error', $customGroup) ||
    (array_key_exists('is_error', $customGroup) && !(int)$customGroup['is_error'])) {
    $absenceCommentTable = $customGroup['table_name'];
    $customName = civicrm_api3('CustomField', 'getsingle', array(
      'sequential' => 1,
      'custom_group_id' => $customGroup['id'],
      'name' => "Comment",
    ));
    $absenceCommentColumn = $customName['column_name'];

    $activityTypesIds = _get_absence_activity_types_ids();
    if (!empty($activityTypesIds)) {
      db_query('DROP VIEW IF EXISTS absence_activity');
      db_query("CREATE VIEW absence_activity AS
                SELECT ac.contact_id AS absence_contact_id,
                  absence_activity.id AS absence_activity_id,
                  ov.label AS absence_type,
                  DATE(a2.activity_date_time) AS absence_date,
                  DATE_FORMAT(DATE(a2.activity_date_time), '%Y-%m') AS absence_month,
                  (SELECT MIN(DATE(activity_date_time)) FROM {$civi_db_name}.civicrm_activity WHERE source_record_id = a2.source_record_id) AS absence_start_date,
                  DATE_FORMAT((SELECT MIN(DATE(activity_date_time)) FROM {$civi_db_name}.civicrm_activity WHERE source_record_id = a2.source_record_id), '%Y-%m') AS absence_start_date_month,
                  (SELECT MAX(DATE(activity_date_time)) FROM {$civi_db_name}.civicrm_activity WHERE source_record_id = a2.source_record_id) AS absence_end_date,
                  DATE_FORMAT((SELECT MAX(DATE(activity_date_time)) FROM {$civi_db_name}.civicrm_activity WHERE source_record_id = a2.source_record_id), '%Y-%m') AS absence_end_date_month,
                  CONCAT(IF (DATE_FORMAT(a2.activity_date_time, '%w') = 0, 7, DATE_FORMAT(a2.activity_date_time, '%w')), '. ', DATE_FORMAT(a2.activity_date_time, '%W')) AS absence_day_of_week,
                  a2.duration AS absence_duration,
                  IF (ov.label <> 'TOIL (Credit)', a2.duration, NULL) AS absence_amount_taken,
                  IF (ov.label = 'TOIL (Credit)', a2.duration, NULL) AS absence_amount_accrued,
                  IF (ov.label = 'TOIL (Credit)', -a2.duration, a2.duration) AS absence_absolute_amount,
                  abc.{$absenceCommentColumn} AS absence_comment,
                  a.status_id AS absence_status,
                  IF (ov.label = 'TOIL (Credit)', 1, 0) AS absence_is_credit
                FROM {$civi_db_name}.civicrm_activity absence_activity
                LEFT JOIN {$civi_db_name}.civicrm_activity a ON a.id = absence_activity.id
                LEFT JOIN {$civi_db_name}.civicrm_activity a2 ON a2.source_record_id = absence_activity.id
                LEFT JOIN {$civi_db_name}.civicrm_option_group og ON og.name = 'activity_type'
                LEFT JOIN {$civi_db_name}.civicrm_option_value ov ON ov.value = a.activity_type_id AND ov.option_group_id = og.id
                LEFT JOIN {$civi_db_name}.civicrm_activity_contact ac ON ac.activity_id = absence_activity.id AND ac.record_type_id = 3
                LEFT JOIN {$civi_db_name}.{$absenceCommentTable} abc ON abc.entity_id = absence_activity.id
                WHERE (a2.duration IS NOT NULL AND a2.duration > 0)
                AND
                absence_activity.activity_type_id IN (" . implode(',', $activityTypesIds) . ")");

      // Set to false so it will not rebuild until not asked to rebuild
      variable_set('rebuild_absence_activity', 'FALSE');
    }
  }
}

/**
 * Return an array of absence activity types IDs.
 *
 * @return array
 */
function _get_absence_activity_types_ids() {
  $activityTypesIds = [];
  $absenceTypes = civicrm_api3('HRAbsenceType', 'get', [
    'sequential' => 1,
  ]);

  foreach ($absenceTypes['values'] as $absenceType) {
    if (!empty($absenceType['debit_activity_type_id'])) {
      $activityTypesIds[] = $absenceType['debit_activity_type_id'];
    }
    if (!empty($absenceType['credit_activity_type_id'])) {
      $activityTypesIds[] = $absenceType['credit_activity_type_id'];
    }
  }

  return $activityTypesIds;
}

/**
 * Rebuilds the specified view under the following conditions:
 *  * A variable for rebuilding the view is set to true
 *  * A function with the name `_rebuild_%{viewName}_view` exists
 *
 * @param  string $viewName
 */
function _rebuild_view($viewName) {
  if ($viewName === 'absence_activity' || $viewName === 'length_of_service') {
    $varName = 'rebuild_' . $viewName;
  } else {
    $varName = 'rebuild_' . $viewName . '_view';
  }

  $fnName = '_rebuild_' . $viewName . '_view';
  $varValue = variable_get($varName, 'TRUE');

  if (isset($varValue) && $varValue == 'TRUE' && function_exists($fnName)) {
    call_user_func($fnName);
  }
}

/**
 * Get the module URL
 *
 * @param  string $moduleName <Module name>
 * @return string             <Module url>
 */
function getModuleUrl($moduleName) {
  global $base_url;

  $path = CRM_Core_Resources::singleton()->getUrl($moduleName);

  // Need to do this to avoid some configurations issues
  // Some environments return /sites/all/modules/civicrm
  // And others return http://localhost:8900/sites/all/modules/civicrm
  if (strstr($path, "$base_url/")) {
    $path = explode("$base_url/", $path)[1];
  }

  return ltrim($path, '/');
}

/**
 * Implements hook_coreResourceList
 *
 * @param array $list
 * @param string $region
 */
function civihr_employee_portal_civicrm_coreResourceList(&$list, $region) {
  // To maintain the dependency remove the js files that are dependent on
  // jquery.notify.js
  $jsToRemove[] = array_search('js/Common.js', $list);
  $jsToRemove[] = array_search('js/crm.ajax.js', $list);
  $jsToRemove[] = array_search('js/wysiwyg/crm.wysiwyg.js', $list);
  $jsToRemove[] = array_search('js/crm.drupal.js', $list);

  foreach ($jsToRemove as $filepath) {
    unset($list[$filepath]);
  }

  // Add the previously unlisted files to the list once the
  // jquery.notify.js is added
  $list[] = "packages/jquery/plugins/jquery.notify.js";
  $list[] = "js/Common.js";
  $list[] = "js/crm.ajax.js";
  $list[] = "js/wysiwyg/crm.wysiwyg.js";
  $list[] = "js/crm.drupal.js";
}

/**
 * Implements hook_init().
 */
function civihr_employee_portal_init() {
  // calling this inside hook_init so we could access
  // some drupal functions such as user_access
  _user_redirection();

  $query = drupal_get_query_parameters();
  if (isset($query['source']) && $query['source'] == 'onboarding') {
    $key = OnboardingWizardCustomizationForm::INTRODUCTION_TEXT_KEY;
    $welcomeMessage = variable_get($key);
    if ($welcomeMessage) {
      drupal_set_message($welcomeMessage);
    }
  }

  // Loads all the resources only for non-civicrm pages.
  if (!_isCiviCRM()) {
    // Civi init + load the singleton needed for the AJAX calls
    civicrm_initialize();
    CRM_Core_Resources::singleton()->addCoreResources();

    // Add our additional css libraries
    drupal_add_css(drupal_get_path('module', 'civihr_employee_portal') . "/css/custom.css");
    drupal_add_css(getModuleUrl('org.civicrm.shoreditch') . 'css/bootstrap.css');
    drupal_add_css(drupal_get_path('module', 'civihr_employee_portal') . "/lib/sweetalert/sweetalert.css");
    drupal_add_css(drupal_get_path('module', 'civihr_employee_portal') . "/lib/tablesaw/tablesaw.css");

    _add_script_to_page([
      '/js/scripts.js',
      '/js/filters.js',
      '/js/plupload/plupload.full.min.js',
      '/js/plupload-init.js',
      '/js/chart.min.js',
      '/lib/tablesorter/jquery.tablesorter.min.js',
      '/lib/tablesaw/tablesaw.js',
      '/lib/sweetalert/sweetalert.min.js'
    ]);

    _add_script_to_page(['reqangular.min.js'], 'org.civicrm.reqangular', 'dashboard');
    _add_script_to_page(['reqangular.min.js'], 'org.civicrm.reqangular', 'tasks-and-documents');
    _add_script_to_page(['/js/tasks.js'], NULL, 'tasks-and-documents', 'header');
    _add_script_to_page(['/js/ta-documents-app.js'], NULL, 'tasks-and-documents');
    _add_script_to_page(['tasks-assignments.min.js'], 'uk.co.compucorp.civicrm.tasksassignments', 'tasks-and-documents');

    _rebuild_view('absence_list');
    _rebuild_view('length_of_service');
    _rebuild_view('absence_activity');
    _rebuild_view('hrvacancy');
    _rebuild_view('appraisal');
    _rebuild_view('tasks');
    _rebuild_view('documents');

    _load_ta_settings();
  }
}

/**
 * Pass tasksAssignments data to Global Drupal.settings object
 */
function _load_ta_settings() {
  $config = CRM_Core_Config::singleton();
  $taSettings = civicrm_api3('TASettings', 'get')['values'];

  if (!empty($taSettings['days_to_create_a_document_clone'])) {
    $taSettings['days_to_create_a_document_clone'] = (int)$taSettings['days_to_create_a_document_clone'];
  }

  drupal_add_js([
    'tasksAssignments' => [
      'extensionPath' => CRM_Core_Resources::singleton()->getUrl('uk.co.compucorp.civicrm.tasksassignments'),
      'case_extension' => !empty(CRM_Core_Component::get('CiviCase')),
      'settings' => $taSettings,
      'permissions' => [
        'delete_tasks_and_documents' => CRM_Core_Permission::check('delete Tasks and Documents'),
      ],
      'debug' => $config->debug
    ],
    'adminId' => CRM_Core_Session::getLoggedInContactID()
  ], 'setting');
}

function _rebuild_reports_views() {
  variable_set('rebuild_length_of_service', 'TRUE');
  _rebuild_view('length_of_service');
  variable_set('rebuild_absence_activity', 'TRUE');
  _rebuild_view('absence_activity');
}

/**
 * When caches are cleared rebuild the helper mysql views
 */
function civihr_employee_portal_flush_caches() {
    _run_civihr_tasks();
}

/**
 * Implement hook_cron()
 */
function civihr_employee_portal_cron() {
    _run_civihr_tasks();
}

function _run_civihr_tasks() {

    //clear views cache to reflect changes
    if (drupal_is_cli()) {
        _clear_json_cache(TRUE);
    }
    else {
        _clear_json_cache();
    }

    // Set variable to TRUE so the mysql database views will be refreshed
    variable_set('rebuild_absence_list_view', 'TRUE');
    variable_set('rebuild_length_of_service_view', 'TRUE');
    variable_set('rebuild_absence_activity_view', 'TRUE');
    variable_set('rebuild_appraisal_view', 'TRUE');
    variable_set('rebuild_hrvacancy_view', 'TRUE');
    variable_set('rebuild_tasks_view', 'TRUE');
    variable_set('rebuild_documents_view', 'TRUE');
    variable_set('rebuild_hrjobcontract_entities_view', 'TRUE');

    watchdog('Rebuild view REQUEST', 'ABSENCE LIST MYSQL VIEW');

}

function _remove_json_cache_files($folder_path = null, $cli = FALSE) {

    // If we the views_json_query directory exists, check the cached files and remove them
    if (is_dir($folder_path)) {

        $dirHandle = opendir($folder_path);

        // Loop over all of the files in the folder
        while ($file = readdir($dirHandle)) {

            // If $file is NOT a directory remove it
            if (!is_dir($file)) {

                $real_path = drupal_realpath($folder_path . $file);
                unlink($real_path); // unlink() delete the file

                // Log message if running from drush
                if ($cli == TRUE) {
                    drush_log($file . ' deleted');
                }
            }
        }

        // Close the directory
        closedir($dirHandle);

    }

}

function _clear_json_cache($cli = FALSE) {
    // @ TODO -> get the sites/default/files location from proper drupal function
    $folder_real_path = drupal_realpath('public://') . '/views_json_query/';
    _remove_json_cache_files($folder_real_path, $cli);
}

/**
 * Implements hook_permission().
 */
function civihr_employee_portal_permission() {
  return array(
    'access manager approval screen' => array(
      'title' => t('Access CiviHR manager approval screen'),
      'description' => t('Perfom manager approval related tasks for CiviHR.'),
    ),
    'access private file download' => array(
      'title' => t('Access CiviHR absence attached files'),
      'description' => t('Availability to access the files attached for Absence.'),
    ),
    'can create and edit tasks' => array(
      'title' => t('Create and edit Tasks'),
      'description' => t('Availability to create and edit Tasks.'),
    ),
    'access leave and absences in ssp' => array(
      'title' => t('Access CiviHR Leave and Absences'),
      'description' => t('Availability for the Staff to access leave block and calendar')
    ),
    'manage leave and absences in ssp' => array(
      'title' => t('Manage CiviHR Leave and Absences'),
      'description' => t('Availability for the Manager to access leave block and calendar and manage leave requests')
    ),
    'view my details' => array(
      'title' => t('View My Details'),
      'description' => t('Availability for the user to view my details block and page')
    ),
    'view my tasks and documents blocks' => array(
      'title' => t('View My Tasks and Documents Blocks'),
      'description' => t('Availability for the user to view my tasks and documents blocks')
    ),
    'view appraisals' => array(
      'title' => t('View Appraisals'),
      'description' => t('Availability for the user to view appraisals block and page')
    ),
    'view my leave block' => array(
      'title' => t('View My Leave Block'),
      'description' => t('Availability for the user to view my leave block')
    ),
    'view my sickness report block' => array(
      'title' => t('View My Sickness Report Block'),
      'description' => t('Availability for the user to view my sickness report block')
    ),
    'view staff directory' => array(
      'title' => t('View Staff Directory'),
      'description' => t('Availability for the user to view staff directory block and page')
    ),
    'view hr resources' => array(
      'title' => t('View HR Resources'),
      'description' => t('Availability for the user to view hr resources block and page')
    ),
    'change document status' => array(
      'title' => t('Change Document Status'),
      'description' => t('Availability for the user to change document status')
    ),
    'view vacancies' => array(
      'title' => t('View Vacancies'),
      'description' => t('Availability for the user to view vacancies block and page')
    ),
    'customize welcome wizard' => array(
      'title' => t('Customize Welcome Wizard'),
      'description' => t('Set the company logo and text to be displayed in the onboarding wizard')
    ),
    'access hrreports' => array(
      'title' => t('Access HR Reports'),
      'description' => t('Availability to access HR Report pages'),
    ),
    'manage hrreports settings' => array(
      'title' => t('Manage HR Reports settings'),
      'description' => t('Availability to manage HR Reports settings'),
    ),
    'manage hrreports configuration' => array(
      'title' => t('Manage HR Reports configuration'),
      'description' => t('Availability to manage HR Reports configuration'),
    ),
  );
}


/**
 * Implements hook_mail_alter().
 *
 * @param $message
 */
function civihr_employee_portal_mail_alter(&$message) {
  $replacementMail = NULL;

  switch ($message['key']) {
    case 'status_activated':
    case 'register_admin_created': // todo check if this is expected
      $replacementMail = new AccountActivatedSystemMail();
      break;
    case 'password_reset':
      $replacementMail = new PasswordResetSystemMail();
  }

  if (!$replacementMail) {
    return;
  }

  $smarty = CRM_Core_Smarty::singleton();
  $smarty->addTemplateDir(__DIR__ . '/templates/smarty');

  $variables = $replacementMail->getVariables($message);
  $headers = $replacementMail->getHeaders();
  $templateName = $replacementMail->getTemplateName();
  $body = $smarty->fetchWith($templateName, $variables);

  $message['headers'] = array_merge($message['headers'], $headers);
  $message['body'] = [$body];
}

/**
 * Implements hook_theme().
 */
function civihr_employee_portal_theme($existing, $type, $theme, $path) {
    // This will hold any custom view display names where we need to override the template file
    $theme_hooks = array();
    return $theme_hooks + array(
        'user_login_block' => array(
            'render element' => 'form',
            'template' => 'templates/civihr-employee-portal-user-login',
            'preprocess functions' => array(
                'civihr_employee_portal_preprocess_user_login'
            ),
        ),
        'civihr_employee_portal_manager_calendar_block' => array(
            'variables' => array(
                'custom_data' => NULL
            ),
            'template' => 'templates/civihr-employee-portal-manager-calendar--block',
        ),
        'civihr_employee_portal_my_details_block' => array(
            'variables' => array(
                'profile_image' => NULL,
                'contact_details' => NULL,
                'address_data' => NULL,
                'address_data_title' => NULL,
            ),
            'template' => 'templates/civihr-employee-portal-my-details--block',
        ),
        'civihr_employee_portal_login_block' => array(
            'variables' => array(
                'custom_data' => NULL
            ),
            'template' => 'templates/civihr-employee-portal-login-block--block',
        ),
        'civihr_employee_portal_print_leave_report' => array(
            'variables' => array(
                'custom_data' => NULL
            ),
            'template' => 'templates/civihr-employee-portal-print-leave-report',
        ),
        'civihr_employee_portal_document_form' => array(
            //'arguments' => array('form' => NULL),
            'variables' => array(
                'custom_data' => NULL
            ),
//            'template' => 'templates/civihr-employee-portal-document-form',
            'render element' => 'form',
        ),
        'civihr_employee_portal_civihr_report_landing_page' => array(
            'variables' => array(
                'title' => NULL,
                'data' => NULL,
                'settings_url' => NULL
            ),
            'template' => 'templates/civihr-employee-portal-civihr-report-landing-page',
        ),
        'civihr_employee_portal_civihr_report_settings_age_group' => array(
            'variables' => array(
                'title' => NULL,
                'data' => NULL,
                'settings_url' => NULL
            ),
            'template' => 'templates/civihr-employee-portal-civihr-report-settings-age-group',
        ),
        'civihr_employee_portal_civihr_report_custom' => array(
            'variables' => array(
                'title' => NULL,
                'data' => NULL,
                'settings_url' => NULL
            ),
            'template' => 'templates/civihr-employee-portal-civihr-report-custom',
        ),

        'menu_tree__hr_reports_settings' => array(
            'render element' => 'block',
            'template' => 'templates/block--menu--reports-settings-menu-tree',
        ),
        'menu_link__hr_reports_settings' => array(
            'render element' => 'block',
            'template' => 'templates/block--menu--reports-settings-menu-link',
        ),
    );
}

/**
 * Implements hook_views_default_views().
 */
function civihr_employee_portal_views_default_views() {

    // Get the absence types
    $absenceTypes = get_civihr_absence_types();

    // Check for all view files in views directory
    $files = file_scan_directory(drupal_get_path('module', 'civihr_employee_portal') . '/views/views_export', '/.*\.inc$/');

    // Add view to list of views
    foreach ($files as $filepath => $file) {
        require $filepath;

        // Check if the view object is set
        if (isset($view)) {
            $views[$view->name] = $view;
        }
    }

    // At the end, return array of default views.
    return $views;
}

/**
 * Function for caching date periods returned from CiviCRM (avoiding expensive
 * DB calls for each dashboard page hit)
 */
function get_civihr_date_periods() {

  $periods_data = &drupal_static(__FUNCTION__);

  if (!isset($periods_data)) {
    if ($cache = cache_get('civihr_date_periods')) {
      $periods_data = $cache->data;
      watchdog(
        'CiviHR Period Cache',
        'Periods found in cache: <br/><pre>' . print_r($periods_data, true) . '</pre>'
      );
    }
    else {
      try {
        // Civi init
        civicrm_initialize();

        $res = civicrm_api3('HRAbsencePeriod', 'get', ['options' => ['sort' => "start_date DESC"]]);
        $periods_data = $res['values'];
        watchdog('DB hit', 'DB');
      }
      catch (CiviCRM_API3_Exception $e) {
          $error = $e->getMessage();
          watchdog(
            'CiviHR Period Cache',
            "Error obtaining periods from DB: $error ",
            array(),
            WATCHDOG_ALERT
          );
      }

      cache_set('civihr_date_periods', $periods_data, 'cache', strtotime('+6 minutes'));
      watchdog(
        'CiviHR Period Cache',
        'Periods obtained from DB and stored in cache: <br/><pre>' . print_r($periods_data, true) . '</pre>'
      );
    }
  }

  return $periods_data;
}

/**
 * Function for caching absence types returned from CiviCRM (avoiding expensive DB calls for each dashboard page hit)
 */
function get_civihr_absence_types() {

    $absenceTypes = &drupal_static(__FUNCTION__);

    if (!isset($absenceTypes)) {
        $cache = cache_get('civihr_absence_types');
        if (!empty($cache->data)) {
            $absenceTypes = $cache->data;
        }
        else {

            try {

                // Civi init
                civicrm_initialize();

                $res = civicrm_api3('HRAbsenceType', 'get', array());
                $absenceTypes = $res['values'];
                watchdog('DB hit absence types', 'DB');

            }

            catch (CiviCRM_API3_Exception $e) {
                $error = $e->getMessage();
            }

            // Cache the absence types for 5 minutes
            cache_set('civihr_absence_types', $absenceTypes, 'cache', time() + 360);

        }

    }

    return $absenceTypes;

}

/**
 * Function for caching absence statuses returned from CiviCRM (avoiding expensive DB calls for each dashboard page hit)
 */
function get_civihr_absence_statuses($status_id = NULL) {

    $absenceStatuses = &drupal_static(__FUNCTION__);

    if (!isset($absenceStatuses)) {

        if ($cache = cache_get('civihr_absence_statuses')) {
            $absenceStatuses = $cache->data;
        }
        else {

            try {

                // Civi init
                civicrm_initialize();

                // Activity absence statuses array
                $absenceStatuses = CRM_Core_OptionGroup::values('activity_status', FALSE, FALSE, FALSE, NULL, 'name');

                watchdog('DB hit absence statuses', 'DB');

            }

            catch (CiviCRM_API3_Exception $e) {
                $error = $e->getMessage();
            }

            // Cache the absence statuses for 5 minutes
            cache_set('civihr_absence_statuses', $absenceStatuses, 'cache', time() + 360);

        }

    }

    // Get the status values based on the status_id
    $status_id_value = CRM_Utils_Array::value($status_id, $absenceStatuses);

    // How we want to display the approved absences?
    if ($status_id_value == 'Completed') {
        $status_id_value = 'Approved';
    }
    if ($status_id_value == 'Scheduled') {
        $status_id_value = 'Awaiting approval';
    }

    return $status_id_value;

}

function get_document_statuses($status_id = NULL) {

    $documentStatuses = &drupal_static(__FUNCTION__);

    if (!isset($documentStatuses)) {

        if ($cache = cache_get('civihr_document_statuses')) {
            $documentStatuses = $cache->data;
        }
        else {
            try {
                // Civi init
                civicrm_initialize();

                // Document statuses array
                $documentStatuses = civicrm_api3('Document', 'getoptions', array(
                    'field' => "status_id",
                ));
            }

            catch (CiviCRM_API3_Exception $e) {
                $error = $e->getMessage();
            }

            // Cache the document statuses for 5 minutes
            cache_set('civihr_document_statuses', $documentStatuses, 'cache', time() + 360);
        }
    }

    // Get the status values based on the status_id
    $status_id_value = CRM_Utils_Array::value($status_id, $documentStatuses['values']);

    return $status_id_value;
}

function get_task_statuses($status_id = NULL) {

    $taskStatuses = &drupal_static(__FUNCTION__);

    if (!isset($taskStatuses)) {

        if ($cache = cache_get('civihr_task_statuses')) {
            $taskStatuses = $cache->data;
        }
        else {
            try {
                // Civi init
                civicrm_initialize();

                // Task statuses array
                $taskStatuses = civicrm_api3('Task', 'getoptions', array(
                    'field' => "status_id",
                ));
            }

            catch (CiviCRM_API3_Exception $e) {
                $error = $e->getMessage();
            }

            // Cache the task statuses for 5 minutes
            cache_set('civihr_task_statuses', $taskStatuses, 'cache', time() + 360);
        }
    }

    if ($status_id === null) {
        return $taskStatuses['values'];
    }

    // Get the status values based on the status_id
    $status_id_value = CRM_Utils_Array::value($status_id, $taskStatuses['values']);

    return $status_id_value;
}

/**
 * Get value (a human-readable label) of given Activity type ID.
 *
 * @param int $type_id
 * @return string
 */
function get_activity_type_value($type_id = NULL) {

  $activityTypes = &drupal_static(__FUNCTION__);

  if (!isset($activityTypes)) {

    if ($cache = cache_get('civihr_activity_types')) {
      $activityTypes = $cache->data;
    }
    else {
      try {
        // Civi init
        civicrm_initialize();

        // Task types array
        $activityTypes = civicrm_api3('Activity', 'getoptions', [
          'field' => "activity_type_id",
        ]);

        // Document types array
        $documentTypes = civicrm_api3('Document', 'getoptions', [
          'field' => "activity_type_id",
        ]);

        $activityTypes['values'] += $documentTypes['values'];
        $activityTypes['count'] = count($activityTypes['values']);
      } catch (CiviCRM_API3_Exception $e) {
        $error = $e->getMessage();
      }

      // Cache the task types for 5 minutes
      cache_set('civihr_activity_types', $activityTypes, 'cache', time() + 360);
    }
  }

  if ($type_id === NULL) {
    return $activityTypes['values'];
  }

  // Get the type values based on the type_id
  $type_id_value = CRM_Utils_Array::value($type_id, $activityTypes['values']);

  return $type_id_value;
}

function get_appraisal_cycle_type($type_id = NULL) {
    $appraisalCycleTypes = &drupal_static(__FUNCTION__);

    if (!isset($appraisalCycleTypes)) {

        if ($cache = cache_get('civihr_appraisal_cycle_types')) {
            $appraisalCycleTypes = $cache->data;
        }
        else {
            try {
                // Civi init
                civicrm_initialize();

                // Appraisal cycle types array
                $appraisalCycleTypes = CRM_Core_OptionGroup::values('appraisal_cycle_type');
            }

            catch (CiviCRM_API3_Exception $e) {
                $error = $e->getMessage();
            }

            // Cache the Appraisal cycle types for 5 minutes
            cache_set('civihr_appraisal_cycle_types', $appraisalCycleTypes, 'cache', time() + 360);
        }
    }

    if ($type_id === null) {
        return '-';
    }

    // Get the type values based on the type_id
    $type_value = $appraisalCycleTypes[$type_id];

    return $type_value;
}

function get_appraisal_cycle_period($cycleStartDate, $cycleEndDate) {
    return $cycleStartDate . ' - ' . $cycleEndDate;
}

function get_appraisal_status($status_id = NULL) {
    $appraisalStatuses = &drupal_static(__FUNCTION__);

    if (!isset($appraisalStatuses)) {

        if ($cache = cache_get('civihr_appraisal_statuses')) {
            $appraisalStatuses = $cache->data;
        }
        else {
            try {
                // Civi init
                civicrm_initialize();

                // Appraisal cycle types array
                $appraisalStatuses = CRM_Core_OptionGroup::values('appraisal_status');
            }

            catch (CiviCRM_API3_Exception $e) {
                $error = $e->getMessage();
            }

            // Cache the Appraisal cycle types for 5 minutes
            cache_set('civihr_appraisal_statuses', $appraisalStatuses, 'cache', time() + 360);
        }
    }

    if ($status_id === null) {
        return '-';
    }

    // Get the type values based on the type_id
    $status_value = $appraisalStatuses[$status_id];

    return $status_value;
}

function get_appraisal_due_date($selfAppraisalDue, $managerAppraisalDue, $gradeDue) {
    $today = date('Y-m-d');
    $dueDate = $selfAppraisalDue;
    if ($selfAppraisalDue < $today) {
        $dueDate = $managerAppraisalDue;
    }
    if ($managerAppraisalDue < $today) {
        $dueDate = $gradeDue;
    }

    return $dueDate;
}

function get_appraisal_employee_chart_data($contactId) {
    $cycleIds = CRM_Appraisals_BAO_AppraisalCycle::getAllCycleIds(null, $contactId);
    $cyclesDates = array();
    $cyclesMyGrades = array();
    $cyclesAvgGrades = array();
    $cycleDatesResult = civicrm_api3('AppraisalCycle', 'get', array(
        'sequential' => 1,
        'id' => array('IN' => $cycleIds),
        'return' => "cycle_start_date",
        'options' => array('sort' => "cycle_start_date ASC"),
    ));
    foreach ($cycleDatesResult['values'] as $cycleDateResult) {
        $cyclesDates[] = '"' . $cycleDateResult['cycle_start_date'] . '"';
    }
    foreach ($cycleIds as $cycleId) {
        $myGradeResult = civicrm_api3('Appraisal', 'getsingle', array(
            'sequential' => 1,
            'appraisal_cycle_id' => $cycleId,
            'contact_id' => $contactId,
            'is_current' => 1,
            'return' => "grade",
        ));
        $cyclesMyGrades[] = !empty($myGradeResult['grade']) ? (int)$myGradeResult['grade'] : 0;
        $cyclesAvgGrades[] = CRM_Appraisals_BAO_AppraisalCycle::getCycleAverageGrade($cycleId);
    }
    return array(
        'cyclesDates' => $cyclesDates,
        'cyclesMyGrades' => $cyclesMyGrades,
        'cyclesAvgGrades' => $cyclesAvgGrades
    );
}

function get_appraisal_manager_chart_data($managerId) {
    $appraisalStatuses = CRM_Core_OptionGroup::values('appraisal_status');
    $cycleStatusDefault = array_combine(array_keys($appraisalStatuses), array_fill(1, count($appraisalStatuses), 0));
    $cycleStatuses = CRM_Appraisals_BAO_AppraisalCycle::getCurrentCycleStatus($managerId);
    $labels = array('"Stage 1"', '"Stage 2"', '"Stage 3"', '"Stage 4"', '"Stage 5"');
    $cycleStatusData = array();
    foreach ($cycleStatusDefault as $key => $value) {
        $cycleStatusData[$key] = $value;
        if (!empty($cycleStatuses[$key])) {
            $cycleStatusData[$key] += $cycleStatuses[$key];
        }
    }
    return array(
        'labels' => $labels,
        'cycleStatusData' => $cycleStatusData,
    );
}


// Helper functions for Reports View handlers

/*
 * Return Job Contract end reason label by given reason ID.
 *
 * @param int $reasonId
 * @return string
 */
function get_jobcontract_end_reason($reasonId = NULL) {
    $jobcontractEndReasons = &drupal_static(__FUNCTION__);
    if (!isset($jobcontractEndReasons)) {
        if ($cache = cache_get('civihr_jobcontract_end_reasons')) {
            $jobcontractEndReasons = $cache->data;
        }
        else {
            try {
                civicrm_initialize();
                $options = CRM_Core_PseudoConstant::get('CRM_Hrjobcontract_DAO_HRJobDetails', 'end_reason');
            } catch (CiviCRM_API3_Exception $e) {
                $error = $e->getMessage();
            }
            // Cache the data for 5 minutes
            cache_set('civihr_jobcontract_end_reasons', $options, 'cache', time() + 360);
        }
    }
    if ($reasonId === null) {
        return '';
    }
    // Get the type values based on the $reasonId
    $status_value = $jobcontractEndReasons[$reasonId];
    return $status_value;
}

/*
 * Return Job Contract location and standard hours string by given hours location ID.
 *
 * @param int $hoursLocationId
 * @return string
 */
function get_jobcontract_location_standard_hours($hoursLocationId = NULL) {
    $locationStandardHours = &drupal_static(__FUNCTION__);
    if (!isset($locationStandardHours)) {
        if ($cache = cache_get('civihr_jobcontract_location_standard_hours')) {
            $locationStandardHours = $cache->data;
        }
        else {
            try {
                civicrm_initialize();
                $options = array();
                $hoursLocation = new CRM_Hrjobcontract_BAO_HoursLocation();
                $hoursLocation->find();
                while ($hoursLocation->fetch()) {
                    $row = (array)$hoursLocation;
                    $options[$hoursLocation->id] = $row['location'] .
                        ' (' . $row['standard_hours'] .
                        ' / ' . $row['periodicity'] . ')';
                }
            } catch (CiviCRM_API3_Exception $e) {
                $error = $e->getMessage();
            }
            // Cache the data for 5 minutes
            cache_set('civihr_jobcontract_location_standard_hours', $options, 'cache', time() + 360);
        }
    }
    if ($hoursLocationId === null) {
        return '';
    }
    // Get the type values based on the $reasonId
    return !empty($locationStandardHours[$hoursLocationId]) ? $locationStandardHours[$hoursLocationId] : '';
}

/*
 * Return Job Contract pay scale label string by given pay scale ID.
 *
 * @param int $payScaleId
 * @return string
 */
function get_jobcontract_pay_scale($payScaleId = NULL) {
    $payScales = &drupal_static(__FUNCTION__);
    if (!isset($payScales)) {
        if ($cache = cache_get('civihr_jobcontract_pay_scale')) {
            $payScales = $cache->data;
        }
        else {
            try {
                civicrm_initialize();
                $options = array();
                $payScale = new CRM_Hrjobcontract_BAO_PayScale();
                $payScale->find();
                while ($payScale->fetch()) {
                    $row = (array)$payScale;
                    $options[$payScale->id] = $row['pay_scale'];
                    if (!empty($row['pay_grade'])) {
                        $options[$payScale->id] .= ' - ' . $row['pay_grade'] .
                            ' (' . $row['amount'] .
                            ' ' . $row['currency'] .
                            ' / ' . $row['periodicity'] .
                            ')';
                    }
                }
            } catch (CiviCRM_API3_Exception $e) {
                $error = $e->getMessage();
            }
            // Cache the data for 5 minutes
            cache_set('civihr_jobcontract_pay_scale', $options, 'cache', time() + 360);
        }
    }
    if ($payScaleId === null) {
        return '';
    }
    // Get the type values based on the $payScaleId
    $label = !empty($payScales[$payScaleId]) ? $payScales[$payScaleId] : '';
    return $label;
}

/*
 * Return Job Contract pension is_enrolled string by given is_enrolled ID.
 *
 * @param int $isEnrolled
 * @return string
 */
function get_jobcontract_pension_is_enrolled($isEnrolledId = NULL) {
    $pensionIsEnrolled = &drupal_static(__FUNCTION__);
    if (!isset($pensionIsEnrolled)) {
        if ($cache = cache_get('civihr_jobcontract_pension_is_enrolled')) {
            $pensionIsEnrolled = $cache->data;
        }
        else {
            try {
                civicrm_initialize();
                $options = array(
                    0 => t('No'),
                    1 => t('Yes'),
                    2 => t('Opted out'),
                );
            } catch (CiviCRM_API3_Exception $e) {
                $error = $e->getMessage();
            }
            // Cache the data for 5 minutes
            cache_set('civihr_jobcontract_pension_is_enrolled', $options, 'cache', time() + 360);
        }
    }
    if ($isEnrolledId === null) {
        return '';
    }
    // Get the type values based on the $isEnrolledId
    return $pensionIsEnrolled[$isEnrolledId];
}

/**
 * Function for caching civicrm_uf_match table from CiviCRM
 */
function get_civihr_uf_match_data($user_id = NULL) {

    // Generate unique static callable / uf_match
    $contact_uf_match = &drupal_static(__FUNCTION__ . '_' . $user_id);

    if (!isset($contact_uf_match)) {
        if ($cache = cache_get('civihr_uf_match_data_' . $user_id)) {
            $contact_uf_match = $cache->data;
        }
        else {

            try {

                // Civi init
                civicrm_initialize();

                $params = array(
                    'uf_id' => $user_id,
                    'version' => 3,
                    'sequential' => 1,
                );

                // Get the contact DATA from the passed user ID
                $res = civicrm_api3('UFMatch', 'Get', $params);
                $contact_uf_match = array_shift($res['values']);

                watchdog('DB hit user uf_match data', print_r($user_id, TRUE));

            }

            catch (CiviCRM_API3_Exception $e) {
                $error = $e->getMessage();
            }

            // Cache the contact data for 5 minutes
            cache_set('civihr_uf_match_data_' . $user_id, $contact_uf_match, 'cache', time() + 360);
        }
    }

    return $contact_uf_match;
}

/**
 * Function for caching contact data returned from CiviCRM
 */
function get_civihr_contact_data($contact_id = NULL, $user_id = '') {

    // If $user_id is passed get the contact ID and continue in the function
    if (isset($user_id) && $user_id != '') {

        // Get the contact ID based on the USER ID
        $contact_id = get_civihr_uf_match_data($user_id)['contact_id'];

    }

    // Generate unique static callable / contact
    $contact_data = &drupal_static(__FUNCTION__ . '_' . $contact_id);

    if (!isset($contact_data)) {
        if ($cache = cache_get('civihr_contact_data_' . $contact_id)) {
            $contact_data = $cache->data;
        }
        else {

            try {

                // Civi init
                civicrm_initialize();

                $contact_data = civicrm_api('Contact', 'getsingle', array(
                    'version' => 3,
                    'return' => array('display_name', 'nick_name', 'image_URL', 'email', 'phone'),
                    'id' => $contact_id
                ));
                watchdog('DB hit contact data', print_r($contact_id, TRUE));

            }

            catch (CiviCRM_API3_Exception $e) {
                $error = $e->getMessage();
            }

            // Cache the contact data for 5 minutes
            cache_set('civihr_contact_data_' . $contact_id, $contact_data, 'cache', time() + 360);
        }
    }

    return $contact_data;
}

/**
 * Implementation of hook_menu()
 */
function civihr_employee_portal_menu() {
    //get all drupal roles except the default ones (anonymous user) and (authenticated user)
    $all_roles = user_roles();
    unset($all_roles[array_search('anonymous user', $all_roles)]);
    unset($all_roles[array_search('authenticated user', $all_roles)]);
    $all_roles = array_values($all_roles);

    $items = array();
    $items['request_new_account/%ctools_js'] = array(
        'title' => 'Edit Document',
        'page callback' => 'civihr_employee_portal_request_new_account',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['civi_documents/ajax/change_document_status/%/%'] = array(
        'title' => 'Change Document Status',
        'page callback' => 'civihr_employee_portal_change_document_status',
		    'access arguments' => array('change document status'),
        'page arguments' => array(3, 4),
        'type' => MENU_CALLBACK,
    );

    $items['civi_documents/%ctools_js/edit/%'] = array(
        'title' => 'Edit Document',
        'page callback' => 'civihr_employee_portal_edit_document',
        'page arguments' => array(1, 3),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['civi_documents/%ctools_js/delete/%'] = array(
        'title' => 'Delete Document',
        'page callback' => 'civihr_employee_portal_delete_document',
        'page arguments' => array(1, 3),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['civi_documents/%ctools_js/reminder/%'] = array(
        'title' => 'Send Reminder',
        'page callback' => 'civihr_employee_portal_send_reminder_document',
        'page arguments' => array(1, 3),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['civi_tasks/%ctools_js/view_completed'] = array(
        'page callback' => 'civihr_employee_portal_civi_tasks_view_completed_callback',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['civi_tasks/%ctools_js/create'] = array(
        'title' => 'Create new Task',
        'page callback' => 'civihr_employee_portal_civi_tasks_create',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['civi_tasks/%ctools_js/edit/%'] = array(
        'title' => 'Edit Task',
        'page callback' => 'civihr_employee_portal_civi_tasks_create',
        'page arguments' => array(1, 3),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['civi_tasks/ajax/complete/%'] = array(
        'title' => 'Mark Task as complete',
        'page callback' => 'civihr_employee_portal_civi_tasks_complete',
        'page arguments' => array(3),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    /**
     * Appraisals menu items.
     */
    $items['hr-appraisals-manager/%ctools_js/upload/%'] = array(
        'title' => 'Appraisal Upload',
        'page callback' => 'civihr_employee_portal_appraisal_manager_upload',
        'page arguments' => array(1, 3),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['hr-appraisals-manager/%ctools_js/view/%'] = array(
        'title' => 'Appraisal View',
        'page callback' => 'civihr_employee_portal_appraisal_manager_view',
        'page arguments' => array(1, 3),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['hr-appraisals-employee/%ctools_js/upload/%'] = array(
        'title' => 'Appraisal Upload',
        'page callback' => 'civihr_employee_portal_appraisal_employee_upload',
        'page arguments' => array(1, 3),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['absence_request/%ctools_js/debit'] = array(
        'page callback' => 'civihr_employee_portal_absence_request_callback',
        'page arguments' => array(1, 2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['absence_request/%ctools_js/credit'] = array(
        'page callback' => 'civihr_employee_portal_absence_request_callback',
        'page arguments' => array(1, 2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['absence_request/%ctools_js/credit_use'] = array(
        'page callback' => 'civihr_employee_portal_absence_request_callback',
        'page arguments' => array(1, 2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['absence_request/%ctools_js/sick'] = array(
        'page callback' => 'civihr_employee_portal_absence_request_callback',
        'page arguments' => array(1, 2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['absence_calendar/%ctools_js/show'] = array(
        'page callback' => 'civihr_employee_portal_absence_calendar_callback',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['manager_approval/%ctools_js/pick_days'] = array(
        'page callback' => 'civihr_employee_portal_manager_approval_pick_days_callback',
        'page arguments' => array(1, 2, 3, 4, 5),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['manager_approval/ajax/quick_approval'] = array(
      'page callback' => 'civihr_employee_portal_manager_approval_quick_approval',
      'page arguments' => array(1, 2, 3, 4, 5),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    );

    $items['manager_approval/%ctools_js/calendar/show'] = array(
        'page callback' => 'civihr_employee_portal_manager_approval_show_calendar_callback',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['hr_resources/%ctools_js/resource/%'] = array(
        'page callback' => 'civihr_employee_portal_hr_resource_load_callback',
        'page arguments' => array(1, 3),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['absence_all/%ctools_js/view'] = array(
        'page callback' => 'civihr_employee_portal_absence_all_view_callback',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['my_details/%ctools_js/view'] = array(
        'page callback' => 'civihr_employee_portal_my_details_callback',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['emergency_contacts/%ctools_js/view'] = array(
        'page callback' => 'civihr_employee_portal_emergency_contacts_callback',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['hr-details'] = array(
        'title' => 'My Details',
        'page callback' => 'civihr_employee_portal_my_details',
        'access arguments' => array('view my details'),
        'type' => MENU_NORMAL_ITEM,
        'menu_name' => 'main-menu',
        'weight' => 4
    );

    $items['ajax/quick_email_notify/%/%'] = array(
        'title' => 'Quick Approve Leave',
        'page callback' => '_ajax_quick_email_notify',
        'page arguments' => array(2, 3),
        'access arguments' => array('access manager approval screen'),
    );

    $items['reports'] = array(
        'title' => 'Reports',
        'page callback' => 'civihr_employee_portal_hrreport_landing_page',
        'access arguments' => array('access hrreports'),
        'type' => MENU_NORMAL_ITEM,
        'menu_name' => 'main-menu',
        'weight' => 5,
    );
    $items['reports/%'] = array(
        'title' => 'CiviHR Custom Report',
        'page callback' => 'civihr_employee_portal_hrreport_custom',
        'page arguments' => array(1),
        'access arguments' => array('access hrreports'),
        'type' => MENU_CALLBACK,
    );
    $items['reports/%/json'] = array(
        'page callback' => 'civihr_employee_portal_hrreport_get_json',
        'page arguments' => array(1),
        'access arguments' => array('access hrreports'),
        'type' => MENU_CALLBACK,
    );
    $items['reports/%/table'] = array(
        'title' => 'CiviHR Custom Report',
        'page callback' => 'civihr_employee_portal_hrreport_custom_printtable',
        'page arguments' => array(1),
        'access arguments' => array('access hrreports'),
        'type' => MENU_CALLBACK,
    );
    $items['reports/settings/age_group'] = array(
        'title' => 'Reports settings - Age group',
        'page callback' => 'civihr_employee_portal_hrreport_settings_age_group',
        'access arguments' => array('manage hrreports settings'),
        'type' => MENU_CALLBACK,
    );
    $items['reports/settings/age_group/%ctools_js/create'] = array(
        'title' => 'Create Age Group',
        'page callback' => 'civihr_employee_portal_hrreport_settings_age_group_create',
        'page arguments' => array(3),
        'access arguments' => array('manage hrreports settings'),
        'type' => MENU_CALLBACK,
    );
    $items['reports/settings/age_group/%ctools_js/edit/%'] = array(
        'title' => 'Edit Age Group',
        'page callback' => 'civihr_employee_portal_hrreport_settings_age_group_create',
        'page arguments' => array(3, 5),
        'access arguments' => array('manage hrreports settings'),
        'type' => MENU_CALLBACK,
    );
    $items['reports/settings/age_group/%ctools_js/delete/%'] = array(
        'title' => 'Delete Age Group',
        'page callback' => 'civihr_employee_portal_hrreport_settings_age_group_delete',
        'page arguments' => array(3, 5),
        'access arguments' => array('manage hrreports settings'),
        'type' => MENU_CALLBACK,
    );
    $items['reports/%/configuration/%'] = array(
        'title' => 'Get Report configuration',
        'page callback' => 'civihr_employee_portal_get_report_configuration_json',
        'page arguments' => array(1, 3),
        'access arguments' => array('access hrreports'),
        'type' => MENU_CALLBACK,
    );
    $items['reports/%/configuration/%/save'] = array(
        'title' => 'Save Report configuration',
        'page callback' => 'civihr_employee_portal_save_report_configuration_json',
        'page arguments' => array(1, 3),
        'access arguments' => array('manage hrreports configuration'),
        'type' => MENU_CALLBACK,
    );
    $items['reports/%/configuration/%/delete'] = array(
        'title' => 'Delete Report configuration',
        'page callback' => 'civihr_employee_portal_delete_report_configuration_json',
        'page arguments' => array(1, 3),
        'access arguments' => array('manage hrreports configuration'),
        'type' => MENU_CALLBACK,
    );

  $items['customize-onboarding-wizard'] = [
    'title' => 'Customize Welcome Wizard',
    'description' => 'Customize Welcome Wizard',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['customize_welcome_wizard_callback'],
    'access arguments' => ['customize welcome wizard'],
    'theme callback' => 'customize_welcome_wizard_theme_callback',
    'type' => MENU_NORMAL_ITEM,
  ];

  return $items;
}

/**
 * Override default admin theme
 *
 * @return string
 */
function customize_welcome_wizard_theme_callback() {
  return 'civihr_default_theme';
}

/**
 * Create the form to customize the onboarding form
 *
 * @return array
 */
function customize_welcome_wizard_callback() {
  return (new OnboardingWizardCustomizationForm())->build();
}

/**
 * This callback is required as Drupal does not handle saving of files from a
 * system form
 * @see https://drupal.stackexchange.com/a/187043/75186
 *
 * @param $form
 * @param $form_state
 */
function welcome_wizard_customization_form_submit($form, &$form_state) {
  global $user;
  $logoKey = OnboardingWizardCustomizationForm::LOGO_KEY;
  $file = file_load($form_state['values'][$logoKey]);
  if (!$file) {
    return;
  }

  $file->status = FILE_STATUS_PERMANENT;
  file_save($file);
  variable_set($logoKey, $file->fid);
  file_usage_add($file, 'user', 'user', $user->uid);
  // value not required for system_settings_form
  unset($form_state['values'][$logoKey]);


}

/**
 * Function to check the menu item access against specific roles
 * @param $roles
 * @return bool
 */
function _user_has_role($roles = array()) {

    // Check for the logged in user
    global $user;

    foreach ($roles as $role) {
        if (in_array($role, $user->roles)) {
            return TRUE;
        }
    }

    return FALSE;

}

/**
 * Quick Approve/Reject email notifications
 * Used to trigger rules events from javascript calls
 * @param $absence_id
 */
function _ajax_quick_email_notify($absence_id, $email_type = NULL) {

    global $user;

    // Get additional details about the absence
    $q = db_select('absence_approval_list', 'aal')
        ->fields('aal', array('absence_title', 'absence_start_date', 'absence_end_date', 'duration', 'employee_id'))
        ->condition('id', $absence_id);

    $result = $q->execute()->fetchObject();

    // Loads the target user based on passed user ID
    $target_user = user_load(_get_uf_match_contact($result->employee_id)['uf_id']);

    // Pass empty manager notes as this is quick approval
    $manager_notes = '';

    // Calculate total duration
    $duration = $result->duration / (6 * 80);

    if ($duration > 1) {
        $day = 'days';
    }
    else {
        $day = 'day';
    }

    $leave_date = explode(" ", $result->absence_start_date)[0] . ' - ' . explode(" ", $result->absence_end_date)[0] . ' = ' . $duration . ' ' . $day;

    if ($email_type == 'approve') {

        // Fire rules events
        rules_invoke_event('approve_all_post_event', $user, $target_user, $manager_notes, $result->absence_title, $leave_date);

    }

    if ($email_type == 'reject') {

        // Fire rules events
        rules_invoke_event('reject_all_post_event', $user, $target_user, $manager_notes, $result->absence_title, $leave_date);

    }

}

/**
 * Loads civicrm_uf_match data based on passed contact_id
 * @param $contact_id
 * @return mixed
 * @throws CiviCRM_API3_Exception
 */
function _get_uf_match_contact($contact_id) {

    $params = array(
        'contact_id' => $contact_id,
        'version' => 3,
        'sequential' => 1,
    );

    // Get the "civicrm_uf_match" data from the passed target contact ID
    $res = civicrm_api3('UFMatch', 'Get', $params);
    $uf_match_data = array_shift($res['values']);

    return $uf_match_data;
}

/**
 * Gets CiviCRM contact ID based on passed drupal UID
 * @param $uid
 * @return int | null
 */
function _get_civicrm_contact_id_by_drupal_uid($uid) {

    $params = array(
        'uf_id' => $uid,
        'version' => 3,
        'sequential' => 1,
    );

    // Get the "civicrm_uf_match" data from the passed target contact ID
    $res = civicrm_api3('UFMatch', 'Get', $params);
    if (empty($res['values'])) {
        return null;
    }

    $uf_match_data = array_shift($res['values']);

    return $uf_match_data['contact_id'];
}

/**
 * Helper function to make a link.
 *
 * The links that are known to be a .chr_action element, have their text wrapper in a <span>
 * so that they can be responsive if the class .chr_action--icon--responsive is applied
 *
 *
 * @param string $link_text
 * @param string $link_type
 * @param string $nid
 * @param string $class
 *   Any additional css classes that the links must have
 * @return string
 */
function civihr_employee_portal_make_link($link_text, $link_type = 'debit', $nid = '', $class = '') {

    // Set a default value if no text in supplied.
    if (empty($link_text)) {
        $link_text = t('Modal');
    }

    if ($link_type == 'calendar') {
        return '' . l("<span>$link_text</span>", 'absence_calendar/nojs/show',
            array(
                'attributes' => array('class' => "chr_action--icon--calendar ctools-use-modal ctools-modal-civihr-default-style $class"),
                'html' => true
            )
        ) . '';
    }

    if ($link_type == 'leave_report') {
        return '' . l("<span>$link_text</span>", 'print-leave-report/',
            array(
                'query' => array('absence_start_date_period_filter' => $nid),
                'attributes' => array('class' => "chr_action--icon--print $class", 'target'=>'_blank'),
                'html' => true
            )
        ) . '';
    }

    if ($link_type == 'hr-resource') {
        return '' . l($link_text, 'hr_resources/nojs/resource/' . $nid,
            array('attributes' => array('class' => "ctools-use-modal ctools-modal-civihr-custom-style $class"))
        ) . '';
    }

    if ($link_type == 'document') {
        return '' . l($link_text, 'civi_documents/nojs/edit/' . $nid,
            array('attributes' => array('class' => "ctools-use-modal ctools-modal-civihr-default-style $class"))
        ) . '';
    }

    return '' . l("<span>$link_text</span>", 'absence_request/nojs/' . $link_type,
        array(
            'attributes' => array('class' => "chr_action ctools-use-modal ctools-modal-civihr-custom-style $class"),
            'html' => true
        )
    ) . '';
}

/**
 * Absence calendar callback
 */
function civihr_employee_portal_absence_calendar_callback($ajax) {

    if ($ajax) {

        ctools_include('ajax');
        ctools_include('modal');

        // Add the responder javascript, required by ctools
        ctools_add_js('ajax-responder');

        $output = array();
        $output[] = ctools_modal_command_display('Calendar view', views_embed_view('calendar_absence_list', 'page_1'));

        print ajax_render($output);
        drupal_exit();
    }
    else {
        return '';
    }

}

/**
 * Manager calendar / employee list callback
 */
function civihr_employee_portal_manager_approval_show_calendar_callback($ajax) {

    if ($ajax) {

        ctools_include('ajax');
        ctools_include('modal');

        // Add the responder javascript, required by ctools
        ctools_add_js('ajax-responder');

        $block = module_invoke('civihr_employee_portal', 'block_view', 'manager_calendar');

        $output = array();
        $output[] = ctools_modal_command_display('Manager Calendar View', render($block['content']));

        print ajax_render($output);
        drupal_exit();
    }
    else {
        return '';
    }

}

/**
 * HR resource modal display callback
 */
function civihr_employee_portal_hr_resource_load_callback($ajax, $nid) {

    if ($ajax) {

        // Get the node data, based on the passed NODE ID
        $node = node_load($nid);

        ctools_include('ajax');
        ctools_include('modal');

        // Add the responder javascript, required by ctools
        ctools_add_js('ajax-responder');

        $output = array();

        // Get the view, filter by the passed NODE ID and Display
        $output[] = ctools_modal_command_display($node->title, views_embed_view('hr_documents', 'hr_resources_modal', array($nid)));

        print ajax_render($output);
        drupal_exit();
    }
    else {
        return '';
    }

}

/**
 * Show all already approved absences in modal window and not seperate page
 * @param $ajax
 */
function civihr_employee_portal_absence_all_view_callback($ajax) {

    if ($ajax) {

        ctools_include('ajax');
        ctools_include('modal');

        // Add the responder javascript, required by ctools
        ctools_add_js('ajax-responder');

        // Get the view for approved absences
        $output[] = ctools_modal_command_display(t('All Absences'), views_embed_view('approvals', 'page'));

        print ajax_render($output);
        drupal_exit();
    }
    else {
        return 'Javascript not enabled';
    }

}

/**
 * My details / Edit my details callback
 */
function civihr_employee_portal_my_details_callback($ajax) {

    if ($ajax) {

        ctools_include('ajax');
        ctools_include('modal');

        // Add the responder javascript, required by ctools
        ctools_add_js('ajax-responder');

        // Load the my details node
        $contents = t('An error occured while loading Webform.');
        $my_details_webform_id = variable_get('my_details_webform_nid');
        if ($my_details_webform_id) {
            $node = node_load($my_details_webform_id);
            $node_render = node_view($node, 'full', NULL);
            $contents = render($node_render);
        }

        $output = array();
        $output[] = ctools_modal_command_display(t('My Details'), render($contents));

        print ajax_render($output);
        drupal_exit();
    }
    else {
        return '';
    }

}

/**
 * My details / Edit emergency contacts callback
 */
function civihr_employee_portal_emergency_contacts_callback($ajax) {

    if ($ajax) {

        ctools_include('ajax');
        ctools_include('modal');

        // Add the responder javascript, required by ctools
        ctools_add_js('ajax-responder');

        // Load the emergency contacts node
        $contents = t('An error occured while loading Webform.');
        $emergency_contact_webform_id = variable_get('emergency_contact_webform_nid');
        if ($emergency_contact_webform_id) {
            $node = node_load($emergency_contact_webform_id);
            $contents = render(node_view($node, 'full', NULL));
        }

        $output = array();
        $output[] = ctools_modal_command_display('Emergency contacts', render($contents));

        print ajax_render($output);
        drupal_exit();
    }
    else {
        return '';
    }

}

/**
 * Manager approval pick days callback function
 */
function civihr_employee_portal_manager_approval_pick_days_callback($ajax, $action = 'pick_days', $user = NULL, $main_absence_id = NULL, $activity_type_id = NULL) {

    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');

        $title = t('Manager approval modal window');

        // Getting the details for the current user or staff
        if (!isset($user) || $user == 'user') {

            $title = t('Absence Details');

        }
        else {

            // Get the contact data (cached or from CIVI)
            $contact_data = get_civihr_contact_data($user);

            if ($action == 'pick_days') {
                $title = t('Approve leave for: ' . $contact_data['display_name']);
            }

        }

        $form_state = array(
            'ajax' => TRUE,
            'is_ajax_update' => TRUE,
            'title' => $title,
            'action' => $action,
            'user_data' => $user,
            'main_absence_id' => $main_absence_id,
            'activity_type_id' => $activity_type_id
        );

        // Use ctools to generate ajax instructions for the browser to create a form in a modal popup.
        $output = ctools_modal_form_wrapper('civihr_employee_portal_manager_approval_pick_days_form', $form_state);

        // If the form has been submitted, there may be additional instructions such as dismissing the modal popup.
        if (!empty($form_state['executed'])) {

            // Add the responder javascript, required by ctools
            ctools_add_js('ajax-responder');

            $output[] = ctools_modal_command_dismiss();
            $output[] = ctools_ajax_command_redirect('dashboard');

        }

        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();

    }
    else {
        return drupal_get_form('civihr_employee_portal_manager_approval_pick_days_form');
    }

}

/**
 * Function that processes approvals and rejections made by manager from the quick absence approval widget button
 *
 * @param int $ajax
 *   boolean value, 1 if it is an ajax call
 * @param string $action
 *   should always be "quick_approval"
 * @param int $activity_id
 *   Activity ID that identifies the absence to be processed
 * @param int $status
 *   ID of status that should be set to main absence and each absence per day (2: Accepted, 9: Rejected)
 * @param string $type
 *   Staus type that is to be set, either "accept" or "reject"
 */
function civihr_employee_portal_manager_approval_quick_approval($ajax, $action, $activity_id, $status, $type) {
  // Civi init
  civicrm_initialize();

  try {
    // Load main activity leave
    $main_activity = civicrm_api3('Activity', 'get', ['sequential' => 1, 'id' => $activity_id])['values'][0];

    // Get activities for each day of leave
    $absenceTypeValue = civicrm_api3('OptionValue', 'get', [
      'sequential' => 1,
      'return' => array("value"),
      'option_group_id' => "activity_type",
      'name' => "Absence",
      'options' => array('limit' => 1),
    ])['values'][0];
    $search_params = [
      'source_record_id' => $activity_id,
      'activity_type_id' => CRM_Utils_Array::key('Absence', $absenceTypeValue['value'])
    ];
    $absence_details = civicrm_api3('Activity', 'get', $search_params);

    // Set activities' status for each day of leave
    foreach ($absence_details['values'] as $current_absence) {
      civicrm_api3('Activity', 'setvalue', ['id' => $current_absence['id'], 'field' => 'status_id', 'value' => $status]);
    }

    // Set main activity's status
    civicrm_api3('Activity', 'setvalue', ['id' => $activity_id, 'field' => 'status_id', 'value' => $status]);

    // Invoke rules event
    _invoke_rules_on_absence_decision($main_activity, $type, $absence_details['values']);

    $result = ['status' => 'success'];
  } catch (CiviCRM_API3_Exception $e) {
    $errorMessage = $e->getMessage();
    $errorCode = $e->getErrorCode();
    $errorData = $e->getExtraParams();

    $result = [
      'status' => 'error',
      'error' => $errorMessage,
      'error_code' => $errorCode,
      'error_data' => $errorData,
    ];
  }

  // Issue response
  print drupal_json_output($result);
  drupal_exit();
}

/**
 * Helper function that builds required parameters to pass to rules_invoke_event on decision (accept/reject) by manager
 *
 * @param $main_activity
 * @param $type
 * @param $absence_details
 */
function _invoke_rules_on_absence_decision($main_activity, $type, $absence_details) {
  global $user;

  // Get target user id
  $target_user = user_load(_get_uf_match_contact($main_activity['source_contact_id'])['uf_id']);

  // Build $leave_date
  $disputes = [];
  $all_duration = 0;

  foreach ($absence_details as $key => $current_absence) {
    $duration = $current_absence['duration'] / (6 * 80);
    $all_duration += $duration;
    $date = new DateTime($current_absence['activity_date_time']);
    $disputes[$current_absence['id']] = [$date->format('Y-m-d'), $duration, get_civihr_absence_statuses($current_absence['status_id'])];
    $last_day = $current_absence;
  }

  if ($all_duration <= 1) {
    $date = new DateTime($last_day['activity_date_time']);
    $duration_date = $date->format('Y-m-d');
    $day = t('day');
  }
  else {
    // Show start date and end date for the absence
    $endDate = new DateTime($last_day['activity_date_time']);
    $duration_date = array_values($disputes)[0][0] . ' - ' .  $endDate->format('Y-m-d');
    $day = t('days');
  }
  $leave_date = $duration_date . ' = ' . $all_duration . ' ' . $day;

  // Get absence type title
  $absenceTypes = get_civihr_absence_types();

  foreach ($absenceTypes as $absenceType) {
    if (isset($absenceType['credit_activity_type_id']) && $absenceType['credit_activity_type_id'] == $main_activity['activity_type_id']) {
      $leave_type = $absenceType['title'];
    }

    if (isset($absenceType['debit_activity_type_id']) && $absenceType['debit_activity_type_id'] == $main_activity['activity_type_id']) {
      $leave_type = $absenceType['title'];
    }
  }

  $event = ($type == 'approve' ? 'approve_all_post_event' : 'reject_all_post_event');
  rules_invoke_event($event, $user, $target_user, '', $leave_type, $leave_date);
}

/**
 * Drupal form to be put in a modal (manager approval pick days form).
 */
function civihr_employee_portal_manager_approval_pick_days_form($form, $form_state) {

    // Civi init
    civicrm_initialize();

    // Get the main "absence" activity ID
    $activityTypes = CRM_Core_OptionGroup::values('activity_type', FALSE, FALSE, FALSE, NULL, 'name');
    $activityTypeId = CRM_Utils_Array::key('Absence', $activityTypes);

    $abesence_details = array(
        'source_record_id' => $form_state['main_absence_id'],
        'activity_type_id' => $activityTypeId,
    );

    $res = civicrm_api3('Activity', 'get', $abesence_details);
    $absence_details = $res['values'];

    // Get additional details about the main activity (staff notes and manager notes too)
    $additional_info = array(
        'sequential' => 1,
        'id' => $form_state['main_absence_id'],
        'api.CustomValue.get' => array('entity_id' => $form_state['main_absence_id']),
    );

    $res = civicrm_api3('Activity', 'get', $additional_info);
    $additional_info = array_shift($res['values']);

    // Set up array list for checkboxes with absence values
    $disputes = array();

    // Calculate the whole duration
    $all_duration = 0;

    // Build the checkbox table list from the child absence values
    foreach ($absence_details as $absence_value) {

        $duration = $absence_value['duration'] / (6 * 80);
        $all_duration += $duration;
        $date = new DateTime($absence_value['activity_date_time']);
        $disputes[$absence_value['id']] = array(
            $date->format('Y-m-d'),
            $duration,
            get_civihr_absence_statuses($absence_value['status_id'])
        );
    }

    if ($all_duration <= 1) {

        // Show 1 date only
        $date = new DateTime($absence_details[key(array_slice($absence_details, -1, 1, TRUE))]['activity_date_time']);
        $duration_date = $date->format('Y-m-d');
        $day = t('day');
    }
    else {

        // Show start date and end date for the absence
        $endDate = new DateTime($absence_details[key(array_slice($absence_details, -1, 1, TRUE))]['activity_date_time']);
        $duration_date = array_values($disputes)[0][0] . ' - ' .  $endDate->format('Y-m-d');
        $day = t('days');
    }

    $header = array(t('Date'), t('Absence duration'), t('Absence status'));
    $absenceTypes = get_civihr_absence_types();

    foreach ($absenceTypes as $absenceType) {

        if (isset($absenceType['credit_activity_type_id']) && $absenceType['credit_activity_type_id'] == $form_state['activity_type_id']) {
            $leave_type = $absenceType['title'];
        }

        if (isset($absenceType['debit_activity_type_id']) && $absenceType['debit_activity_type_id'] == $form_state['activity_type_id']) {
            $leave_type = $absenceType['title'];
        }
    }

    $form['main_id'] = array(
        '#type'     => 'hidden',
        '#title' => 'Main absence ID',
        '#default_value' => $form_state['main_absence_id'],
        '#prefix' => '<div class="modal-civihr-custom__section"><div class="row">'
    );

    $form['leave_type'] = array(
        '#markup' => '
            <div class="col-sm-6">
                <div class="approval-leave-type">
                    <b>' . t('Leave type:') . '</b> '
                    . $leave_type . '
                </div>
            </div>',
    );

    $form['hidden_leave_type'] = array(
        '#type'     => 'hidden',
        '#title' => 'Leave type',
        '#default_value' => $leave_type,
    );

    // Start / End date of the absence duration - temporarily removed according to PCHR-346 task
    $form['whole_duration'] = array(
        '#markup' => '
            <div class="col-sm-6">
                <div class="whole-duration">
                    <b>Date: </b>'
                    . $duration_date . ' (' . $all_duration . ' ' . $day . ')
                </div>
            </div>
        ',
    );

    $form['hidden_whole_duration'] = array(
        '#type'     => 'hidden',
        '#title' => 'Duration and Date (showed in emails)',
        '#default_value' => $duration_date . ' = ' . $all_duration . ' ' . $day,
        '#suffix' => '</div></div>'
    );

    $form['pick_day_checkboxes'] = array(
        '#attributes' => array('class' => array('manager-pick-days-table')),
        '#type' => 'tableselect',
        '#header' => $header,
        '#options' => $disputes,
        '#empty' => 'No users were found.',
        '#prefix' => '<div class="modal-civihr-custom__section--no-padding">',
        '#suffix' => '</div>'
    );

    // Check if the user has the permissions to see the attachments
    if (user_access('access private file download')) {
        // Load the activity entity
        $main_activity = entity_load_single('civicrm_activity', $form_state['main_absence_id']);

        // Check if attachment is set
        if (isset($main_activity->field_attachment['und'][0]['uri'])) {
            $imgpath = $main_activity->field_attachment['und'][0]['uri'];

            $form['show_attached_file'] = array(
                '#markup' => '
                    <div class="modal-civihr-custom__section">
                        <div class="show-attached-file">
                            <div class="show-attached-file-label">
                                <b>' . t('Attached file: ') . '</b>
                            </div>'
                            . l("View Attachment", file_create_url($imgpath), array('html' => TRUE, 'attributes' => array('target' => '_blank'))) . '
                        </div>
                    </div>
                '
            );
        }
    }

    // Output staff comments (if any)
    if ($additional_info['details']) {
        $form['staff_comments'] = array(
            '#markup' => '
                <div class="modal-civihr-custom__section">
                    <div class="staff-comments">
                        <div class="staff-notes-label">
                            <b>' . t('Staff notes: ') . '</b>
                        </div>'
                        . $additional_info['details'] . '
                    </div>
                </div>
            '
        );
    }

    // Get manager notes data (if any)
    $manager_notes_data = isset($additional_info['api.CustomValue.get']) && !empty($additional_info['api.CustomValue.get']['values']) ? $additional_info['api.CustomValue.get']['values'][0]['latest'] : '';

    // Check if we are in readonly mode
    if ($form_state['user_data'] != 'user') {

        // api.CustomValue.get (show manager notes)
        $form['manager_notes'] = array(
            '#title' => t('Manager notes: '),
            '#type' => 'textarea',
            '#rows' => 2,
            '#description' => t('Additional manager notes. (These will be visible for staff!)'),
            '#default_value' => $manager_notes_data,
            '#prefix' => '<div class="modal-civihr-custom__section">',
            '#suffix' => '</div>'
        );

        $form['actions_wrapper_open'] = array(
            '#markup' => '
                <div class="modal-civihr-custom__footer">
                    <div class="chr_actions-wrapper">
            '
        );

        $form['approve_selected'] = array(
            '#attributes' => array('class' => array('chr_action')),
            '#type' => 'submit',
            '#value' => t('Approve selected'),
        );

        $form['approve_all'] = array(
            '#attributes' => array('class' => array('chr_action')),
            '#type' => 'submit',
            '#value' => t('Approve all'),
        );

        $form['reject_all'] = array(
            '#attributes' => array('class' => array('chr_action')),
            '#type' => 'submit',
            '#value' => t('Reject all'),
        );

        // This is a jquery button, which will be replaced onclick with the real Reject All form button (+it will show the manager comments form)
        $form['manager_actions'] = array(
            '#markup' => '<div id="manager-reject-all" class="form-submit chr_action">' . t('Reject all') . '</div>'
        );

        $form['actions_wrapper_close'] = array(
            '#markup' => '</div></div>'
        );

        $form['#validate'][] = 'civihr_employee_portal_manager_approval_pick_days_form_validate';
        $form['#submit'][] = "civihr_employee_portal_manager_approval_pick_days_form_submit";
    }
    else {
        // Still show the read only manager notes
        $form['show_manager_notes'] = array(
            '#markup' => '
                <div class="modal-civihr-custom__section">
                    <div class="show-manager-comments">
                        <div class="show-manager-notes-label">
                            <b>' . t('Manager notes: ') . '</b>
                        </div>'
                        . $manager_notes_data . '
                    </div>
                </div>
            '
        );
    }

    return $form;
}

function civihr_employee_portal_manager_approval_pick_days_form_validate($form, &$form_state) {

    /*

    if (isset($form_state['values']['pick_day_checkboxes']) && $form_state['values']['pick_day_checkboxes'][1] == 0) {
        form_set_error('pick_day_checkboxes', t('Please select days to approve / reject'));
    }
     *
     */

    return TRUE;
}

function civihr_employee_portal_manager_approval_pick_days_form_submit($form, &$form_state) {

    // Current USER object
    global $user;

    // Set the target user OBJECT
    $target_user = user_load(_get_uf_match_contact($form_state['user_data'])['uf_id']);

    // Get the manager notes
    $manager_notes = drupal_html_to_text(nl2br($form_state['values']['manager_notes']));

    // Get the leave type
    $leave_type = $form_state['values']['hidden_leave_type'];

    // Get the Start Date / End Date + duration of the leave
    $leave_date = $form_state['values']['hidden_whole_duration'];

    // @TODO -> move to custom rules action (so it will be configurable through UI)
    if ($form_state['values']['op'] == 'Reject all') {
        if (isset($form_state['values']['pick_day_checkboxes'])) {

            // Civi init
            civicrm_initialize();

            foreach ($form_state['values']['pick_day_checkboxes'] as $act_key => $act_value) {

                $result = civicrm_api3('Activity', 'setvalue', array(
                    'id' => $act_key,
                    'field' => 'status_id',
                    'value' => 9
                ));

            }

            // Set the activity status
            $result = civicrm_api3('Activity', 'setvalue', array(
                'id' => $form_state['values']['main_id'],
                'field' => 'status_id',
                'value' => 9
            ));

            // As manger notes is a custom field at first we need to find the ID for the custom field as this can change
            $custom_field_data = civicrm_api3('CustomField', 'get', array(
                'sequential' => 1,
                'name' => "Comment",
            ));

            // Set the manager notes for the main absence ID
            $result = civicrm_api3('Activity', 'setvalue', array(
                'id' => $form_state['values']['main_id'],
                'field' => 'custom_' . $custom_field_data['id'],
                'value' => $form_state['values']['manager_notes']
            ));

            // Fire rules events
            rules_invoke_event('reject_all_post_event', $user, $target_user, $manager_notes, $leave_type, $leave_date);

        }

    }

    if ($form_state['values']['op'] == 'Approve all') {
        if (isset($form_state['values']['pick_day_checkboxes'])) {

            // Civi init
            civicrm_initialize();

            foreach ($form_state['values']['pick_day_checkboxes'] as $act_key => $act_value) {

                $result = civicrm_api3('Activity', 'setvalue', array(
                    'id' => $act_key,
                    'field' => 'status_id',
                    'value' => 2
                ));

            }

            $result = civicrm_api3('Activity', 'setvalue', array(
                'id' => $form_state['values']['main_id'],
                'field' => 'status_id',
                'value' => 2
            ));

            // Fire rules events
            rules_invoke_event('approve_all_post_event', $user, $target_user, $manager_notes, $leave_type, $leave_date);
        }

    }

    if ($form_state['values']['op'] == 'Approve selected') {
        if (isset($form_state['values']['pick_day_checkboxes'])) {

            // Civi init
            civicrm_initialize();

            foreach ($form_state['values']['pick_day_checkboxes'] as $act_key => $act_value) {

                if ($act_key == $act_value) {
                    $result = civicrm_api3('Activity', 'setvalue', array(
                        'id' => $act_key,
                        'field' => 'status_id',
                        'value' => 2
                    ));
                }
                else {

                    // Set the not approved days as Rejected
                    $result = civicrm_api3('Activity', 'setvalue', array(
                        'id' => $act_key,
                        'field' => 'status_id',
                        'value' => 9
                    ));
                }

            }

            $result = civicrm_api3('Activity', 'setvalue', array(
                'id' => $form_state['values']['main_id'],
                'field' => 'status_id',
                'value' => 10 // Set to the Partially Approved Status
            ));

            // Fire rules events
            rules_invoke_event('partially_approve_post_event', $user, $target_user, $manager_notes, $leave_type, $leave_date);
        }

    }

}

/**
* Ajax menu callback.
*/
function civihr_employee_portal_absence_request_callback($ajax, $absence_type = 'debit') {

    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');

        $title = t('Request leave');

        if ($absence_type == 'credit') {
            $title = t('Request TOIL');
        }

        if ($absence_type == 'credit_use') {
            $title = t('Use TOIL');
        }

        if ($absence_type == 'sick') {
            $title = t('Report new sickness');
        }

        $form_state = array(
            'ajax' => TRUE,
            'is_ajax_update' => TRUE,
            'title' => $title,
            'absence_type' => $absence_type,
        );

        // Since this will run again on form rebuild while still in the modal, prevent
        // form IDs from being incremented.
        // @todo https://drupal.org/node/1305882
        if (!empty($_POST['ajax_html_ids'])) {
            unset($_POST['ajax_html_ids']);
        }

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('civihr_employee_portal_absence_request_form', $form_state);

        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['executed'])) {

            // Add the responder javascript, required by ctools
            ctools_add_js('ajax-responder');

            $output[] = ajax_command_replace('.messages', 'all good');
            $output[] = ctools_modal_command_dismiss();
            $output[] = ctools_ajax_command_redirect('dashboard');

        }

        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();

    }

    else {
        return drupal_get_form('civihr_employee_portal_absence_request_form');
    }

}

/**
 * Drupal form to be put in a modal.
 */
function civihr_employee_portal_absence_request_form($form, &$form_state) {
    return (new AbsenceRequestForm($form, $form_state))->build();
}

/**
 * Ajax callback to change the rendered industry lens taxonomy term
 */
function jms_industry_lens_form_ajax(&$form, &$form_state) {
    return (new AbsenceRequestForm($form, $form_state))->ajax_callback();
}

/**
 * @param $form
 * @param $form_state
 * @return bool
 */
function civihr_employee_portal_absence_request_form_validate($form, &$form_state) {
    return (new AbsenceRequestForm($form, $form_state))->validate();
}

function civihr_employee_portal_absence_request_form_submit($form, &$form_state) {
    return (new AbsenceRequestForm($form, $form_state))->submit();
}

/**
 * Ajax menu callback for dashboard document status change.
 *
 * @param int $document_id
 *  ID of changed document
 *
 * @param int $status_id
 *  ID of new status
 */
function civihr_employee_portal_change_document_status($document_id, $status_id) {
    $res = array(
        'success' => 0,
        'document_id' => $document_id,
        'status_id' => $status_id,
        'message' => t("Error processing status change."),
    );

    try {
        //check whether curent user is assignee of document
        if (_document_can_be_modified($document_id)) {
            $result = civicrm_api3('Document', 'create', array(
                'sequential' => 1,
                'id' => $document_id,
                'status_id' => $status_id,
            ));

            if ($result['is_error'] !== 1) {
                $res['success'] = 1;
                $res['message'] = t("Document status changed.");
            }
        } else {
            $res['message'] = t("Lack of permission to change document status.");
        }
    } catch (CiviCRM_API3_Exception $e) {
        $error = $e->getMessage();
        $res['message'] = t("Error communicating with API.");
    }

    //clear views cache to reflect changes
    _clear_json_cache();

    // Output json
    drupal_json_output($res);
    drupal_exit();
}

/**
 * Check whether user is entitled to change document status
 *
 * @param int $document_id
 *  ID of modified document
 *
 * @param int $user_id
 *  ID of user to check against or not filled for current user
 *
 * @return bool
 *  TRUE if user has needed permission(s), FALSE if he doesn't
 */
function _document_can_be_modified($document_id, $user_id = NULL) {
    $res = FALSE;

    if ($user_id === NULL) {
        global $user;
    } else {
        $user = user_load($user_id);
    }

    if (user_access('change document status')) {
        try {
            $result = civicrm_api3('Document', 'get', array(
                'sequential' => 1,
                'return' => "id,assignee_contact_id",
                'id' => $document_id,
            ));

            $uf = get_civihr_uf_match_data($user->uid);
            $result_values = reset($result['values']);

            if (in_array($uf['contact_id'], $result_values['assignee_contact_id'])) {
                $res = TRUE;
            }
        } catch (CiviCRM_API3_Exception $e) {
            $error = $e->getMessage();
        }
    }

    return $res;
}

/**
* Ajax menu callback.
*/
function civihr_employee_portal_edit_document($ajax, $id) {

    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');

        $title = t('Upload Document');

        $form_state = array(
            'ajax' => TRUE,
            'is_ajax_update' => TRUE,
            'title' => $title,
            'id' => $id,
        );

        // Since this will run again on form rebuild while still in the modal, prevent
        // form IDs from being incremented.
        // @todo https://drupal.org/node/1305882
        if (!empty($_POST['ajax_html_ids'])) {
            unset($_POST['ajax_html_ids']);
        }

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('civihr_employee_portal_document_form', $form_state);

        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['executed'])) {

            // Add the responder javascript, required by ctools
            ctools_add_js('ajax-responder');

            $output[] = ajax_command_replace('.messages', 'all good');
            $output[] = ctools_modal_command_dismiss();
            $output[] = ctools_ajax_command_redirect('dashboard');

        }

        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();

    }

    else {
        return drupal_get_form('civihr_employee_portal_document_form');
    }

}

/**
 * Custom Document dashboard block form.
 */
function civihr_employee_portal_document_form($form, &$form_state) {

    $result_output = array();
    $extensions = CRM_Core_PseudoConstant::getExtensions();
    if (empty($extensions['uk.co.compucorp.civicrm.tasksassignments'])) {
        return $form;
    }

    $activityOptions = array();
    $typeResult = civicrm_api3('Activity', 'getoptions', array(
        'field' => "activity_type_id",
    ));
    $activityOptions['type'] = $typeResult['values'];

    $result = civicrm_api3('Document', 'get', array(
        'sequential' => 1,
        'id' => $form_state['id'],
    ));
    $document = CRM_Utils_Array::first($result['values']);

    $files = CRM_Tasksassignments_Page_Files::fileList(
        array(
            'entityTable' => 'civicrm_activity',
            'entityID' => $document['id'],
        )
    );
    //$files = array();

    $form['#prefix'] = '<article class="node node-webform contextual-links-region clearfix"><div class="content">';
    $form['#suffix'] = '</div></article>';

    $form['id'] = array(
        '#type' => 'hidden',
        '#value' => $document['id'],
    );

    $form['document_type'] = array(
        '#type' => 'textfield',
        '#title' => t('Document type'),
        '#prefix' => '<div class="row"><div class="col-md-12">',
        '#suffix' => '</div></div>',
        '#attributes' => array('readonly' => 'readonly'),
        '#attributes' => array('disabled' => 'disabled'),
        '#default_value' => $activityOptions['type'][$document['activity_type_id']],
    );

    $form['files'] = array(
        '#type' => 'plupload',
        '#title' => 'Files',
        '#prefix' => '<div class="row"><div class="col-md-12"><div class="well drop-zone" id="drop-target">Drop document(s) here</div>',
        '#suffix' => '<div id="notsupported">Your browser doesn\'t support multiupload feature.</div>
            <div>
                <table class="table table-condensed table-upload">
                    <colgroup>
                            <col class="col-index">
                            <col class="col-name">
                            <col class="col-size">
                            <col class="col-status">
                            <col class="col-action">
                    </colgroup>
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Name</th>
                            <th>Size</th>
                            <th>Progress</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody id="filelist">
                    </tbody>
                </table>
            </div>
            <br />
            <div id="container">
                <a href class="btn btn-primary" id="pickfiles">Select files</a>
            </div>
            <br />
            <pre id="console"></pre>
            <script>
            CRM.$(document).trigger("uploaderFormReady", {id: ' . $document['id'] . ', table: "civicrm_activity", url: "/civicrm/tasksassignments/file/upload", formId: "civihr-employee-portal-document-form", title: "Document files", files:' . json_encode($files) . '});
            </script>
        </div></div>',
    );

    $form['expire_date'] = array(
        '#type' => 'date_popup',
        '#title' => t('Expiry date:'),
        '#prefix' => '<div class="row"><div class="col-md-12">',
        '#suffix' => '</div></div>',
        '#date_format' => 'Y-m-d',
        '#date_year_range' => '-10:+10',
        '#default_value' => isset($document['expire_date']) ? strip_tags($document['expire_date']) : '',
    );

    $form['details'] = array(
        '#type' => 'textarea',
        '#title' => t('Notes'),
        '#prefix' => '<div class="row"><div class="col-md-12">',
        '#suffix' => '</div></div>',
        '#rows' => 10,
        '#cols' => 100,
        '#default_value' => isset($document['details']) ? strip_tags($document['details']) : '',
    );

    $form['delete_files'] = array(
        '#type' => 'hidden',
        //'#tree' => TRUE,
    );

    $form['save'] = array(
        '#type' => 'submit',
        '#value' => t('Save'),
        '#attributes' => array(
            'class' => array(
                'btn',
                'btn-primary'
            ),
        ),
    );

    // Add the validation function
    $form['#validate'][] = 'civihr_employee_portal_document_form_validate';

    // Add the submit function
    $form['#submit'][] = 'civihr_employee_portal_document_form_submit';

    return $form;
}

function civihr_employee_portal_document_form_validate($form, &$form_state) {
}

function civihr_employee_portal_document_form_submit($form, &$form_state) {

    $result_output = array();
    $extensions = CRM_Core_PseudoConstant::getExtensions();
    if (empty($extensions['uk.co.compucorp.civicrm.tasksassignments'])) {
        return false;
    }

    $id = $form_state['values']['id'];
    $expireDate = substr($form_state['values']['expire_date'], 0, 10);
    $details = strip_tags($form_state['values']['details']);

    $result = civicrm_api3('Document', 'create', array(
        'sequential' => 1,
        'id' => $id,
        'expire_date' => $expireDate,
        'details' => $details,
    ));

    $deleteFiles = json_decode($form_state['values']['delete_files'], true);
    if (!empty($deleteFiles)) {
        foreach ($deleteFiles as $deleteFile) {
            $result = CRM_Tasksassignments_Page_Files::fileDelete(
                array(
                    'fileID' => (int)$deleteFile['id'],
                    'entityTable' => 'civicrm_activity',
                    'entityID' => $form_state['values']['id'],
                )
            );
        }
    }

    $documentResult = civicrm_api3('Document', 'get', array(
        'sequential' => 1,
        'id' => $id,
    ));
    if ($documentResult['count']) {
        $document = CRM_Utils_Array::first($documentResult['values']);
        if ($document['file_count']) {
            $result = civicrm_api3('Document', 'create', array(
                'sequential' => 1,
                'id' => $id,
                'status_id' => 2,
            ));
        }
    }

    //clear views cache to reflect changes
    _clear_json_cache();

    drupal_set_message(t('Document changes has been saved.'), 'success');
}

/**
* Ajax menu callback.
*/
function civihr_employee_portal_delete_document($ajax, $id) {

    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');

        $title = t('Are you sure you want to delete this Document?');

        $form_state = array(
            'ajax' => TRUE,
            'is_ajax_update' => TRUE,
            'title' => $title,
            'id' => $id,
        );

        // Since this will run again on form rebuild while still in the modal, prevent
        // form IDs from being incremented.
        // @todo https://drupal.org/node/1305882
        if (!empty($_POST['ajax_html_ids'])) {
            unset($_POST['ajax_html_ids']);
        }

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('civihr_employee_portal_document_form_delete_confirm', $form_state);

        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['executed'])) {

            // Add the responder javascript, required by ctools
            ctools_add_js('ajax-responder');

            $output[] = ajax_command_replace('.messages', 'all good');
            $output[] = ctools_modal_command_dismiss();
            $output[] = ctools_ajax_command_redirect('dashboard');

        }

        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();

    }

    else {
        return drupal_get_form('civihr_employee_portal_document_form_delete_confirm');
    }

}

function civihr_employee_portal_document_form_delete_confirm($form, &$form_state){

    $form['id'] = array(
        '#type' => 'hidden',
        '#value' =>  $form_state['id'],
        '#suffix' => "<script>CRM.$('#edit-cancel').bind('click', function() { Drupal.CTools.Modal.dismiss(); return false; });</script>",
    );

    $form['#submit'][] = 'civihr_employee_portal_document_form_delete_submit';

    return confirm_form($form,
        t('Are you sure you want to delete this Document?'),
        'dashboard',
        t('This action cannot be undone from here.'),
        t('Delete'),
        t('Cancel'));
}

function civihr_employee_portal_document_form_delete_submit($form, &$form_state) {

    $result_output = array();
    $extensions = CRM_Core_PseudoConstant::getExtensions();
    if (empty($extensions['uk.co.compucorp.civicrm.tasksassignments'])) {
        return false;
    }

    $id = (int)$form_state['values']['id'];

    $result = civicrm_api3('Document', 'create', array(
        'sequential' => 1,
        'id' => $id,
        'is_deleted' => 1,
    ));

    drupal_set_message(t('Document has been deleted.'), 'success');
}

/**
* Ajax menu callback.
*/
function civihr_employee_portal_send_reminder_document($ajax, $id) {

    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');

        $title = t('Send Reminder');

        $form_state = array(
            'ajax' => TRUE,
            'is_ajax_update' => TRUE,
            'title' => $title,
            'id' => $id,
        );

        // Since this will run again on form rebuild while still in the modal, prevent
        // form IDs from being incremented.
        // @todo https://drupal.org/node/1305882
        if (!empty($_POST['ajax_html_ids'])) {
            unset($_POST['ajax_html_ids']);
        }

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('civihr_employee_portal_document_form_send_reminder', $form_state);

        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['executed'])) {

            // Add the responder javascript, required by ctools
            ctools_add_js('ajax-responder');

            $output[] = ajax_command_replace('.messages', 'all good');
            $output[] = ctools_modal_command_dismiss();
            $output[] = ctools_ajax_command_redirect('dashboard');

        }

        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();

    }

    else {
        return drupal_get_form('civihr_employee_portal_document_form_delete_confirm');
    }

}

function civihr_employee_portal_document_form_send_reminder($form, &$form_state){

    $result_output = array();
    $extensions = CRM_Core_PseudoConstant::getExtensions();
    if (empty($extensions['uk.co.compucorp.civicrm.tasksassignments'])) {
        return $form;
    }

    $form['#prefix'] = '<article class="node node-webform contextual-links-region clearfix"><div class="content">';
    $form['#suffix'] = '</div></article>';

    $activityOptions = array();
    $typeResult = civicrm_api3('Activity', 'getoptions', array(
        'field' => "activity_type_id",
    ));
    $activityOptions['type'] = $typeResult['values'];

    $documentResult = civicrm_api3('Document', 'get', array(
        'sequential' => 1,
        'id' => $form_state['id'],
    ));
    $document = CRM_Utils_Array::first($documentResult['values']);

    $activityContactResult = civicrm_api3('ActivityContact', 'get', array(
        'sequential' => 1,
        'activity_id' => $form_state['id'],
        'record_type_id' => 1,
    ));
    $activityContacts = array();
    foreach ($activityContactResult['values'] as $activityContact) {
        $contactResult = civicrm_api3('Contact', 'get', array(
            'sequential' => 1,
            'id' => $activityContact['contact_id'],
        ));
        $contact = CRM_Utils_Array::first($contactResult['values']);
        $activityContacts[] = $contact['sort_name'];
    }

    $form['id'] = array(
        '#type' => 'hidden',
        '#value' =>  $form_state['id'],
    );

    $form['document'] = array(
        '#type' => 'textfield',
        '#title' => t('Document'),
        '#prefix' => '<div class="row"><div class="col-md-12">',
        '#suffix' => '</div></div>',
        '#attributes' => array('readonly' => 'readonly'),
        '#attributes' => array('disabled' => 'disabled'),
        '#value' => $activityOptions['type'][$document['activity_type_id']],
    );

    $form['due'] = array(
        '#type' => 'textfield',
        '#title' => t('Due'),
        '#prefix' => '<div class="row"><div class="col-md-12">',
        '#suffix' => '</div></div>',
        '#attributes' => array('readonly' => 'readonly'),
        '#attributes' => array('disabled' => 'disabled'),
        '#value' => $document['activity_date_time'],
    );

    $form['assignee'] = array(
        '#type' => 'textfield',
        '#title' => t('Assignee'),
        '#prefix' => '<div class="row"><div class="col-md-12">',
        '#suffix' => '</div></div>',
        '#attributes' => array('readonly' => 'readonly'),
        '#attributes' => array('disabled' => 'disabled'),
        '#value' => implode(', ', $activityContacts),
    );

    $form['notes'] = array(
        '#type' => 'textarea',
        '#title' => t('Notes'),
        '#rows' => 10,
        '#cols' => 100,
        '#prefix' => '<div class="row"><div class="col-md-12">',
        '#suffix' => '</div></div>',
        '#default_value' => '',
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Send'),
    );

    $form['#submit'][] = 'civihr_employee_portal_document_form_send_reminder_submit';

    return $form;
}

function civihr_employee_portal_document_form_send_reminder_submit($form, &$form_state) {

    $result_output = array();
    $extensions = CRM_Core_PseudoConstant::getExtensions();
    if (empty($extensions['uk.co.compucorp.civicrm.tasksassignments'])) {
        return false;
    }

    $id = (int)$form_state['values']['id'];
    $notes = $form_state['values']['notes'];

    $result = civicrm_api3('Document', 'sendreminder', array(
        'sequential' => 1,
        'activity_id' => $id,
        'notes' => $notes,
    ));

    drupal_set_message(t('Reminder has been sent.'), 'success');
}

/**
 * SSP Tasks functions
 */

/**
 * Show all completed Tasks in modal window and not seperate page
 * @param $ajax
 */
function civihr_employee_portal_civi_tasks_view_completed_callback($ajax) {

    if ($ajax) {

        ctools_include('ajax');
        ctools_include('modal');

        // Add the responder javascript, required by ctools
        ctools_add_js('ajax-responder');

        // Get the view for approved absences
        $output[] = ctools_modal_command_display(t('My Completed Tasks'), views_embed_view('Tasks', 'block_1'));

        print ajax_render($output);
        drupal_exit();
    }
    else {
        return 'Javascript not enabled';
    }

}

/**
* Ajax menu callback.
*/
function civihr_employee_portal_civi_tasks_create($ajax, $id = null) {

    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');

        $title = t('Create new Task');
        if ($id) {
            $title = t('Task Details');
        }

        $form_state = array(
            'ajax' => TRUE,
            'is_ajax_update' => TRUE,
            'title' => $title,
            'id' => $id,
        );

        // Since this will run again on form rebuild while still in the modal, prevent
        // form IDs from being incremented.
        // @todo https://drupal.org/node/1305882
        if (!empty($_POST['ajax_html_ids'])) {
            unset($_POST['ajax_html_ids']);
        }

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('civihr_employee_portal_civi_tasks_form', $form_state);

        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['executed'])) {

            // Add the responder javascript, required by ctools
            ctools_add_js('ajax-responder');

            $output[] = ajax_command_replace('.messages', 'all good');
            $output[] = ctools_modal_command_dismiss();
            $output[] = ctools_ajax_command_redirect('dashboard');

        }

        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();

    }

    else {
        return drupal_get_form('civihr_employee_portal_civi_tasks_form');
    }

}

/**
 * Custom Document dashboard block form.
 */
function civihr_employee_portal_civi_tasks_form($form, &$form_state) {

    global $user;
    $contactId = _get_civicrm_contact_id_by_drupal_uid($user->uid);
    $targetId = $contactId;
    $assignmentsSelectOptions = array();
    $assigneeSelected = null;
    $targetSelected = null;
    $assignmentSelected = null;
    $id = isset($form_state['id']) ? $form_state['id'] : null;

    $disabledAttr = array('disabled' => 'disabled');
    if (_task_can_be_edited($id)) {
        $disabledAttr = array();
    }

    $result_output = array();
    $extensions = CRM_Core_PseudoConstant::getExtensions();
    if (empty($extensions['uk.co.compucorp.civicrm.tasksassignments'])) {
        return $form;
    }

    if ($id) {
        $result = civicrm_api3('Task', 'get', array(
            'sequential' => 1,
            'id' => $id,
            'return' => "id,activity_type_id,subject,activity_date_time,details,status_id,priority_id,is_current_revision,is_deleted,assignee_contact_id,source_contact_id,target_contact_id,case_id",
        ));
        $task = CRM_Utils_Array::first($result['values']);
        $assigneeId = CRM_Utils_array::first($task['assignee_contact_id']);
        $targetId = CRM_Utils_Array::first($task['target_contact_id']);

        // Getting Assignee data:
        $result = civicrm_api3('Contact', 'get', array(
            'sequential' => 1,
            'id' => $assigneeId,
        ));
        $assignee = CRM_Utils_Array::first($result['values']);
        $assigneeSelected = array(
            'id' => $assigneeId,
            'text' => $assignee['sort_name'],
        );

        // Getting Target data:
        $result = civicrm_api3('Contact', 'get', array(
            'sequential' => 1,
            'id' => $targetId,
        ));
        $target = CRM_Utils_Array::first($result['values']);
        $targetSelected = array(
            'id' => $targetId,
            'text' => $target['sort_name'],
        );

        // Getting Assignment data:
        if ($task['case_id']) {
            $result = civicrm_api3('Assignment', 'get', array(
                'sequential' => 1,
                'id' => $task['case_id'],
            ));
            $assignment = CRM_Utils_Array::first($result['values']);
            $assignmentSelected = array(
                'id' => $assignment['id'],
                'text' => $target['sort_name'] . ' - '. $assignment['subject'],
            );
        }
    }

    $result = civicrm_api3('Contact', 'get', array(
        'sequential' => 1,
        'id' => $targetId,
    ));
    $target = CRM_Utils_Array::first($result['values']);

    // get all Assignments of the target:
    $result = civicrm_api3('Assignment', 'get', array(
        'sequential' => 1,
        'contact_id' => $targetId,
    ));
    foreach ($result['values'] as $assignment) {
        $assignmentsSelectOptions[] = array(
            'id' => $assignment['id'],
            'text' => $target['sort_name'] . ' - ' . $assignment['subject'],
        );
    }

    $taskTypes = civicrm_api3('Task', 'getoptions', array(
      'field' => "activity_type_id",
    ));

    $taskStatuses = get_task_statuses();

    $activityOptions = array();
    $typeResult = civicrm_api3('Activity', 'getoptions', array(
        'field' => "activity_type_id",
    ));
    $activityOptions['type'] = $typeResult['values'];

    $form['#attributes']['class'][] = 'form-horizontal civihr_form';

    $form['section_open'] = array(
        '#markup' => '<div class="modal-civihr-custom__section">'
    );

    $form['id'] = array(
        '#type' => 'hidden',
        '#value' => $id,
    );

    $form['activity_type_id'] = array(
        '#type' => 'select',
        '#title' => t('Task type:'),
        '#options' => $taskTypes['values'],
        '#attributes' => $disabledAttr,
        '#label_class' => 'col-sm-3 control-label',
        '#field_prefix' => '<div class="col-sm-9">',
        '#field_suffix' => '</div>',
    );

    if ($id) {
        $form['activity_type_id']['#default_value'] = $task['activity_type_id'];
    }

    $form['activity_date_time'] = array(
        '#type' => 'date_popup',
        '#title' => t('Due:'),
        '#date_format' => 'Y-m-d',
        '#date_year_range' => '-10:+10',
        '#default_value' => isset($task['activity_date_time']) ? strip_tags($task['activity_date_time']) : '',
        '#attributes' => $disabledAttr,
        '#label_class' => 'col-xs-12 col-sm-3 control-label',
        '#prefix' => '<div class="civihr_container-inline-date--reset">',
        '#field_prefix' => '<div class="col-xs-4 col-sm-4">',
        '#field_suffix' => '</div>',
        '#suffix' => '</div>'
    );

    $form['subject'] = array(
        '#type' => 'textfield',
        '#title' => t('Subject:'),
        '#default_value' => isset($task['subject']) ? strip_tags($task['subject']) : '',
        '#attributes' => $disabledAttr,
        '#label_class' => 'col-sm-3 control-label',
        '#field_prefix' => '<div class="col-sm-9">',
        '#field_suffix' => '</div>',
    );

    $form['assignee'] = array(
        '#type' => 'textfield',
        '#title' => t('Assignee:'),
        '#default_value' => '',
        '#attributes' => $disabledAttr,
        '#label_class' => 'col-sm-3 control-label',
        '#field_prefix' => '<div class="col-sm-9">',
        '#field_suffix' => '</div>',
    );

    $form['target'] = array(
        '#type' => 'textfield',
        '#title' => t('Target:'),
        '#default_value' => '',
        '#attributes' => $disabledAttr,
        '#label_class' => 'col-sm-3 control-label',
        '#field_prefix' => '<div class="col-sm-9">',
        '#field_suffix' => '</div>',
    );

    $form['status_id'] = array(
        '#type' => 'select',
        '#title' => t('Status:'),
        '#options' => $taskStatuses,
        '#default_value' => isset($task['status_id']) ? $task['status_id'] : '',
        '#attributes' => $disabledAttr,
        '#label_class' => 'col-sm-3 control-label',
        '#field_prefix' => '<div class="col-sm-9">',
        '#field_suffix' => '</div>',
    );

    $form['details'] = array(
        '#type' => 'textarea',
        '#title' => t('Details:'),
        '#rows' => 10,
        '#cols' => 100,
        '#default_value' => isset($task['details']) ? strip_tags($task['details']) : '',
        '#attributes' => $disabledAttr,
        '#label_class' => 'col-sm-3 control-label',
        '#field_prefix' => '<div class="col-sm-9">',
        '#field_suffix' => '</div>',
    );

    $form['assignment'] = array(
        '#type' => 'textfield',
        '#title' => t('Assignment:'),
        '#default_value' => '',
        '#attributes' => $disabledAttr,
        '#label_class' => 'col-sm-3 control-label',
        '#field_prefix' => '<div class="col-sm-9">',
        '#field_suffix' => '</div>',
    );

    $form['section_close'] = array(
        '#markup' => '</div>'
    );

    if (_task_can_be_edited($id)) {
        $form['save'] = array(
            '#type' => 'submit',
            '#value' => t('Save'),
            '#attributes' => array('class' => array('chr_action')),
            '#prefix' => '<div class="modal-civihr-custom__footer"><div class="chr_actions-wrapper">',
            '#suffix'=> '</div></div>'
        );
    }

    // Add the validation function
    $form['#validate'][] = 'civihr_employee_portal_civi_tasks_form_validate';

    // Add the submit function
    $form['#submit'][] = 'civihr_employee_portal_civi_tasks_form_submit';

    $form['javascript'] = array(
        '#markup' =>
          '<script type="text/javascript">'
        . 'Drupal.behaviors.civihr_employee_portal_tasks.buildAssigneeSelect(' . json_encode($assigneeSelected) . ');'
        . 'Drupal.behaviors.civihr_employee_portal_tasks.buildTargetSelect(' . json_encode($targetSelected) . ');'
        . 'Drupal.behaviors.civihr_employee_portal_tasks.buildAssignmentsSelect(' . json_encode($assignmentsSelectOptions) . ', ' . json_encode($assignmentSelected) . ');'
        . '</script>',
    );

    drupal_add_js(drupal_get_path('module', 'civihr_employee_portal') . '/js/tasks.js');

    return $form;
}

function civihr_employee_portal_civi_tasks_form_validate($form, &$form_state) {
}

function civihr_employee_portal_civi_tasks_form_submit($form, &$form_state) {

    global $user;
    $id = isset($form_state['values']['id']) ? $form_state['values']['id'] : null;

    if (_task_can_be_edited($id)) {
        $result_output = array();
        $extensions = CRM_Core_PseudoConstant::getExtensions();
        if (empty($extensions['uk.co.compucorp.civicrm.tasksassignments'])) {
            return false;
        }

        $params = array(
            'sequential' => 1,
            'debug' => false,
            'assignee_contact_id' => $form_state['values']['assignee'],
            'source_contact_id' => _get_civicrm_contact_id_by_drupal_uid($user->uid),
            'target_contact_id' => $form_state['values']['target'],
            'activity_type_id' => $form_state['values']['activity_type_id'],
            'activity_date_time' => $form_state['values']['activity_date_time'],
            'subject' => $form_state['values']['subject'],
            'status_id' => $form_state['values']['status_id'],
            'details' => $form_state['values']['details'],
        );
        if ($id) {
            $params['id'] = $id;
        }
        if (!empty($form_state['values']['assignment'])) {
            $params['case_id'] = (int)$form_state['values']['assignment'];
        }

        $result = civicrm_api3('Task', 'create', $params);

        $folder_real_path = drupal_realpath('public://') . '/views_json_query/';
        _remove_json_cache_files($folder_real_path);

        if (!$result['is_error']) {
            if ($id) {
                drupal_set_message('Task has been updated.', 'success');
            } else {
                drupal_set_message('Task has been created.', 'success');
            }
        } else {
            drupal_set_message('An error occured when saving the Task.', 'error');
        }
    } else {
        drupal_set_message('You do not have permissions to create or edit Task.', 'error');
    }
}

/**
 * Ajax action which tries to mark the Task as complete.
 *
 * @param int $taskId
 *
 * @return NULL
 */
function civihr_employee_portal_civi_tasks_complete($taskId = null) {

    $res = array(
        'success' => 0,
        'message' => t("Error processing status change."),
    );

    try {
        // check whether curent user is assignee of the task
        if (_task_can_be_marked_as_complete($taskId)) {
            $result = civicrm_api3('Task', 'create', array(
                'sequential' => 1,
                'id' => $taskId,
                'status_id' => 2,
            ));

            if ($result['is_error'] !== 1) {
                $res['success'] = 1;
                $res['message'] = t("Task marked as complete.");
            }
        } else {
            $res['message'] = t("You don't have permissions to mark the Task as complete.");
        }
    } catch (CiviCRM_API3_Exception $e) {
        $error = $e->getMessage();
        $res['message'] = t("Error communicating with API.");
    }

    // clear views cache to reflect the changes
    _clear_json_cache();

    // Output json
    drupal_json_output($res);
    drupal_exit();

}

/**
 * Check if user has permissions to mark the task as complete.
 *
 * @param int $taskId
 *
 * @return bool
 */
function _task_can_be_marked_as_complete($taskId) {

    global $user;
    $result = false;

    try {
        $apiResult = civicrm_api3('Task', 'get', array(
            'sequential' => 1,
            'return' => "id,assignee_contact_id",
            'id' => $taskId,
        ));

        $uf = get_civihr_uf_match_data($user->uid);
        $apiResultValue = CRM_Utils_Array::first($apiResult['values']);

        if (in_array($uf['contact_id'], $apiResultValue['assignee_contact_id'])) {
            $result = true;
        }
    } catch (CiviCRM_API3_Exception $e) {
        $error = $e->getMessage();
    }

    return $result;
}

/**
 * Check if user has permissions to edit the task.
 *
 * @param int $taskId
 *
 * @return bool
 */
function _task_can_be_edited($taskId = null) {

    global $user;
    $result = false;

    if ($taskId) {
        try {
            $apiResult = civicrm_api3('Task', 'get', array(
                'sequential' => 1,
                'return' => "id,source_contact_id",
                'id' => $taskId,
            ));

            $uf = get_civihr_uf_match_data($user->uid);
            $apiResultValue = CRM_Utils_Array::first($apiResult['values']);

            if (in_array($uf['contact_id'], array($apiResultValue['source_contact_id']))) {
                $result = true;
            }
        } catch (CiviCRM_API3_Exception $e) {
            $error = $e->getMessage();
        }
    } else {
        $result = true;
    }

    if (!user_access('can create and edit tasks')) {
        $result = false;
    }

    return $result;
}

/**
* Ajax menu callback.
*/
function civihr_employee_portal_appraisal_manager_upload($ajax, $id) {

    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');

        $title = t('Appraisal Upload');

        $form_state = array(
            'ajax' => TRUE,
            'is_ajax_update' => TRUE,
            'title' => $title,
            'id' => $id,
        );

        // Since this will run again on form rebuild while still in the modal, prevent
        // form IDs from being incremented.
        // @todo https://drupal.org/node/1305882
        if (!empty($_POST['ajax_html_ids'])) {
            unset($_POST['ajax_html_ids']);
        }

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('civihr_employee_portal_appraisal_manager_form', $form_state);

        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['executed'])) {

            // Add the responder javascript, required by ctools
            ctools_add_js('ajax-responder');

            $output[] = ajax_command_replace('.messages', 'all good');
            $output[] = ctools_modal_command_dismiss();
            $output[] = ctools_ajax_command_redirect('hr-appraisals-manager');

        }

        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();

    }

    else {
        return drupal_get_form('civihr_employee_portal_appraisal_manager_form');
    }

}

/**
 * Custom Document dashboard block form.
 */
function civihr_employee_portal_appraisal_manager_form($form, &$form_state) {

    $extensions = CRM_Core_PseudoConstant::getExtensions();
    if (empty($extensions['uk.co.compucorp.civicrm.appraisals'])) {
        return $form;
    }

    $result = civicrm_api3('Appraisal', 'get', array(
        'sequential' => 1,
        'id' => $form_state['id'],
    ));
    $appraisal = CRM_Utils_Array::first($result['values']);

    $files = CRM_Appraisals_Page_Files::fileList(
        array(
            'entityTable' => 'civicrm_appraisal-manager',
            'entityID' => $appraisal['id'],
        )
    );

    $form['#prefix'] = '<article class="node node-webform contextual-links-region clearfix"><div class="content">';
    $form['#suffix'] = '</div></article>';

    $form['id'] = array(
        '#type' => 'hidden',
        '#value' => $appraisal['id'],
    );

    $form['files'] = array(
        '#type' => 'plupload',
        '#title' => 'Files',
        '#prefix' => '<div class="row"><div class="col-md-12"><div class="well drop-zone" id="drop-target">Drop document here</div>',
        '#suffix' => '<div id="notsupported">Your browser doesn\'t support multiupload feature.</div>
            <div>
                <table class="table table-condensed table-upload">
                    <colgroup>
                            <col class="col-index">
                            <col class="col-name">
                            <col class="col-size">
                            <col class="col-status">
                            <col class="col-action">
                    </colgroup>
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Name</th>
                            <th>Size</th>
                            <th>Progress</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody id="filelist">
                    </tbody>
                </table>
            </div>
            <br />
            <div id="container">
                <a href class="btn btn-primary" id="pickfiles">Select files</a>
            </div>
            <br />
            <pre id="console"></pre>
            <script>
            CRM.$(document).trigger("uploaderFormReady", {id: ' . $appraisal['id'] . ', table: "civicrm_appraisal-manager", url: "/civicrm/appraisals/file/upload", formId: "civihr-employee-portal-appraisal-manager-form", title: "Appraisal file", files:' . json_encode($files) . '});
            </script>
        </div></div>',
    );

    $form['meeting_date'] = array(
        '#type' => 'date_popup',
        '#title' => t('Appraisal meeting date'),
        '#prefix' => '<div class="row"><div class="col-md-12">',
        '#suffix' => '</div></div>',
        '#date_format' => 'Y-m-d',
        '#date_year_range' => '-10:+10',
        '#default_value' => isset($appraisal['meeting_date']) ? strip_tags($appraisal['meeting_date']) : '',
    );

    $form['checkboxes'] = array(
        '#type' => 'checkboxes',
        '#prefix' => '<div class="row"><div class="col-md-12">',
        '#suffix' => '</div></div>',
        '#options' => array(
            1 => t('Appraisal meeting completed'),
            2 => t('Discussed and approved with employee')
        ),
        '#default_value' => array(
            $appraisal['meeting_completed'] ? 1 : 0,
            $appraisal['approved_by_employee'] ? 2 : 0,
        ),
    );

    $form['notes'] = array(
        '#type' => 'textarea',
        '#title' => t('Notes'),
        '#prefix' => '<div class="row"><div class="col-md-12">',
        '#suffix' => '</div></div>',
        '#rows' => 5,
        '#cols' => 100,
        '#default_value' => isset($appraisal['notes']) ? strip_tags($appraisal['notes']) : '',
    );

    $form['grade'] = array(
        '#type' => 'textfield',
        '#title' => t('Grade'),
        '#prefix' => '<div class="row"><div class="col-md-12">',
        '#suffix' => '</div></div>',
        '#default_value' => isset($appraisal['grade']) ? strip_tags($appraisal['grade']) : '0',
    );

    $form['delete_files'] = array(
        '#type' => 'hidden',
    );

    $form['save'] = array(
        '#type' => 'submit',
        '#value' => t('Save and set to Awaiting Grade'),
        '#attributes' => array(
            'class' => array(
                'btn',
                'btn-primary'
            ),
        ),
    );

    // Add the validation function
    $form['#validate'][] = 'civihr_employee_portal_appraisal_manager_form_validate';

    // Add the submit function
    $form['#submit'][] = 'civihr_employee_portal_appraisal_manager_form_submit';

    return $form;
}

function civihr_employee_portal_appraisal_manager_form_validate($form, &$form_state) {
    if (empty($form_state['values']['meeting_date'])) {
        form_set_error('meeting_date', t('Please specify Appraisal meeting date.'));
    }
}

function civihr_employee_portal_appraisal_manager_form_submit($form, &$form_state) {
    $result_output = array();
    $extensions = CRM_Core_PseudoConstant::getExtensions();
    if (empty($extensions['uk.co.compucorp.civicrm.appraisals'])) {
        return false;
    }

    $id = (int)strip_tags($form_state['values']['id']);
    $meetingDate = substr(strip_tags($form_state['values']['meeting_date']), 0, 10);
    $meetingCompleted = strip_tags($form_state['values']['checkboxes'][1]) ? 1 : 0;
    $meetingApproved = (int)strip_tags($form_state['values']['checkboxes'][2]) ? 1 : 0;
    $notes = strip_tags($form_state['values']['notes']);
    $grade = (int)strip_tags($form_state['values']['grade']);

    $params = array(
        'sequential' => 1,
        'id' => $id,
        'meeting_date' => $meetingDate,
        'meeting_completed' => $meetingCompleted,
        'approved_by_employee' => $meetingApproved,
        'notes' => $notes,
    );
    //TODO: if (has_appraisal_permissions to grade) {
    $params['grade'] = $grade;
    //}

    // setting appraisal status to Awaiting Grade:
    $params['status_id'] = 3;

    $result = civicrm_api3('Appraisal', 'create', $params);

    $deleteFiles = json_decode($form_state['values']['delete_files'], true);
    if (!empty($deleteFiles)) {
        foreach ($deleteFiles as $deleteFile) {
            $result = CRM_Appraisals_Page_Files::fileDelete(
                array(
                    'fileID' => (int)$deleteFile['id'],
                    'entityTable' => 'civicrm_appraisal-manager',
                    'entityID' => $form_state['values']['id'],
                )
            );
        }
    }

    //clear views cache to reflect changes
    _clear_json_cache();

    drupal_set_message(t('Appraisal changes has been saved.'), 'success');
    //drupal_goto('hr-appraisals-manager');
}

function civihr_employee_portal_appraisal_manager_view($ajax, $id) {

    $appraisal = civicrm_api3('Appraisal', 'getsingle', array(
        'sequential' => 1,
        'id' => (int)$id,
    ));
    $appraisal['meeting_date'] = substr($appraisal['meeting_date'], 0, 10);
    $appraisalCycle = civicrm_api3('AppraisalCycle', 'getsingle', array(
        'sequential' => 1,
        'id' => $appraisal['appraisal_cycle_id'],
    ));
    $contact = get_civihr_contact_data($appraisal['contact_id']);
    $manager = get_civihr_contact_data($appraisal['manager_id']);
    $title = $contact['display_name'] . ' Appraisal';
    $documents = civihr_employee_portal_get_appraisal_documents($appraisal['id']);

    $output = theme_render_template(
        drupal_get_path('module', 'civihr_employee_portal') .
        '/templates/civihr-employee-portal-appraisal-manager-view-modal.tpl.php',
        array(
            'appraisal' => $appraisal,
            'appraisalCycle' => $appraisalCycle,
            'contact' => $contact,
            'manager' => $manager,
            'appraisalStatus' => get_appraisal_status($appraisal['status_id']),
            'appraisalCycleType' => get_appraisal_cycle_type($appraisalCycle['type_id']),
            'documents' => $documents,
        )
    );

    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');

        ctools_modal_render($title, $output);
        drupal_exit();
    } else {
        return $output;
    }

}

function civihr_employee_portal_appraisal_employee_upload($ajax, $id) {

    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');

        $title = t('Appraisal Upload');

        $form_state = array(
            'ajax' => TRUE,
            'is_ajax_update' => TRUE,
            'title' => $title,
            'id' => $id,
        );

        // Since this will run again on form rebuild while still in the modal, prevent
        // form IDs from being incremented.
        // @todo https://drupal.org/node/1305882
        if (!empty($_POST['ajax_html_ids'])) {
            unset($_POST['ajax_html_ids']);
        }

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('civihr_employee_portal_appraisal_employee_form', $form_state);

        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['executed'])) {

            // Add the responder javascript, required by ctools
            ctools_add_js('ajax-responder');

            $output[] = ajax_command_replace('.messages', 'all good');
            $output[] = ctools_modal_command_dismiss();
            $output[] = ctools_ajax_command_redirect('dashboard');

        }

        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();

    }

    else {
        return drupal_get_form('civihr_employee_portal_appraisal_employee_form');
    }

}

/**
 * Custom Document dashboard block form.
 */
function civihr_employee_portal_appraisal_employee_form($form, &$form_state) {

    $extensions = CRM_Core_PseudoConstant::getExtensions();
    if (empty($extensions['uk.co.compucorp.civicrm.appraisals'])) {
        return $form;
    }

    $result = civicrm_api3('Appraisal', 'get', array(
        'sequential' => 1,
        'id' => $form_state['id'],
    ));
    $appraisal = CRM_Utils_Array::first($result['values']);

    $files = CRM_Appraisals_Page_Files::fileList(
        array(
            'entityTable' => 'civicrm_appraisal-self',
            'entityID' => $appraisal['id'],
        )
    );

    $form['#prefix'] = '<article class="node node-webform contextual-links-region clearfix"><div class="content">';
    $form['#suffix'] = '</div></article>';

    $form['id'] = array(
        '#type' => 'hidden',
        '#value' => $appraisal['id'],
    );

    $form['files'] = array(
        '#type' => 'plupload',
        '#title' => 'Files',
        '#prefix' => '<div class="row"><div class="col-md-12"><div class="well drop-zone" id="drop-target">Drop document here</div>',
        '#suffix' => '<div id="notsupported">Your browser doesn\'t support multiupload feature.</div>
            <div>
                <table class="table table-condensed table-upload">
                    <colgroup>
                            <col class="col-index">
                            <col class="col-name">
                            <col class="col-size">
                            <col class="col-status">
                            <col class="col-action">
                    </colgroup>
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Name</th>
                            <th>Size</th>
                            <th>Progress</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody id="filelist">
                    </tbody>
                </table>
            </div>
            <br />
            <div id="container">
                <a href class="btn btn-primary" id="pickfiles">Select files</a>
            </div>
            <br />
            <pre id="console"></pre>
            <script>
            CRM.$(document).trigger("uploaderFormReady", {id: ' . $appraisal['id'] . ', table: "civicrm_appraisal-self", url: "/civicrm/appraisals/file/upload", formId: "civihr-employee-portal-appraisal-employee-form", title: "Appraisal file", files:' . json_encode($files) . '});
            </script>
        </div></div>',
    );

    $form['delete_files'] = array(
        '#type' => 'hidden',
    );

    $form['save'] = array(
        '#type' => 'submit',
        '#value' => t('Save and Assign to Manager'),
        '#attributes' => array(
            'class' => array(
                'btn',
                'btn-primary'
            ),
        ),
    );

    // Add the validation function
    $form['#validate'][] = 'civihr_employee_portal_appraisal_employee_form_validate';

    // Add the submit function
    $form['#submit'][] = 'civihr_employee_portal_appraisal_employee_form_submit';

    return $form;
}

function civihr_employee_portal_appraisal_employee_form_validate($form, &$form_state) {
    return TRUE;
}

function civihr_employee_portal_appraisal_employee_form_submit($form, &$form_state) {
    $result_output = array();
    $extensions = CRM_Core_PseudoConstant::getExtensions();
    if (empty($extensions['uk.co.compucorp.civicrm.appraisals'])) {
        return false;
    }

    $id = (int)strip_tags($form_state['values']['id']);

    $params = array(
        'sequential' => 1,
        'id' => $id,
    );

    // setting appraisal status to Awaiting Manager Appraisal:
    $params['status_id'] = 2;

    $result = civicrm_api3('Appraisal', 'create', $params);

    $deleteFiles = json_decode($form_state['values']['delete_files'], true);
    if (!empty($deleteFiles)) {
        foreach ($deleteFiles as $deleteFile) {
            $result = CRM_Appraisals_Page_Files::fileDelete(
                array(
                    'fileID' => (int)$deleteFile['id'],
                    'entityTable' => 'civicrm_appraisal-self',
                    'entityID' => $form_state['values']['id'],
                )
            );
        }
    }

    //clear views cache to reflect changes
    _clear_json_cache();

    drupal_set_message(t('Appraisal changes has been saved.'), 'success');
    //drupal_goto('hr-appraisals-manager');
}

function civihr_employee_portal_get_appraisal_documents($appraisalId) {

    $documents = array();
    $selfAppraisalFiles = CRM_Appraisals_Page_Files::fileList(array(
        'entityTable' => 'civicrm_appraisal-self',
        'entityID' => $appraisalId,
    ));
    foreach ($selfAppraisalFiles as $file) {
        $file['appraisalFileTypeLabel'] = 'Self Appraisal';
        $documents['selfAppraisal'] = $file;
    }
    $managerAppraisalFiles = CRM_Appraisals_Page_Files::fileList(array(
        'entityTable' => 'civicrm_appraisal-manager',
        'entityID' => $appraisalId,
    ));
    foreach ($managerAppraisalFiles as $file) {
        $file['appraisalFileTypeLabel'] = 'Manager Appraisal';
        $documents['managerAppraisal'] = $file;
    }

    return $documents;
}

////////////////////////////// end of Appraisals functions.


/**
* Ajax menu callback.
*/
function civihr_employee_portal_request_new_account($ajax) {

    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');

        $title = t('Request Access');

        $form_state = array(
            'ajax' => TRUE,
            'is_ajax_update' => TRUE,
            'title' => $title,
        );

        // Since this will run again on form rebuild while still in the modal, prevent
        // form IDs from being incremented.
        // @todo https://drupal.org/node/1305882
        if (!empty($_POST['ajax_html_ids'])) {
            unset($_POST['ajax_html_ids']);
        }

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('civihr_employee_portal_request_new_account_form', $form_state);

        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['executed'])) {

            // Add the responder javascript, required by ctools
            ctools_add_js('ajax-responder');

            $output[] = ajax_command_replace('.messages', 'all good');
            $output[] = ctools_modal_command_dismiss();
            $output[] = ctools_ajax_command_redirect('welcome-page');

        }

        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();

    }

    else {
        return drupal_get_form('civihr_employee_portal_request_new_account_form');
    }
}

function civihr_employee_portal_request_new_account_form($form, &$form_state){

    $form = array();

    //$form = drupal_get_form('user_register_form', $form);

    $form['#prefix'] = '<div id="request-new-account-form" class="col-md-12">';
    $form['#suffix'] = '</div>';

    $form['first_name'] = array(
        '#type' => 'textfield',
        '#title' => t('First Name'),
        '#prefix' => '<div class="row"><div class="col-md-6">',
        '#suffix' => '</div>',
        '#attributes' => array(
            'placeholder' => t('First Name'),
        ),
    );

    $form['last_name'] = array(
        '#type' => 'textfield',
        '#title' => t('Last Name'),
        '#prefix' => '<div class="col-md-6">',
        '#suffix' => '</div></div>',
        '#attributes' => array(
            'placeholder' => t('Last Name'),
        ),
    );

    $form['mail'] = array(
        '#type' => 'textfield',
        '#title' => t('Email'),
        '#prefix' => '<div class="row"><div class="col-md-12">',
        '#suffix' => '</div></div>',
        '#attributes' => array(
            'placeholder' => t('Email'),
        ),
    );

    $form['name'] = array(
        '#type' => 'textfield',
        '#title' => t('Username'),
        '#prefix' => '<div class="row"><div class="col-md-12">',
        '#suffix' => '</div></div>',
        '#attributes' => array(
            'placeholder' => t('Username'),
        ),
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Request Access'),
    );

    $form['#validate'] = array('civihr_employee_portal_request_new_account_validate');
    $form['#submit'] = array('civihr_employee_portal_request_new_account_submit');

    return $form;
}

function civihr_employee_portal_request_new_account_validate($form, &$form_state) {

    //$form['#user_category'] = 'account';
    if ($form_state['values']['first_name'] == '') {
        form_set_error('first_name', t('First Name field is required.'));
    }

    if ($form_state['values']['last_name'] == '') {
        form_set_error('last_name', t('Last Name field is required.'));
    }

    if ($form_state['values']['mail'] == '') {
        form_set_error('mail', t('Email field is required.'));
    }

    if ($form_state['values']['name'] == '') {
        form_set_error('name', t('Employee ID field is required.'));
    }

    if (isset($form_state['values']['name'])) {
      if ($error = user_validate_name($form_state['values']['name'])) {
        form_set_error('name', $error);
      }
      elseif ((bool) db_select('users')->fields('users', array('uid'))->condition('uid', 0, '<>')->condition('name', db_like($form_state['values']['name']), 'LIKE')->range(0, 1)->execute()->fetchField()) {
        form_set_error('name', t('The name %name is already taken.', array('%name' => $form_state['values']['name'])));
      }
    }

    // Validate the e-mail address, and check if it is taken by an existing user.
    if ($error = user_validate_mail($form_state['values']['mail'])) {
      form_set_error('mail', $error);
    }
    elseif ((bool) db_select('users')->fields('users', array('uid'))->condition('uid', 0, '<>')->condition('mail', db_like($form_state['values']['mail']), 'LIKE')->range(0, 1)->execute()->fetchField()) {
      // Format error message dependent on whether the user is logged in or not.
      if ($GLOBALS['user']->uid) {
        form_set_error('mail', t('The e-mail address %email is already taken.', array('%email' => $form_state['values']['mail'])));
      }
      else {
        form_set_error('mail', t('The e-mail address %email is already registered. <a href="@password">Have you forgotten your password?</a>', array('%email' => $form_state['values']['mail'], '@password' => url('user/password'))));
      }
    }

    //user_account_form_validate($form, $form_state);
    //user_register_validate($form, $form_state);

    /*user_account_form_validate($form, $form_state);
    user_validate_picture($form, $form_state);
    user_register_validate($form, $form_state);*/
}

function civihr_employee_portal_request_new_account_submit($form, &$form_state) {

    $edit = array(
        'name' => $form_state['values']['name'],
        'pass' => user_password(),
        'mail' => $form_state['values']['mail'],
        //'init' => $form_state['values']['init'],
        'status' => 0,
        'access' => REQUEST_TIME,
    );

    $user = user_save(drupal_anonymous_user(), $edit);
    if (!empty($user->uid)) {
        $uf = get_civihr_uf_match_data($user->uid);
        if (!empty($uf['contact_id'])) {
            $result = civicrm_api3('Contact', 'create', array(
                'sequential' => 1,
                'id' => $uf['contact_id'],
                'first_name' => $form_state['values']['first_name'],
                'last_name' => $form_state['values']['last_name'],
            ));
        }
    }

    // Fire rules register events
    rules_invoke_event('user_and_civi_contact_added', $user);

    drupal_set_message(t('Request sent! You will receive email notificiation once your account is activated.'), 'success');
}

/**
 * Returns the contact list from CiviCRM in json format
 * The json response will be cached in local file when the VIEWS requests to load data from this endpoint
 */
function civihr_employee_portal_get_contact_list() {

    watchdog('not cached contact list', 'test1');

    $result_contacts = civicrm_api3('Contact', 'get', array(
        'sequential' => 1,
        'options' => array(
            'limit' => 10000000,
        ),

        'return' => "contact_id,display_name,email,phone,contact_type",
    ));

    $result_contracts = civicrm_api3('HRJobContract', 'get', array(
        'sequential' => 1,
        'options' => array(
            'limit' => 10000000,
        ),
        'return' => 'is_primary,title,location,contract_type,period_type,contact_id'
    ));

    // Merge contacts with contracts (if contract doesn't exist still return the contact data)
    $merged_output = HelperClass::array_merge_callback($result_contacts['values'], $result_contracts['values'], function ($contact_array, $job_contract_array) {

        // Merge only for the primary contracts
        if ($job_contract_array['is_primary'] == 1) {
            return $contact_array['contact_id'] == $job_contract_array['contact_id'];
        }
    });

    // Build the results
    $result_output = Array();
    $result_output['values'] = $merged_output;

    // Output json results
    drupal_json_output($result_output);
    drupal_exit();

}

/**
 * Implements hook_block_info().
 */
function civihr_employee_portal_block_info() {

    // Call the Base class
    $blocks = new Base;

    // Generate the block and return
    return $blocks->generateBlockInfo();

}

/**
 * Implements hook_block_view().
 */
function civihr_employee_portal_block_view($delta = '') {

    $blocktypes = Base::returnBlockTypes();

    if (array_key_exists($delta, $blocktypes)) {
        $block = array();

        $block['subject'] = $blocktypes[$delta]['title'];
        $block['content'] = _civihr_employee_portal_block_generate_content($blocktypes[$delta]['class_name']);

        return $block;
    }

}

/**
 * Block content generated based on Block class
 */
function _civihr_employee_portal_block_generate_content($class_name = '') {

    $class_name = 'Drupal\civihr_employee_portal\Blocks' . '\\' . $class_name;

    $block = new $class_name;

    return $block->generateBlock();
}

/**
 * Implements hook_schema().
 */
function civihr_employee_portal_schema() {
    $schema = [];

    // Reports settings db table.
    $schema['reports_settings_age_group'] = [
        'description' => 'HR Reports Age Group settings',
        'fields' => [
            'id' => [
                'type' => 'serial',
                'unsigned' => TRUE,
                'not null' => TRUE,
            ],
            'age_from' => [
                'type' => 'int',
                'not null' => FALSE,
                'default' => NULL,
            ],
            'age_to' => [
                'type' => 'int',
                'not null' => FALSE,
                'default' => NULL,
            ],
            'label' => [
                'type' => 'varchar',
                'length' => 32,
                'not null' => TRUE,
            ],
        ],
        'unique keys' => [],
        'primary key' => ['id'],
    ];

    // Reports configuration db table.
    $schema['reports_configuration'] = [
        'description' => 'HR Reports Configuration',
        'fields' => [
            'id' => [
                'type' => 'serial',
                'unsigned' => TRUE,
                'not null' => TRUE,
            ],
            'report_name' => [
                'type' => 'varchar',
                'length' => 256,
                'not null' => TRUE,
            ],
            'label' => [
                'type' => 'varchar',
                'length' => 256,
                'not null' => TRUE,
            ],
            'json_config' => [
                'type' => 'text',
                'not null' => FALSE,
            ],
        ],
        'unique keys' => [],
        'primary key' => ['id'],
    ];

    return $schema;
}

/**
 * Implements hook_schema_alter().
 */
function civihr_employee_portal_schema_alter(&$schema) {

    $schema['absence_list']['description'] = 'Views data associated with absence_list';
    $schema['absence_list']['fields']['id'] = array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Activity ID.',
    );
    $schema['absence_list']['fields']['contact_id'] = array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'CiviCRM Contact ID.',
    );
    $schema['absence_list']['fields']['absence_title'] = array(
        'type' => 'varchar',
        'length' => 200,
        'not null' => TRUE,
        'description' => 'Activity Title.',
    );
    $schema['absence_list']['fields']['drupal_uid'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Drupal User ID.',
    );
    $schema['absence_list']['fields']['duration'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Absence duration.',
    );
    $schema['absence_list']['fields']['activity_type_id'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Absence type ID.',
    );
    $schema['absence_list']['fields']['is_credit'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Absence activity (Is Credit type?)',
    );
    $schema['absence_list']['fields']['absence_status'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Absence status',
    );
    $schema['absence_list']['fields']['absence_start_date'] = array(
        'type' => 'varchar',
        'mysql_type' => 'DATETIME',
        'not null' => FALSE,
        'description' => 'Absence start date.',
    );
    $schema['absence_list']['fields']['absence_end_date'] = array(
        'type' => 'varchar',
        'mysql_type' => 'DATETIME',
        'not null' => FALSE,
        'description' => 'Absence end date.',
    );
    $schema['absence_list']['fields']['absence_start_date_timestamp'] = array(
        'type' => 'varchar',
        'mysql_type' => 'DATETIME',
        'not null' => FALSE,
        'description' => 'Absence start date. (TIMESTAMP)',
    );
    $schema['absence_list']['fields']['absence_end_date_timestamp'] = array(
        'type' => 'varchar',
        'mysql_type' => 'DATETIME',
        'not null' => FALSE,
        'description' => 'Absence end date. (TIMESTAMP)',
    );
    $schema['absence_list']['fields']['details'] = array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Activity details text.',
    );

    $schema['absence_approval_list']['description'] = 'Views data associated with absence_approval_list';
    $schema['absence_approval_list']['fields']['id'] = array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Activity ID.',
    );
    $schema['absence_approval_list']['fields']['absence_title'] = array(
        'type' => 'varchar',
        'length' => 200,
        'not null' => TRUE,
        'description' => 'Activity Title.',
    );
    $schema['absence_approval_list']['fields']['drupal_uid'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Drupal User ID.',
    );
    $schema['absence_approval_list']['fields']['employee_id'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Employee ID.',
    );
    $schema['absence_approval_list']['fields']['duration'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Absence duration.',
    );
    $schema['absence_approval_list']['fields']['activity_type_id'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Absence type ID.',
    );
    $schema['absence_approval_list']['fields']['is_credit'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Absence activity (Is Credit type?)',
    );
    $schema['absence_approval_list']['fields']['absence_start_date'] = array(
        'type' => 'varchar',
        'mysql_type' => 'DATETIME',
        'not null' => FALSE,
        'description' => 'Absence start date.',
    );
    $schema['absence_approval_list']['fields']['absence_end_date'] = array(
        'type' => 'varchar',
        'mysql_type' => 'DATETIME',
        'not null' => FALSE,
        'description' => 'Absence end date.',
    );
    $schema['absence_approval_list']['fields']['absence_start_date_timestamp'] = array(
        'type' => 'varchar',
        'mysql_type' => 'DATETIME',
        'not null' => FALSE,
        'description' => 'Absence start date timestamp.',
    );
    $schema['absence_approval_list']['fields']['absence_end_date_timestamp'] = array(
        'type' => 'varchar',
        'mysql_type' => 'DATETIME',
        'not null' => FALSE,
        'description' => 'Absence end date timestamp.',
    );

    $schema['absence_activity']['description'] = 'Views data associated with Absence Activities';
    $schema['absence_activity']['fields']['absence_activity_id'] = array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => 'Absence Activity ID.',
    );
    $schema['absence_activity']['fields']['absence_contact_id'] = array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => 'Absence Contact ID.',
    );
    $schema['absence_activity']['fields']['absence_type'] = array(
        'type' => 'varchar',
        'length' => 256,
        'not null' => FALSE,
        'description' => 'Absence Type.',
    );
    $schema['absence_activity']['fields']['absence_date'] = array(
        'type' => 'varchar',
        'length' => 10,
        'mysql_type' => 'DATE',
        'not null' => FALSE,
        'description' => 'Absence Date.',
    );
    $schema['absence_activity']['fields']['absence_month'] = array(
        'type' => 'varchar',
        'length' => 7,
        'mysql_type' => 'DATE',
        'not null' => FALSE,
        'description' => 'Absence Month.',
    );
    $schema['absence_activity']['fields']['absence_start_date'] = array(
        'type' => 'varchar',
        'length' => 10,
        'mysql_type' => 'DATE',
        'not null' => FALSE,
        'description' => 'Absence Start Date.',
    );
    $schema['absence_activity']['fields']['absence_start_date_month'] = array(
        'type' => 'varchar',
        'length' => 7,
        'mysql_type' => 'DATE',
        'not null' => FALSE,
        'description' => 'Absence Start Date Month.',
    );
    $schema['absence_activity']['fields']['absence_end_date'] = array(
        'type' => 'varchar',
        'length' => 10,
        'mysql_type' => 'DATE',
        'not null' => FALSE,
        'description' => 'Absence End Date.',
    );
    $schema['absence_activity']['fields']['absence_end_date_month'] = array(
        'type' => 'varchar',
        'length' => 7,
        'mysql_type' => 'DATE',
        'not null' => FALSE,
        'description' => 'Absence End Date Month.',
    );
    $schema['absence_activity']['fields']['absence_day_of_week'] = array(
        'type' => 'varchar',
        'not null' => FALSE,
        'description' => 'Absence day of week.',
    );
    $schema['absence_activity']['fields']['absence_duration'] = array(
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'Absence duration.',
    );
/*    $schema['absence_activity']['fields']['absence_duration_in_days'] = array(
        'type' => 'varchar',
        'not null' => TRUE,
        'description' => 'Absence duration in days.',
    );*/
/*    $schema['absence_activity']['fields']['absence_length'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Absence length.',
    );*/
    $schema['absence_activity']['fields']['absence_amount_taken'] = array(
        'type' => 'varchar',
        'not null' => FALSE,
        'description' => 'Absence amount taken.',
    );
    $schema['absence_activity']['fields']['absence_amount_accrued'] = array(
        'type' => 'varchar',
        'not null' => FALSE,
        'description' => 'Absence amount accrued.',
    );
    $schema['absence_activity']['fields']['absence_absolute_amount'] = array(
        'type' => 'varchar',
        'not null' => FALSE,
        'description' => 'Absence absolute amount.',
    );
    $schema['absence_activity']['fields']['absence_comment'] = array(
        'type' => 'varchar',
        'length' => 256,
        'not null' => FALSE,
        'description' => 'Absence Comment.',
    );
    $schema['absence_activity']['fields']['absence_status'] = array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => FALSE,
        'description' => 'Absence Status.',
    );
    $schema['absence_activity']['fields']['absence_is_credit'] = array(
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'Absence is credit.',
    );

    $schema['civicrm_value_length_of_service_11']['description'] = 'Views data associated with Contact Length of Service';
    $schema['civicrm_value_length_of_service_11']['fields']['id'] = array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => 'Length of Service ID.',
    );
    $schema['civicrm_value_length_of_service_11']['fields']['entity_id'] = array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => 'Contact ID.',
    );
    $schema['civicrm_value_length_of_service_11']['fields']['length_of_service'] = array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => 'Length of Service.',
    );

    // appraisal view:
    $schema['appraisal']['description'] = 'Views data representation of CiviHR Appraisal';
    $schema['appraisal']['fields']['id'] = array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => 'Appraisal ID',
    );
    $schema['appraisal']['fields']['contact_id'] = array(
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'Contact ID',
    );
    $schema['appraisal']['fields']['cycle_type_id'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Cycle type ID',
    );
    $schema['appraisal']['fields']['cycle_start_date'] = array(
        'type' => 'varchar',
        'length' => 10,
        'mysql_type' => 'DATE',
        'not null' => TRUE,
        'description' => 'Cycle start date',
    );
    $schema['appraisal']['fields']['cycle_end_date'] = array(
        'type' => 'varchar',
        'length' => 10,
        'mysql_type' => 'DATE',
        'not null' => TRUE,
        'description' => 'Cycle end date',
    );
    $schema['appraisal']['fields']['status_id'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Status ID',
    );
    $schema['appraisal']['fields']['manager_id'] = array(
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'Manager ID',
    );
    $schema['appraisal']['fields']['self_appraisal_due'] = array(
        'type' => 'varchar',
        'length' => 10,
        'mysql_type' => 'DATE',
        'not null' => TRUE,
        'description' => 'Self appraisal due date',
    );
    $schema['appraisal']['fields']['manager_appraisal_due'] = array(
        'type' => 'varchar',
        'length' => 10,
        'mysql_type' => 'DATE',
        'not null' => TRUE,
        'description' => 'Manager appraisal due date',
    );
    $schema['appraisal']['fields']['grade_due'] = array(
        'type' => 'varchar',
        'length' => 10,
        'mysql_type' => 'DATE',
        'not null' => TRUE,
        'description' => 'Grade due date',
    );
    $schema['appraisal']['fields']['grade'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Grade',
    );

    // hrvacancy view:
    $schema['hrvacancy']['description'] = 'Views data representation of HRVacancy';
    $schema['hrvacancy']['fields']['id'] = array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => 'Vacancy ID',
    );
    $schema['hrvacancy']['fields']['start_date'] = array(
        'type' => 'varchar',
        'length' => 10,
        'mysql_type' => 'DATE',
        'not null' => FALSE,
        'description' => 'Vacancy start date',
    );
    $schema['hrvacancy']['fields']['end_date'] = array(
        'type' => 'varchar',
        'length' => 10,
        'mysql_type' => 'DATE',
        'not null' => FALSE,
        'description' => 'Vacancy end date',
    );
    $schema['hrvacancy']['fields']['status_id'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Vacancy status ID',
    );
    $schema['hrvacancy']['fields']['description'] = array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Vacancy description',
    );
    $schema['hrvacancy']['fields']['position'] = array(
        'type' => 'varchar',
        'length' => 127,
        'not null' => TRUE,
        'description' => 'Vacancy position',
    );
    $schema['hrvacancy']['fields']['salary'] = array(
        'type' => 'varchar',
        'length' => 127,
        'not null' => TRUE,
        'description' => 'Vacancy salary',
    );
    $schema['hrvacancy']['fields']['location'] = array(
        'type' => 'varchar',
        'length' => 254,
        'not null' => TRUE,
        'description' => 'Vacancy location',
    );

    // tasks view:
    $schema['tasks']['description'] = 'Views data representation of CiviHR Tasks';
    $schema['tasks']['fields']['id'] = array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => 'Task ID',
    );
    $schema['tasks']['fields']['activity_type_id'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Activity type ID',
    );
    $schema['tasks']['fields']['case_id'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Case ID',
    );
    $schema['tasks']['fields']['subject'] = array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'Task subject',
    );
    $schema['tasks']['fields']['activity_date_time'] = array(
        'type' => 'varchar',
        'length' => 10,
        'mysql_type' => 'DATE',
        'not null' => TRUE,
        'description' => 'Task start date',
    );
    $schema['tasks']['fields']['details'] = array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Task details',
    );
    $schema['tasks']['fields']['status_id'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Task status ID',
    );
    $schema['tasks']['fields']['is_deleted'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Is Task deleted?',
    );
    $schema['tasks']['fields']['source_contact_id'] = array(
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'Source Contact ID',
    );
    $schema['tasks']['fields']['source_contact_name'] = array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'Source Contact name',
    );
    $schema['tasks']['fields']['target_contact_id'] = array(
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'Target Contact ID',
    );
    $schema['tasks']['fields']['target_contact_name'] = array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'Target Contact name',
    );
    $schema['tasks']['fields']['assignee_contact_id'] = array(
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'Assignee Contact ID',
    );
    $schema['tasks']['fields']['assignee_contact_name'] = array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'Assignee Contact name',
    );

    // documents view:
    $schema['documents']['description'] = 'Views data representation of CiviHR Documents';
    $schema['documents']['fields']['id'] = array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => 'Document ID',
    );
    $schema['documents']['fields']['activity_type_id'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Activity type ID',
    );
    $schema['documents']['fields']['case_id'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Case ID',
    );
    $schema['documents']['fields']['subject'] = array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'Document subject',
    );
    $schema['documents']['fields']['activity_date_time'] = array(
        'type' => 'varchar',
        'length' => 10,
        'mysql_type' => 'DATE',
        'not null' => TRUE,
        'description' => 'Document start date',
    );
    $schema['documents']['fields']['expire_date'] = array(
        'type' => 'varchar',
        'length' => 10,
        'mysql_type' => 'DATE',
        'not null' => TRUE,
        'description' => 'Document end date',
    );
    $schema['documents']['fields']['details'] = array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Document details',
    );
    $schema['documents']['fields']['file_count'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Document file count',
    );
    $schema['documents']['fields']['status_id'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Document status ID',
    );
    $schema['documents']['fields']['is_deleted'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Is Document deleted?',
    );
    $schema['documents']['fields']['source_contact_id'] = array(
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'Source Contact ID',
    );
    $schema['documents']['fields']['source_contact_name'] = array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'Source Contact name',
    );
    $schema['documents']['fields']['target_contact_id'] = array(
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'Target Contact ID',
    );
    $schema['documents']['fields']['target_contact_name'] = array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'Target Contact name',
    );
    $schema['documents']['fields']['assignee_contact_id'] = array(
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'Assignee Contact ID',
    );
    $schema['documents']['fields']['assignee_contact_name'] = array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'Assignee Contact name',
    );
}

/**
 * Implements hook_entity_info().
 */
function civihr_employee_portal_entity_info() {
    $info = array();

    $info['civihr_absences'] = array(
        'label' => t('Absence entity'),
        'plural label' => t('Absences entity'),
        'description' => t('Absences entity definition.'),
        'entity class' => 'Entity',
        'controller class' => 'EntityAPIController',
        'views controller class' => 'EntityDefaultViewsController',
        'base table' => 'absence_list',
        'fieldable' => TRUE,
        'entity keys' => array(
            'id' => 'id',
            'label' => 'Entity Activity ID'
        ),
        'bundles' => array(),
        // Use the default label() and uri() functions
        'label callback' => 'entity_class_label',
        'uri callback' => 'entity_class_uri',
        // Entity API needs to know about your module for the views integration to work
        'module' => 'civihr_employee_portal',

    );

    $info['civihr_absence_approvals'] = array(
        'label' => t('Absence approval entity'),
        'plural label' => t('Absence approvals entity'),
        'description' => t('Absence approval entity for managers.'),
        'entity class' => 'Entity',
        'controller class' => 'EntityAPIController',
        'views controller class' => 'EntityDefaultViewsController',
        'base table' => 'absence_approval_list',
        'fieldable' => TRUE,
        'entity keys' => array(
            'id' => 'id',
            'label' => 'Entity Activity ID'
        ),
        'bundles' => array(),
        // Use the default label() and uri() functions
        'label callback' => 'entity_class_label',
        'uri callback' => 'entity_class_uri',
        // Entity API needs to know about your module for the views integration to work
        'module' => 'civihr_employee_portal',

    );

    $info['civihr_absence_activity'] = array(
        'label' => t('Absence Activity entity'),
        'plural label' => t('Absence Activity entity'),
        'description' => t('Absence Activity.'),
        'entity class' => 'Entity',
        'controller class' => 'EntityAPIController',
        'views controller class' => 'EntityDefaultViewsController',
        'base table' => 'absence_activity',
        'fieldable' => TRUE,
        'entity keys' => array(
            'id' => 'absence_activity_id',
            'label' => 'Activity ID'
        ),
        'bundles' => array(),
        // Use the default label() and uri() functions
        'label callback' => 'entity_class_label',
        'uri callback' => 'entity_class_uri',
        // Entity API needs to know about your module for the views integration to work
        'module' => 'civihr_employee_portal',
    );

    $info['civihr_length_of_service'] = array(
        'label' => t('Length of service entity'),
        'plural label' => t('Length of service entity'),
        'description' => t('Length of service.'),
        'entity class' => 'Entity',
        'controller class' => 'EntityAPIController',
        'views controller class' => 'EntityDefaultViewsController',
        'base table' => 'civicrm_value_length_of_service_11',
        'fieldable' => TRUE,
        'entity keys' => array(
            'id' => 'entity_id',
            'label' => 'Employee ID'
        ),
        'bundles' => array(),
        // Use the default label() and uri() functions
        'label callback' => 'entity_class_label',
        'uri callback' => 'entity_class_uri',
        // Entity API needs to know about your module for the views integration to work
        'module' => 'civihr_employee_portal',
    );

    // appraisal entity:
    $info['civihr_appraisal'] = array(
        'label' => t('Appraisal entity'),
        'plural label' => t('Appraisal entity'),
        'description' => t('Appraisal entity definition.'),
        'entity class' => 'Entity',
        'controller class' => 'EntityAPIController',
        'views controller class' => 'EntityDefaultViewsController',
        'base table' => 'appraisal',
        'fieldable' => TRUE,
        'entity keys' => array(
            'id' => 'id',
            'label' => 'Entity Appraisal ID'
        ),
        'bundles' => array(),
        // Use the default label() and uri() functions
        'label callback' => 'entity_class_label',
        'uri callback' => 'entity_class_uri',
        // Entity API needs to know about your module for the views integration to work
        'module' => 'civihr_employee_portal',
    );

    // hrvacancy entity:
    $info['civihr_hrvacancy'] = array(
        'label' => t('HRVacancy entity'),
        'plural label' => t('HRVacancy entity'),
        'description' => t('HRVacancy'),
        'entity class' => 'Entity',
        'controller class' => 'EntityAPIController',
        'views controller class' => 'EntityDefaultViewsController',
        'base table' => 'hrvacancy',
        'fieldable' => TRUE,
        'entity keys' => array(
            'id' => 'id',
            'label' => 'Vacancy ID',
        ),
        'bundles' => array(),
        'label callback' => 'entity_class_label',
        'uri callback' => 'entity_class_uri',
        'module' => 'civihr_employee_portal',
    );

    // task entity:
    $info['civihr_task'] = array(
        'label' => t('Task entity'),
        'plural label' => t('Task entity'),
        'description' => t('Task'),
        'entity class' => 'Entity',
        'controller class' => 'EntityAPIController',
        'views controller class' => 'EntityDefaultViewsController',
        'base table' => 'tasks',
        'fieldable' => TRUE,
        'entity keys' => array(
            'id' => 'id',
            'label' => 'Task ID',
        ),
        'bundles' => array(),
        'label callback' => 'entity_class_label',
        'uri callback' => 'entity_class_uri',
        'module' => 'civihr_employee_portal',
    );

    // document entity:
    $info['civihr_document'] = array(
        'label' => t('Document entity'),
        'plural label' => t('Document entity'),
        'description' => t('Document'),
        'entity class' => 'Entity',
        'controller class' => 'EntityAPIController',
        'views controller class' => 'EntityDefaultViewsController',
        'base table' => 'documents',
        'fieldable' => TRUE,
        'entity keys' => array(
            'id' => 'id',
            'label' => 'Document ID',
        ),
        'bundles' => array(),
        'label callback' => 'entity_class_label',
        'uri callback' => 'entity_class_uri',
        'module' => 'civihr_employee_portal',
    );

    return $info;
}

/**
 * Implements hook_views_api().
 */
function civihr_employee_portal_views_api() {
    return array(
        'api' => 3,
        'path' => drupal_get_path('module', 'civihr_employee_portal') . '/views',
        'template path' => drupal_get_path('module', 'civihr_employee_portal') . '/views/templates',
    );
}

/**
 * Implements hook_action_info().
 * Custom CSV export actions for CiviHR reports
 */
function civihr_employee_portal_action_info() {
    return array(
        'views_data_export_action_csv_export' => array(
            'type' => 'entity',
            'label' => t('Export to CSV'),
            'configurable' => FALSE,
            'aggregate' => TRUE,
            'behavior' => array('views_data_export_export_csv'),
        ),
    );
}

/**
 * CSV export action callback.
 */
function views_data_export_action_csv_export($entity, &$context) {

    watchdog('context new', print_r($context, TRUE));

    if (isset($context['view_info'])) {
        $view = views_get_view($context['view_info']['name']);
        $display_id = FALSE;

        foreach ($view->display as $display) {
            if ($display->display_plugin == 'views_data_export') {
                $display_id = $display->id;
                break;
            }
        }

        if ($display_id) {
            $args = $context['view_info']['arguments'];

            // If a subset of the available entities was selected, provide the list
            // of selected IDs to the view as a contrived argument, which we'll
            // use later to alter the query.
            // Extra code for backward/forward compatibility.
            // @see https://www.drupal.org/node/2488146.
            if (isset($context['view_info']['total_rows'])) {
                $total_rows = $context['view_info']['total_rows'];
            }
            else {
                $countView = clone $view;
                $countView->execute($context['view_info']['display']);
                $total_rows = $countView->total_rows;
            }

            // Store the selected count
            $total_selected = count(array_keys($entity));

            $entity_ids = implode("+", array_keys($entity));

            watchdog('entity', print_r($entity_ids, TRUE));
            watchdog('total rows', print_r($total_rows, TRUE));

            // @ TODO if all rows selected don't pass this optional parameter as it will slow down everything
            //if (count($total_selected) < $total_rows) {

            // As third paremeter pass the optional entity IDs / otherwise everything should be exported
            $args[] = $entity_ids;
            //}

            watchdog('args final', print_r($args, TRUE));

            $view->execute_display($display_id, $args);
            // If the export is configured to run as a batch job, it will handle the
            // display of progress & result/download pages, deliver the generated
            // file, and never return here. Otherwise, executing the display here
            // won't cause the file to be delivered to the browser for download.
            // Dying here ensures that it does, but there must be a better way.
            die();
        }
        else {
            drupal_set_message(t("Can't export data, because the !view view does not have a !display display.", array('!view' => $view->name, '!display' => 'views_data_export')), 'error');
        }
    }
}

/**
 * Implements hook_theme_registry_alter().
 *
 * Replace default views template for views-exposed-form.tpl.php.
 */
function civihr_employee_portal_theme_registry_alter(&$theme_registry) {
    $module_path = drupal_get_path('module', 'civihr_employee_portal');
    $views_path = drupal_get_path('module', 'views');
    if ($theme_registry['views_exposed_form']['path'] == $views_path . '/theme') {
        $theme_registry['views_exposed_form']['path'] = $module_path . '/templates';
    }
    $theme_registry['views_view_table']['path'] = $module_path . '/templates';
}

/**
 * Custom Staff Directory dashboard block form.
 */
function civihr_employee_portal_directory_block_form($form, &$form_state) {

    $form['display_name'] = array(
        '#type' => 'textfield',
        '#title' => t('Name'),
        '#attributes' => array('placeholder' => t('Enter name')),
        '#prefix' => '<div class="row"><div class="col-md-12">',
        '#suffix' => '</div>'
    );

    $form['job_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Job title'),
        '#attributes' => array('placeholder' => t('Job title')),
        '#prefix' => '<div class="col-md-6">',
        '#suffix' => '</div>'
    );

    $form['phone'] = array(
        '#type' => 'textfield',
        '#title' => t('Phone'),
        '#attributes' => array('placeholder' => t('Phone')),
        '#prefix' => '<div class="col-md-6">',
        '#suffix' => '</div>'
    );

    $form['email_value'] = array(
        '#type' => 'textfield',
        '#title' => t('Email'),
        '#attributes' => array('placeholder' => t('Email')),
        '#prefix' => '<div class="col-md-12">',
        '#suffix' => '</div></div>'
    );

    $form['submit'] = array(
        '#attributes' => array('class' => array('chr_action')),
        '#type' => 'submit',
        '#value' => t('Go!'),
        '#prefix' => '<div class="chr_panel__footer"><div class="chr_actions-wrapper">',
        '#suffix' => '</div></div>'
    );

    // Add the validation function
    $form['#validate'][] = 'civihr_employee_portal_directory_block_form_validate';

    // Add the submit function
    $form['#submit'][] = 'civihr_employee_portal_directory_block_form_submit';

    return $form;
}

/**
 * Custom Staff Directory dashboard block form validate function.
 */
function civihr_employee_portal_directory_block_form_validate($form, &$form_state) {

    // No name selected, throw an error
    if ($form_state['values']['display_name'] == '') {
        form_set_error('display_name', 'Name cannot be blank!');
    }
}

/**
 * Custom Staff Directory dashboard block form submit function.
 */
function civihr_employee_portal_directory_block_form_submit($form, &$form_state) {

    // Redirect to the staff directory views list page passing parameters to filter the viewß
    drupal_goto('staff-directory', array('query'=>
    array(
        'display_name' => $form_state['values']['display_name'],
        'title' => $form_state['values']['job_title'],
        'phone' => $form_state['values']['phone'],
        'email' => $form_state['values']['email_value'],

    )));
}

/**
 * Implement hook_node_view().
 *
 * @param object $node
 * @param string $view_mode
 * @param string $langcode
 */
function civihr_employee_portal_node_view($node, $view_mode, $langcode) {
    // Set up default State/Province values for Emergency Contact webform.
    if ($node->nid === variable_get('emergency_contact_webform_nid')) {
        $fieldset = _get_emergency_contact_fieldset_list();
        for ($contact = 1; $contact < 3; $contact++) {
            $country_id = null;
            if (isset($node->content['webform']['#form']['submitted'][$fieldset[$contact]]['civicrm_1_contact_' . $contact . '_cg99999_custom_100008']['#default_value'])) {
                $country_id = $node->content['webform']['#form']['submitted'][$fieldset[$contact]]['civicrm_1_contact_' . $contact . '_cg99999_custom_100008']['#default_value'];
            }
            $state_province_options = _get_state_province_list_by_country_id($country_id);
            $node->content['webform']['#form']['submitted'][$fieldset[$contact]]['civicrm_1_contact_' . $contact . '_cg99999_custom_100009']['#options'] = $state_province_options;
        }
    }
}

// Note: Under "Redirection location" NO redirect option should be select to get the confirmation message with ajax.
// We can use this trick to make it generic for all webforms those have No redirect settings enabled under "Redirection location" setting.
function civihr_employee_portal_form_alter(&$form, &$form_state, $form_id) {

    if ($form_id == 'webform_client_form_' . variable_get('my_details_webform_nid') ||
        $form_id == 'webform_client_form_' . variable_get('emergency_contact_webform_nid')) {
        $form['#attributes']['class'][] = 'civihr_form civihr_form--reset form-horizontal';
    }

    // Form become outdated fix
    if ($form_id == 'views_exposed_form') {
        // https://www.drupal.org/node/2557327
        unset($form['#token']);
    }

    // Alter HR documents node creation page
    if ($form_id == 'hr_documents_node_form') {
        // Make the fields hidden -> https://compucorp.atlassian.net/browse/PCHR-358
        $form['field_download']['#attributes'] = array('style' => 'display:none');
    }

    // Alter system settings form and add CiviHR specific settings
    if ($form_id == 'system_site_information_settings') {

        $form['civihr_settings'] = array(
            '#type' => 'fieldset',
            '#title' => t('CiviHR settings')
        );

        $form['civihr_settings']['my_details_webform_nid'] = array(
            '#type' => 'textfield',
            '#title' => t('Node ID for the My details Webform page'),
            '#default_value' => variable_get('my_details_webform_nid', '')
        );

        $form['civihr_settings']['emergency_contact_webform_nid'] = array(
            '#type' => 'textfield',
            '#title' => t('Node ID for the Emergency Contact Webform page'),
            '#default_value' => variable_get('emergency_contact_webform_nid', '')
        );

        $form['civihr_settings']['relationship_name_to_use'] = array(
            '#type' => 'textfield',
            '#title' => t('Relationship Name to use for Leave Approval'),
            '#description' => t('eg. "has Leave Approved by"'),
            '#default_value' => variable_get('relationship_name_to_use', 'has Leave Approved by')
        );

        $form['civihr_settings']['default_date_period_id'] = array(
            '#type' => 'textfield',
            '#title' => t('Default Date period ID'),
            '#description' => t('Default Date period ID from CiviCRM'),
            '#default_value' => variable_get('default_date_period_id', '1')
        );
    }

    if ($form_id == 'user_login_block') {
        array_unshift($form['#submit'], 'civihr_employee_portal_user_login_submit');

        $form['#validate'] = array('civihr_employee_portal_user_login_validate');
        $form['name']['#required'] = false;
        $form['pass']['#required'] = false;

        $form['forgot-password'] = array(
            '#type' => 'textfield',
            '#title' => t('Email'),
            '#title_display' => 'invisible',
            '#attributes' => array('placeholder' => t('Email')),
        );
    }

    // Do ajax submit generic for all the webform those have no redirect option enabled.
    if(isset($form['#node']) && isset($form['#node']->webform) && $form['#node']->webform['redirect_url'] == "<none>") {
        $matches = array();

        // Check whether the form id have nid at the end like _nid
        preg_match('/[\d]+$/', $form_id, $matches);
        $nid_match = !empty($matches[0]) ? $matches[0] : null;

        if(strpos($form_id, 'webform_client_form_') !== false && !empty($nid_match)) {

            $form['actions']['submit'] = array(
                '#type' => 'submit',
                '#ajax' => array(
                    'callback' => 'webform_client_form_ajax_callback',
                    'wrapper' => str_replace('_','-',$form['#form_id']),
                    'effect' => 'fade',
                ),
                '#value' => t('Submit'),
            );
        }
    }

    // Set up Emergency Contact webform ajax fields and callbacks.
    if (!empty($form['#node']) && $form['#node']->nid === variable_get('emergency_contact_webform_nid')) {
        $fieldset = _get_emergency_contact_fieldset_list();
        for ($contact = 1; $contact < 3; $contact++) {
            $form['submitted'][$fieldset[$contact]]['civicrm_1_contact_' . $contact . '_cg99999_custom_100008']['#ajax'] = array(
                'event' => 'change',
                'wrapper' => 'emergency-contact' . $contact . '-state-province',
                'callback' => 'civihr_employee_portal_state_province_contact' . $contact . '_callback',
                'method' => 'replace',
            );
            $form['submitted'][$fieldset[$contact]]['civicrm_1_contact_' . $contact . '_cg99999_custom_100009']['#prefix'] = '<div id="emergency-contact' . $contact . '-state-province">';
            $form['submitted'][$fieldset[$contact]]['civicrm_1_contact_' . $contact . '_cg99999_custom_100009']['#suffix'] = '</div>';
        }
    }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function civihr_employee_portal_form_user_profile_form_alter(&$form, &$form_state, $form_id) {

  // Adding Yoti Login fieldset with button.
  if (module_exists('yoti')) {

    // Fetching block id from block description.
    $query = db_select('block_custom', 'b')
              ->fields('b', array('bid'))
              ->condition('b.info', 'User Profile Yoti Login');
    $block_id = $query->execute()->fetchField();

    if ($block_id) {
      $form['login_with_yoti'] = array(
        '#type' => 'fieldset',
        '#title' => t('Login with Yoti'),
        '#weight' => 10,
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );
      $yoti_block_view = module_invoke('block', 'block_view', $block_id);
      $form['login_with_yoti']['login_with_yoti_button'] = array(
        '#type' => 'item',
        '#markup' => render($yoti_block_view['content']),
      );
    }
  }

  $form['#submit'][] = 'civihr_employee_portal_form_user_profile_form_submit';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function civihr_employee_portal_form_user_profile_form_submit(&$form, &$form_state) {
  global $user;
  $shouldDoOnboarding = _civihr_employee_portal_should_do_onboarding($user);
  $onboardingPath = '/onboarding-form';
  $original = CRM_Utils_Array::value('redirect', $form_state);
  $form_state['redirect'] = $shouldDoOnboarding ? $onboardingPath : $original;
}

/**
 * Get a recalculated State/Province form field for Emergency Contact 1.
 *
 * @param array $form
 * @param array $form_state
 * @return array
 */
function civihr_employee_portal_state_province_contact1_callback($form, $form_state) {
    return _get_emergency_contact_state_province_webform_field($form, 1);
}

/**
 * Get a recalculated State/Province form field for Emergency Contact 2.
 *
 * @param array $form
 * @param array $form_state
 * @return array
 */
function civihr_employee_portal_state_province_contact2_callback($form, $form_state) {
    return _get_emergency_contact_state_province_webform_field($form, 2);
}

/**
 * Get a form select field for given emergency contact containing
 * State/Province list of selected Country.
 *
 * @param array $form
 * @param int $emergency_contact
 * @return array
 */
function _get_emergency_contact_state_province_webform_field($form, $emergency_contact) {
    $fieldset = _get_emergency_contact_fieldset_list();
    $country_id = $form['submitted'][$fieldset[$emergency_contact]]['civicrm_1_contact_' . $emergency_contact . '_cg99999_custom_100008']['#value'];
    $form['submitted'][$fieldset[$emergency_contact]]['civicrm_1_contact_' . $emergency_contact . '_cg99999_custom_100009']['#options'] = _get_state_province_list_by_country_id($country_id);

    $bootstrap_form = civihr_default_theme_form_apply_bootstrap($form['submitted']);
    return $bootstrap_form[$fieldset[$emergency_contact]]['civicrm_1_contact_' . $emergency_contact . '_cg99999_custom_100009'];
}

/**
 * Return an array containing fieldset list of Emergency Contact webform.
 *
 * @return array
 */
function _get_emergency_contact_fieldset_list() {
    return array(
        1 => 'civicrm_1_contact_1_fieldset_fieldset',
        2 => 'secondary_emergency_contact',
    );
}

/**
 * Get an assotiative array containing IDs of State/Province as keys
 * and labels of State/Province as values.
 *
 * @param int $country_id
 * @return array
 */
function _get_state_province_list_by_country_id($country_id) {
    if (!$country_id) {
        return array();
    }
    civicrm_initialize();
    $civi_settings = parse_url(CIVICRM_DSN);
    $civi_db_name = trim($civi_settings['path'], '/');
    $state_province_list = array();
    $result = db_select($civi_db_name . '.civicrm_state_province', 'sp')
        ->fields('sp', array('id', 'name'))
        ->condition('country_id', $country_id, '=')
        ->execute();
    while ($row = $result->fetchAssoc()) {
        $state_province_list[$row['id']] = $row['name'];
    }
    return $state_province_list;
}

function civihr_employee_portal_preprocess_user_login(&$vars) {

    ctools_include('ajax');
    ctools_include('modal');

    ctools_add_js('modal');
    ctools_add_js('ajax-responder');

    if (!empty($vars['form']['#block'])) {
        $vars['form']['#block']->subject = null;
    }
    $vars['form']['name']['#attributes']['placeholder'] = 'Username or email';
    $vars['form']['name']['#required'] = false;
    $vars['form']['pass']['#attributes']['placeholder'] = 'Password';
    $vars['form']['pass']['#required'] = false;
    $vars['form']['actions']['forgot_password'] = array(
        '#markup' => l('Forgot password?', '/user/password',  array(
            'attributes' =>
                array(
                    'class' => 'btn btn-link pull-left',
                    'id' => 'link-forgot-password',
                    'title' => 'Request new password via e-mail.'
                )
        ))
    );

    $vars['classes_array'] = array();
    $vars['content_attributes_array'] = array();
    $vars['title_attributes_array'] = array();
    $vars['content_attributes_array'] = array();
    $vars['attributes_array'] = array();
}

function civihr_employee_portal_user_login_validate(&$form, &$form_state) {

    if ($form_state['values']['forgot-password']) {
        $form_state['values']['name'] = $form_state['values']['forgot-password'];
        require_once('modules/user/user.pages.inc');
        user_pass_validate($form, $form_state);

        $errors = form_get_errors();
        if (isset($errors['name'])) {
            form_clear_error();
            form_set_error('forgot-password', $errors['name']);
        }
        return true;
    }

    $requiredValidate = true;
    if (!$form_state['values']['name']) {
        form_set_error('name', t('Username or email field is required.'));
        $requiredValidate = false;
    }
    if (!$form_state['values']['pass']) {
        form_set_error('pass', t('Password field is required.'));
        $requiredValidate = false;
    }
    if (!$requiredValidate) {
        return;
    }

    user_login_name_validate($form, $form_state);
    user_login_authenticate_validate($form, $form_state);
    user_login_final_validate($form, $form_state);

    $nameError = form_get_error($form['name']);
    if ($nameError) {
      $nameError = str_replace('username', 'username, email', $nameError);
      form_clear_error();
      form_set_error('name', $nameError);
      drupal_get_messages('error'); // clear existing
      drupal_set_message($nameError, 'error');
    }
}

function civihr_employee_portal_user_login_submit(&$form, &$form_state) {
  $destination = !empty($_REQUEST['destination']) ? rawurldecode($_REQUEST['destination']) : '';

  if ($form_state['input']['forgot-password']) {
    user_pass_submit($form, $form_state);
    _drupal_session_write('custom_login_success_message', t('Details sent!'));
    drupal_goto($destination);
    return true;
  }
}

/**
 * Implements hook_user_login().
 */
function civihr_employee_portal_user_login(&$edit, $account) {

  if (!isset($_POST['form_id']) || $_POST['form_id'] != 'user_pass_reset') {
    $sspEntryPath = 'dashboard';
    $civicrmEntryPath = 'civicrm/tasksassignments/dashboard#/tasks';
    $onboardingFormPath = 'onboarding-form';

    if (current_path() == drupal_get_destination()['destination']) {
      $_GET['destination'] = user_access('access CiviCRM') ? $civicrmEntryPath : $sspEntryPath;
    }

    if (_civihr_employee_portal_should_do_onboarding($account)) {
       $_GET['destination'] = $onboardingFormPath;
    }
  }
}

/**
 * @param \stdClass $account
 *
 * @return bool
 */
function _civihr_employee_portal_should_do_onboarding($account) {
  $welcomeFormName = 'Welcome to CiviHR';
  $nodes = node_load_multiple(NULL, ["title" => 'Welcome to CiviHR']);
  $node = current($nodes);
  $canViewOnboardingForm = node_access('view', $node, $account);
  $submissions = WebformHelper::getUserSubmissionsByName($account, $welcomeFormName);

  return $canViewOnboardingForm && empty($submissions);
}

/**
 * Implements hook_webform_submission_insert().
 *
 * @param \stdClass $node
 * @param array $submission
 */
function civihr_employee_portal_webform_submission_insert($node, $submission) {
  $nodeTitle = property_exists($node, 'title') ? $node->title : NULL;
  $onboardingTitle = 'Welcome to CiviHR';
  $isOnboardingForm = $nodeTitle === $onboardingTitle;

  if ($isOnboardingForm) {
    $form = new OnboardingWebForm();
    $form->onSubmit($node, $submission);
  }
}

function webform_client_form_ajax_callback($form, &$form_state) {

    if (form_get_errors()) {
        return $form;
    }
    else {

        ctools_include('ajax');
        ctools_include('modal');
        ctools_add_js('ajax-responder');

        // Get the contact ID and create the cache identifier value
        $contact_value = 'civihr_contact_data_' . $_SESSION['CiviCRM']['userID'];

        $commands = array();

        $commands[] = ctools_modal_command_dismiss();
        $commands[] = ctools_ajax_command_redirect('dashboard');
        $commands[] = ajax_command_remove('#messages');
        $commands[] = ajax_command_after('#breadcrumb', '<div id="messages">' . theme('status_messages') . '</div>');

        // Try to remove the cached data for this contact as the values were updated
        cache_clear_all($contact_value, 'cache');

        print ajax_render($commands);

        exit;

    }

}

/**
 * Implement custom my details page, which loads the my details block, to edit the employee data
 */
function civihr_employee_portal_my_details() {

    ctools_include('modal');
    ctools_modal_add_js();

    // This will render the same block as on the dashboard page
    $block = module_invoke('civihr_employee_portal', 'block_view', 'my_details');

    return render($block['content']);
}

/**
 * CiviHR Report - Landing page
 */
function civihr_employee_portal_hrreport_landing_page() {
    $jsOptions = array('type' => 'file', 'scope' => 'footer');

    if (CRM_Core_DAO::getFieldValue('CRM_Core_DAO_Extension', 'org.civicrm.reqangular', 'is_active', 'full_name')) {
      drupal_add_js(CRM_Core_Resources::singleton()->getUrl('org.civicrm.reqangular') . "dist/reqangular.min.js", $jsOptions);
    }

    // Base reports.js script
    drupal_add_js(drupal_get_path('module', 'civihr_employee_portal') . '/js/reports.js', $jsOptions);

    //$menu = civihr_employee_portal_get_drupal_menu_items('main-menu', 'reports');
    $menu = civihr_employee_portal_get_drupal_menu_items('hr-reports');
    return theme('civihr_employee_portal_civihr_report_landing_page',
        array(
            'title' => t('Reports'),
            'menu' => $menu,
        )
    );
}

/**
 * CiviHR Report - Settings - Age group page
 */
function civihr_employee_portal_hrreport_settings_age_group() {
    $canEdit = user_access('manage hrreports settings');
    $canDelete = user_access('manage hrreports settings');

    ctools_include('modal');
    ctools_modal_add_js();

    return theme('civihr_employee_portal_civihr_report_settings_age_group',
        array(
            'header' => array('Age from', 'Age to', 'Label'),
            'rows' => _get_reports_settings_age_group(),
            'canEdit' => $canEdit,
            'canDelete' => $canDelete,
        )
    );
}

/**
 * Return an array containing Age Group settings rows.
 *
 * @return array
 */
function _get_reports_settings_age_group() {
    $data = array();
    $query = db_select('reports_settings_age_group', 't');
    $result = $query->fields('t', array('id', 'age_from', 'age_to', 'label'))->execute();
    foreach ($result as $row) {
        $data[] = array(
            'id' => $row->id,
            'age_from' => $row->age_from,
            'age_to' => $row->age_to,
            'label' => $row->label,
        );
    }
    return $data;
}

/**
 * Return Age Group label for given age.
 *
 * @param int $age
 * @return string
 */
function get_contact_age_group_label_by_age($age) {
    $label = '';
    $query = "SELECT label FROM reports_settings_age_group
            WHERE (age_from <= :age AND age_to >= :age)
            OR (age_from <= :age AND age_to = 0)
            OR (age_from = 0 and age_to >= NULL)
            LIMIT 1";
    $params = array(':age' => $age);
    $result = db_query($query, $params);
    if ($result) {
        $label = $result->fetchField();
    }
    return $label;
}

/**
* Ajax menu callback.
*/
function civihr_employee_portal_hrreport_settings_age_group_create($ajax, $id = null) {
    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');
        $title = t('Create new Age Group');
        if ($id) {
            $title = t('Edit Age Group');
        }
        $form_state = array(
            'ajax' => TRUE,
            'is_ajax_update' => TRUE,
            'title' => $title,
            'id' => $id,
        );
        // Since this will run again on form rebuild while still in the modal, prevent
        // form IDs from being incremented.
        // @todo https://drupal.org/node/1305882
        if (!empty($_POST['ajax_html_ids'])) {
            unset($_POST['ajax_html_ids']);
        }
        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('civihr_employee_portal_hrreport_settings_age_group_form', $form_state);
        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['executed'])) {
            // Add the responder javascript, required by ctools
            ctools_add_js('ajax-responder');
            $output[] = ajax_command_replace('.messages', 'all good');
            $output[] = ctools_modal_command_dismiss();
            $output[] = ctools_ajax_command_redirect('reports/settings/age_group');

        }
        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();

    }
    else {
        return drupal_get_form('civihr_employee_portal_hrreport_settings_age_group_form');
    }
}

/**
 * Reports settings - Age Group form.
 */
function civihr_employee_portal_hrreport_settings_age_group_form($form, &$form_state) {
    global $user;
    $row = array(
        'id' => null,
        'age_from' => '',
        'age_to' => '',
        'label' => '',
    );
    $canEdit = user_access('manage hrreports settings');
    $id = $form_state['id'];
    // If $id is defined, load the setting row from db table.
    if ($id) {
        $query = db_select('reports_settings_age_group', 't');
        $result = $query
            ->fields('t')
            ->condition('id', $id)
            ->execute()
            ->fetchObject();
        if ($result) {
            $row = array(
                'id' => $id,
                'age_from' => $result->age_from,
                'age_to' => $result->age_to,
                'label' => $result->label,
            );
        }
    }

    // Create form elements
    $form['#attributes']['class'][] = 'form-horizontal civihr_form';
    $form['id'] = array(
        '#type' => 'hidden',
        '#value' => $id,
    );
    $form['age_from'] = array(
        '#type' => 'textfield',
        '#title' => t('Age From'),
        '#default_value' => $row['age_from'],
        '#label_class' => 'col-sm-3 control-label',
        '#field_prefix' => '<div class="col-sm-9">',
        '#field_suffix' => '</div>',
    );
    $form['age_to'] = array(
        '#type' => 'textfield',
        '#title' => t('Age To'),
        '#default_value' => $row['age_to'],
        '#label_class' => 'col-sm-3 control-label',
        '#field_prefix' => '<div class="col-sm-9">',
        '#field_suffix' => '</div>',
    );
    $form['label'] = array(
        '#type' => 'textfield',
        '#title' => t('Label'),
        '#default_value' => $row['label'],
        '#label_class' => 'col-sm-3 control-label',
        '#field_prefix' => '<div class="col-sm-9">',
        '#field_suffix' => '</div>',
    );
    if ($canEdit) {
        $form['save'] = array(
            '#type' => 'submit',
            '#value' => t('Save'),
            '#attributes' => array('class' => array('chr_action')),
            '#prefix' => '<div class="modal-civihr-custom__footer"><div class="chr_actions-wrapper">',
            '#suffix'=> '</div></div>'
        );
    }
    // Add the validation function
    $form['#validate'][] = 'civihr_employee_portal_hrreport_settings_age_group_form_validate';
    // Add the submit function
    $form['#submit'][] = 'civihr_employee_portal_hrreport_settings_age_group_form_submit';

    return $form;
}

function civihr_employee_portal_hrreport_settings_age_group_form_validate($form, &$form_state) {
}

function civihr_employee_portal_hrreport_settings_age_group_form_submit($form, &$form_state) {
    global $user;
    $canEdit = user_access('manage hrreports settings');

    $id = !empty($form_state['values']['id']) ? (int)$form_state['values']['id'] : null;
    if ($canEdit) {
        $result = null;
        if ($id) {
            $result = db_update('reports_settings_age_group')
                ->fields(array(
                    'age_from' => (int)$form_state['values']['age_from'],
                    'age_to' => (int)$form_state['values']['age_to'],
                    'label' => $form_state['values']['label'],
                ))
                ->condition('id', $id)
                ->execute();
        } else {
            $result = db_insert('reports_settings_age_group')
                ->fields(array(
                    'age_from' => (int)$form_state['values']['age_from'],
                    'age_to' => (int)$form_state['values']['age_to'],
                    'label' => $form_state['values']['label'],
                ))
                ->execute();
        }
        if ($result) {
            if ($id) {
                drupal_set_message('Age Group has been updated.', 'success');
            } else {
                drupal_set_message('Age Group has been created.', 'success');
            }
        } else {
            drupal_set_message('An error occured when saving Age Group.', 'error');
        }
    } else {
        drupal_set_message('You do not have permissions to create or edit Reports settings.', 'error');
    }
}

/**
* Ajax menu callback.
*/
function civihr_employee_portal_hrreport_settings_age_group_delete($ajax, $id) {

    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');

        $title = t('Are you sure you want to delete this Age Group?');

        $form_state = array(
            'ajax' => TRUE,
            'is_ajax_update' => TRUE,
            'title' => $title,
            'id' => $id,
        );

        // Since this will run again on form rebuild while still in the modal, prevent
        // form IDs from being incremented.
        // @todo https://drupal.org/node/1305882
        if (!empty($_POST['ajax_html_ids'])) {
            unset($_POST['ajax_html_ids']);
        }

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('civihr_employee_portal_hrreport_settings_age_group_form_delete_confirm', $form_state);

        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['executed'])) {

            // Add the responder javascript, required by ctools
            ctools_add_js('ajax-responder');

            $output[] = ajax_command_replace('.messages', 'all good');
            $output[] = ctools_modal_command_dismiss();
            $output[] = ctools_ajax_command_redirect('reports/settings/age_group');

        }

        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();

    }

    else {
        return drupal_get_form('civihr_employee_portal_hrreport_settings_age_group_form_delete_confirm');
    }

}

function civihr_employee_portal_hrreport_settings_age_group_form_delete_confirm($form, &$form_state){

    $form['id'] = array(
        '#type' => 'hidden',
        '#value' =>  $form_state['id'],
        '#suffix' => "<script>CRM.$('#edit-cancel').bind('click', function() { Drupal.CTools.Modal.dismiss(); return false; });</script>",
    );

    $form['#submit'][] = 'civihr_employee_portal_hrreport_settings_age_group_form_delete_submit';

    return confirm_form($form,
        t('Are you sure you want to delete this Age Group?'),
        'dashboard',
        t('This action cannot be undone.'),
        t('Delete'),
        t('Cancel'));
}

function civihr_employee_portal_hrreport_settings_age_group_form_delete_submit($form, &$form_state) {
    $canDelete = user_access('manage hrreports settings');
    if ($canDelete) {
        $id = (int)$form_state['values']['id'];
        $result = db_delete('reports_settings_age_group')
            ->condition('id', $id)
            ->execute();
        if ($result) {
            drupal_set_message(t('Age Group has been deleted.'), 'success');
        } else {
            drupal_set_message(t('An error occured when trying to delete Age Group.'), 'error');
        }
    } else {
        drupal_set_message(t('You do not have permissions to delete Reports settings.'), 'error');
    }
}

/**
 * Add CSS and JavaScript files required for Report pages.
 */
function _civihr_employee_portal_add_report_scripts() {
    $jsOptions = array('type' => 'file', 'scope' => 'footer');

    // PivotTable JavaScript library
    drupal_add_css(drupal_get_path('module', 'civihr_employee_portal') . "/js/pivottable/pivot.css");
    drupal_add_css(drupal_get_path('module', 'civihr_employee_portal') . "/js/pivottable/c3.min.css");
    drupal_add_css(drupal_get_path('module', 'civihr_employee_portal') . "/js/perfect-scrollbar/perfect-scrollbar.min.css");
    drupal_add_js(drupal_get_path('module', 'civihr_employee_portal') . '/js/jquery-2.1.1.min.js', $jsOptions);
    drupal_add_js(drupal_get_path('module', 'civihr_employee_portal') . '/js/pivot.min.js', $jsOptions);
    drupal_add_js(drupal_get_path('module', 'civihr_employee_portal') . '/js/perfect-scrollbar/perfect-scrollbar.min.js', $jsOptions);
    drupal_add_js(drupal_get_path('module', 'civihr_employee_portal') . '/js/pivottable/c3.min.js', $jsOptions);
    drupal_add_js(drupal_get_path('module', 'civihr_employee_portal') . '/js/pivottable/d3.min.js', $jsOptions);
    drupal_add_js(drupal_get_path('module', 'civihr_employee_portal') . '/js/pivottable/c3_renderers.js', $jsOptions);
    drupal_add_js(drupal_get_path('module', 'civihr_employee_portal') . '/js/pivottable/export_renderers.js', $jsOptions);
    drupal_add_js(drupal_get_path('module', 'civihr_employee_portal') . '/js/pivottable-nreco/jquery-ui-1.9.2.custom.min.js', $jsOptions);
    drupal_add_js(drupal_get_path('module', 'civihr_employee_portal') . '/js/pivottable-nreco/nrecopivot.js', $jsOptions);
    drupal_add_js(drupal_get_path('module', 'civihr_employee_portal') . '/lib/moment/moment.min.js', $jsOptions);

    if (CRM_Core_DAO::getFieldValue('CRM_Core_DAO_Extension', 'org.civicrm.reqangular', 'is_active', 'full_name')) {
      drupal_add_js(CRM_Core_Resources::singleton()->getUrl('org.civicrm.reqangular') . "dist/reqangular.min.js", $jsOptions);
    }

    // Base reports.js script
    drupal_add_js(drupal_get_path('module', 'civihr_employee_portal') . '/js/reports.js', $jsOptions);
}

function civihr_employee_portal_hrreport_gettable($viewName) {
    $view = views_get_view('civihr_report_' . $viewName);
    if (empty($view)) {
        return null;
    }
    return views_embed_view('civihr_report_' . $viewName, 'civihr_report_table_' . $viewName);
}

function civihr_employee_portal_hrreport_printtable($viewName) {
    print civihr_employee_portal_hrreport_gettable($viewName);
}

/**
 * CiviHR Report - Custom Report page.
 *
 * @param string $reportName
 * @return array
 */
function civihr_employee_portal_hrreport_custom($reportName) {
  _rebuild_reports_views();

  $view = views_get_view('civihr_report_' . $reportName);
  if (!$view) {
    return drupal_not_found();
  }
  ctools_include('modal');
  ctools_modal_add_js();
  _civihr_employee_portal_add_report_scripts();
  $table = civihr_employee_portal_hrreport_gettable($reportName);
  $exportPaths = _civihr_employee_portal_get_view_csv_export_paths($view);
  $view->set_display('default');
  $view->init_handlers();
  $form_state = array(
    'view' => $view,
    'display' => $view->display_handler->display,
    'exposed_form_plugin' => $view->display_handler->get_plugin('exposed_form'),
    'method' => 'get',
    'rerender' => TRUE,
    'no_redirect' => TRUE,
  );
  $filters = drupal_build_form('views_exposed_form', $form_state);

  return theme('civihr_employee_portal_civihr_report_custom',
    array(
      'reportName' => $reportName,
      'configurationList' => civihr_employee_portal_get_report_configuration_list($reportName),
      'table' => $table,
      'tableUrl' => !empty($table) ? '/reports/' . $reportName . '/table' : null,
      'jsonUrl' => '/reports/' . $reportName . '/json',
      'exportUrl' => '/' . array_shift($exportPaths),
      'filters' => $filters,
    )
  );
}

/**
 * Render a JSON structure containing data for specified report name.
 *
 * @param string $reportName
 *
 * @return string
 */
function civihr_employee_portal_hrreport_get_json($reportName) {
  $params = drupal_get_query_parameters();
  $view = views_get_view('civihr_report_' . $reportName);
  $view->exposed_input = civihr_employee_portal_hrreport_get_exposed_filter_default_values($view, $params);
  $view->set_display('page');
  $view->execute();
  $view->style_plugin->options['using_views_api_mode'] = FALSE;
  return $view->render('page');
}

/**
 * Return an array with mapped default exposed filter values for given view
 * and parameters. Used to map date filter default values if they are not specified
 * in request.
 *
 * @param object $view
 * @param array $params
 *
 * @return array
 */
function civihr_employee_portal_hrreport_get_exposed_filter_default_values($view, array $params) {
  if (empty($view->display['default']->display_options['filters']['date_filter'])) {
    return $params;
  }

  $dateFilter = $view->display['default']->display_options['filters']['date_filter'];
  if (!empty($dateFilter['expose']['identifier'])) {
    $identifier = $dateFilter['expose']['identifier'];

    $params[$identifier]['min'] = civihr_employee_portal_get_date_filter_default_value($params, $dateFilter, 'default_date', $identifier, 'min');
    $params[$identifier]['max'] = civihr_employee_portal_get_date_filter_default_value($params, $dateFilter, 'default_to_date', $identifier, 'max');
  }

  return $params;
}

/**
 * Return a date filter default value from View filter settings
 * if it's not specified in the parameters.
 *
 * @param array $params
 * @param string $dateFilter
 * @param string $dateFilterKey
 * @param string $identifier
 * @param string $identifierKey
 *
 * @return string
 */
function civihr_employee_portal_get_date_filter_default_value(array $params, $dateFilter, $dateFilterKey, $identifier, $identifierKey) {
  if (empty($params[$identifier][$identifierKey])) {
    $defaultDate = !empty($dateFilter[$dateFilterKey]) ? $dateFilter[$dateFilterKey] : null;

    if ($defaultDate) {
      $date = new DateTime();
      $date->modify($defaultDate);
      $params[$identifier][$identifierKey] = $date->format('Y-m-d');
    }
  }

  return $params[$identifier][$identifierKey];
}

function civihr_employee_portal_hrreport_custom_printtable($reportName, $dateFilterValue = null) {
    return civihr_employee_portal_hrreport_printtable($reportName, $dateFilterValue);
}

/**
 * @param $form
 * @param $form_state
 * Implement form_views_exposed_form_alter()
 */
function civihr_employee_portal_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {

    // Show the open calendar button in the my leave block next to the date filters select list
    if (isset($form['#id']) && $form['#id'] == 'views-exposed-form-absence-list-page') {

        if (isset($_REQUEST['absence_start_date_period_filter'])) {
            $request_date = $_REQUEST['absence_start_date_period_filter'];
        }
        else {
            // Set default period
            $request_date = variable_get('default_date_period_id', '1');
        }

        $form['open_calendar'] = array(
            '#markup' => civihr_employee_portal_make_link(t('Open calendar'), 'calendar', null, 'chr_action--transparent chr_action--icon--responsive')
        );

        $form['leave_report'] = array(
            '#markup' => civihr_employee_portal_make_link(t('Print leave report'), 'leave_report', $request_date, 'chr_action--transparent  chr_action--icon--responsive hidden-xs')
        );

        // Replace the print leave report URL with the selected date period URL
        $form['absence_start_date_period_filter']['#ajax'] =
        array(
            'callback' => '_absence_start_date_period_change_submit',
            'wrapper' => 'report-replace-div',
            'method' => 'replace',
            'effect' => 'fade',
            'progress' => array('type' => 'none')
        );

        // Autosubmit the form on page load as views autosubmit doesn't pass values of contextual filters to inserted view in Global : View Area
        drupal_add_js(
            'jQuery(document).ready(function () { jQuery("#edit-submit-absence-list").click() });',
            array(
                'type' => 'inline',
                'scope' => 'footer',
                'group' => JS_THEME,
                'weight' => 5,
            )
        );
        // Autosubmit the form after date_period select change
        $form['absence_start_date_period_filter']['#attributes'] = array('onchange' => "jQuery('#edit-submit-absence-list').click()");
    }

    /**
     *  Staff Directory filters form, HR Documents filters form
     */
    $exposed_filters_forms = array('views-exposed-form-civihr-staff-directory-page', 'views-exposed-form-hr-documents-hr-resources');

    if (isset($form['#id']) && in_array($form['#id'], $exposed_filters_forms)) {
        $form['#attributes']['class'][] = 'row';

        $form['submit']['#attributes'] = array('class' => array('chr_action'));
        $form['submit']['#prefix'] = '<div class="col-sm-12"><div class="chr_panel__footer"><div class="chr_actions-wrapper">';
        $form['submit']['#suffix'] = '</div></div></div>';

        foreach ($form as $key => $value) {
            if (isset($form['#info']["filter-$key"])) {
                $form[$key]['#prefix'] = '<div class="col-sm-6">';
                $form[$key]['#suffix'] = '</div>';

                // Take the <label> value and use it as placeholder instead
                if ($value['#type'] == 'textfield') {
                    $form[$key]['#attributes'] = array('placeholder' => $form['#info']["filter-$key"]['label']);
                }

                $form['#info']["filter-$key"]['label'] = '';
            }
        }
    }

    if(strpos($form['#id'], 'views-exposed-form-civihr-report-') !== false) {
        foreach ($form as $key => $value) {
          if (isset($form[$key]['value'])) {
            $form[$key]['value'] = setInputDatepickerForm($form['#info']["filter-$key"]['label']);
          }

          if (isset($form[$key]['min'])) {
            $form[$key]['min'] = setInputDatepickerForm($form[$key]['min']['#title']);
          }

          if (isset($form[$key]['max'])) {
            $form[$key]['max'] = setInputDatepickerForm($form[$key]['max']['#title']);
          }
        }
    }

    $form['submit']['#value'] = 'Filter';
}

/**
 * Return an array containing a set of paths to any CSV export display of given View.
 *
 * @param object $view
 * @return array
 */
function _civihr_employee_portal_get_view_csv_export_paths($view) {
    $result = array();
    foreach ($view->display as $display) {
        if (!empty($display->display_options['style_plugin']) &&
            $display->display_options['style_plugin'] === 'views_data_export_csv' &&
            !empty($display->display_options['path'])) {
            $result[] = $display->display_options['path'];
        }
    }
    return $result;
}

/**
 * Set the necessary structure for the
 * datepicker filter markup.
 *
 * @param  string $title <Label title>
 * @return array
 */
function setInputDatepickerForm($title) {
  $idxKey = 'id_' . uniqid();

  return array(
      '#title' => $title,
      '#type' => 'textfield',
      '#size' => '10',
      '#description' => getCalendarButtonMarkup($idxKey),
      '#date_label_position' => 'within',
      '#attributes' => array(
          'ng-init' => "$idxKey = false; filters.dt$idxKey=filters.date",
          'placeholder' => '{{filters.placeholderFormat}}',
          'uib-datepicker-popup' => '{{filters.format}}',
          'close-text' => 'Close',
          'ng-model' => "filters.dt$idxKey",
          'is-open' => "filters.$idxKey",
          'ng-click' => "filters.$idxKey = !filters.$idxKey"
      ),
  );
}

/**
 * Return the calendar button HTML markup
 *
 * @param $idKey id generated on setInputDatepickerForm to set the ng-click
 */
function getCalendarButtonMarkup($idxKey) {
  return "
    <button type=\"button\" class=\"btn btn-default\" ng-click=\"filters.$idxKey = !filters.$idxKey\">
      <i class=\"fa fa-calendar\"></i>
    </button>";
}

function _absence_start_date_period_change_submit(&$form, &$form_state) {

    if (isset($_REQUEST['absence_start_date_period_filter'])) {
        $request_date = $_REQUEST['absence_start_date_period_filter'];
    }
    else {
        // Set default period
        $request_date = variable_get('default_date_period_id', '1');
    }

    $form['leave_report'] = array(
        '#markup' => civihr_employee_portal_make_link(t('Print leave report'), 'leave_report', $request_date),
        '#prefix' => '<div id="report-replace-div">',
        '#suffix' => '</div>',
    );

    return $form['leave_report'];

}

/**
 * Implement hook_preprocess_page
 * @param $vars
 */
function civihr_employee_portal_preprocess_page(&$vars) {
    global $user;
    global $base_url;

    $display_name = t('Anonymous');
    $edit_account_link = '';
    $logout_link = '';
    $user_guide_link = l('<i class="fa fa-book"></i>' . t('User guide'), 'http://civihr-documentation.readthedocs.io/en/latest/self-service-portal/login-screen/', array('html' => true, 'attributes' => array('target' => '_blank')));
    $image_url = $base_url . '/' . drupal_get_path('module', 'civihr_employee_portal') . '/images/profile-default.png';

    if (isset($_SESSION['CiviCRM']) && $user->uid) {
        $edit_account_link = l('<i class="fa fa-edit"></i>' . t('Edit Account'), 'user/' . $user->uid . '/edit', array('html' => true));
        $logout_link = l('<i class="fa fa-sign-out"></i>' . t('Log Out'), 'user/logout', array('html' => true));

        // Get the contact data
        $contact_data = get_civihr_contact_data($_SESSION['CiviCRM']['userID']);
        if (!empty($contact_data['display_name'])) {
            $display_name = $contact_data['display_name'];
        }
        if (isset($contact_data['image_URL']) && !empty($contact_data['image_URL'])) {
            $image_url = $contact_data['image_URL'];
        }
    }

    // This values will be used in the template by Drupal
    $vars['user_name'] = $display_name;
    $vars['image_url'] = $image_url;
    $vars['edit_account'] = $edit_account_link;
    $vars['logout_link'] = $logout_link;
    $vars['user_guide_link'] = $user_guide_link;

}

/**
 * Implements hook_token_info().
 */
function civihr_employee_portal_token_info() {

    $info = array();

    // Define any custom tokens.
    $info['tokens']['user']['contact_display_name'] = array(
        'name' => t('CiviCRM Contact Display Name'),
        'description' => t('CiviCRM Display Name from the contact record.'),
    );

    $info['tokens']['user']['contact_phone'] = array(
        'name' => t('CiviCRM Contact Phone'),
        'description' => t('CiviCRM Contact Phone from the contact record.'),
    );


    $info['tokens']['user']['assigned_manager_email'] = array(
        'name' => t('Assigned managers email addresses'),
        'description' => t('Comma separated list of email addresses for the contact\'s assigned managers.'),
    );

    return $info;
}

/**
 * Implements hook_tokens().
 */
function civihr_employee_portal_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ($type == 'user') {

    // Get the assigned manager contact IDs for the passed USER object
    if (isset($data['user']) && $data['user']->uid != '') {
      $user_contact_data = get_civihr_contact_data(NULL, $data['user']->uid);

      // Get the details for the manager
      $managers = HelperClass::_get_contact_manager_contact_id($data['user']->uid);
      $assigned_manager_contact_data = get_civihr_contact_data($managers[0]);
    }

    // Loop through the available tokens.
    foreach ($tokens as $name => $original) {
      // Find our custom tokens by name.
      switch ($name) {

        case 'contact_display_name':

          // Find the contact display name.
          $value = '';

          if (isset($user_contact_data) && $user_contact_data['display_name'] != '') {
            $value = $user_contact_data['display_name'];
          }

          // Set the token values!
          $replacements[$original] = $value;
          break;

        case 'contact_phone':

          // Find the contact phone number.
          $value = '';

          if (isset($user_contact_data) && $user_contact_data['phone'] != '') {
            $value = $user_contact_data['phone'];
          }

          // Set the token values!
          $replacements[$original] = $value;
          break;

        case 'assigned_manager_name':

          // Find the assigned manager name.
          $value = '';

          if (isset($assigned_manager_contact_data) && $assigned_manager_contact_data['display_name'] != '') {
            $value = $assigned_manager_contact_data['display_name'];
          }

          // Set the token values!
          $replacements[$original] = $value;
          break;

        case 'assigned_manager_phone':

          // Find the assigned manager phone.
          $value = '';

          if (isset($assigned_manager_contact_data) && $assigned_manager_contact_data['phone'] != '') {
            $value = $assigned_manager_contact_data['phone'];
          }

          // Set the token values!
          $replacements[$original] = $value;
          break;

        case 'assigned_manager_email':

          // Build list of assigned managers e-mails
          $managerEmails = [];

          foreach ($managers as $currentManagerID) {
            $managerData = get_civihr_contact_data($currentManagerID);

            if (isset($managerData) && !empty($managerData['email'])) {
              $managerEmails[] = $managerData['email'];
            }
          }

          // Set the token values!
          $replacements[$original] = implode(',', $managerEmails);
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_module_implements_alter()
 */
function civihr_employee_portal_module_implements_alter(&$implementations, $hook) {

    if ($hook != 'views_data_alter') {
        return;
    }

    watchdog('alter default order', print_r($implementations, TRUE));

    $group = [];

    // Check if the module exists and it's installed
    if (module_exists('views_autocomplete_filters')) {
        // Put the views autocomplete filters after civicrm
        $module = 'views_autocomplete_filters';
        $group += array($module => $implementations[$module]);
        unset($implementations[$module]);
    }

    // Put the civihr employee portal module after civicrm module (breaks the Calendar view)
    // $module = 'civihr_employee_portal';
    // $group += array($module => $implementations[$module]);
    // unset($implementations[$module]);

    // Make sure some modules are after civicrm to avoid error with autocomplete search or drush cc all
    $implementations = $implementations + $group;

    watchdog('alter modified order', print_r($implementations, TRUE));
}

/**
 * Check if a passed date is weekend day or not
 *
 * @param \DateTime $date
 *
 * @return bool
 */
function _isWeekend(\DateTime $date) {
    $saturday = 6;
    $sunday = 0;
    $weekday = $date->format('w');
    return ($weekday == $saturday || $weekday == $sunday);
}

/**
 * @param $public_holidays
 *  Check if the requested day is holiday or not working day
 * @param \DateTime $date
 *  The requested day
 *
 * @return array
 */
function _checkRequestedDay($public_holidays, \DateTime $date) {

    $not_working_day = t('Weekend');

    foreach ($public_holidays['values'] as $public_holiday) {

        $public_holiday_date = explode(" ", $public_holiday['activity_date_time']);

        // If the public holiday equals with the requested date and the public holiday is enabled
        if ($public_holiday_date[0] == $date->format('Y-m-d') && $public_holiday['status_id'] == 1) {
            $exclude_type = " (" . $public_holiday['subject'] . ")";

            return array(
                'default_value' => 0,
                'exclude_type' => $exclude_type
            );
        }
        else if (_isWeekend($date)) {
            $exclude_type = " (" . $not_working_day . ")";

            return array(
                'default_value' => 0,
                'exclude_type' => $exclude_type
            );

        }

    }

    // Default fallback value
    return array(
        'default_value' => 480,
        'exclude_type' => ''
    );

}

// Check if the user can access the private file
function civihr_employee_portal_file_download_access_alter(&$grants, $file_item, $entity_type, $entity) {

    if ($entity_type == 'civicrm_activity') {

        // Check if the user has the permissions to see the attachments
        if (user_access('access private file download')) {
            $grants = array(TRUE);
        }
    }

}

function civihr_employee_portal_civicrm_post($op, $objectName, $objectId, &$objectRef) {
    if ($op === 'create' || $op === 'edit') {
        if (in_array($objectName, array('Document', 'Task'))) {
            _clear_json_cache();
        }
    }
    if ($objectName === 'HRAbsenceType') {
      cache_set('civihr_absence_types', NULL);
    }
}

/**
 * Checks if the given absence is of the "Sick" type
 *
 * There is no other way currently to check if an absence type is of the
 * "Sick" type other than checking its title, so we have to resort to a
 * simple regex match on the title string, looking for the "sick" word
 *
 * @param  string $absenceName
 * @return boolean
 */
function civihr_employee_portal_is_sick_absence($absenceName) {
  return preg_match('/^sick/i', $absenceName);
}

/**
 * Return an ID of 'sick' Absence Type or NULL if 'sick' type is not found.
 *
 * @return int|NULL
 */
function civihr_employee_portal_get_absence_sick_type_id() {
  $sickId = null;

  try {
    $result = civicrm_api3('HRAbsenceType', 'getsingle', array(
      'name' => 'sick',
      'return' => array('id'),
    ));
    $sickId = $result['id'];
  } catch (Exception $e) {
    return NULL;
  }

  return $sickId;
}

/**
 * Get an array containing Drupal Menu items of given Menu name.
 *
 * @param string $menuName
 * @param string $parentLink
 * @return array
 */
function civihr_employee_portal_get_drupal_menu_items($menuName) {
    $menu = array();
    $query = db_select('menu_links', 'ml')
        ->fields('ml', array('link_path', 'router_path', 'link_title', 'options'))
        ->condition('menu_name', $menuName)
        ->condition('hidden', 0)
        ->orderBy('weight');
    $result = $query->execute()->fetchAll();
    foreach ($result as $menuItem) {
        $menu[] = array(
            'link_path' => $menuItem->link_path,
            'router_path' => $menuItem->router_path,
            'link_title' => $menuItem->link_title,
            'options' => unserialize($menuItem->options),
        );
    }
    return $menu;
}

/**
 * Pass the contact ID and this function will return array of assigned ACTIVE manager contact IDs
 * @param $contact_id
 */
function _getManagerContacts($contact_id) {

    // @TODO -> cache the relationships if we need to!
    // Get the relationships for the Contact
    $res = civicrm_api3('Relationship', 'get', array('contact_id' => $contact_id, 'return' => "is_active"));
    $contactRelationships = $res['values'];

    $assigned_manager_contact_ids = [];
    $manager_found = 0;

    // If Leave approver is find, assign him as the manager (add contact ID to $assigned_manager_contact_ids array)
    foreach ($contactRelationships as $key => $relation) {
      if ($relation['relation'] == variable_get('relationship_name_to_use', 'has Leave Approved by')) {
        if(relationActiveAndCurrent($relation))
        {
          $assigned_manager_contact_ids[] = $relation['contact_id_b'];
          $manager_found++;
        }
      }
    }

    // If no assigned managers found
    if ($manager_found <= 0) {

        // Get the main admin contact (this will be the default approver -> as no other leave approver is found)
        $main_admin_contact = civicrm_api('uf_match', 'get', array(
            'version' => 3,
            'uf_id' => 1,
        ));

        $main_admin_contact = array_shift($main_admin_contact['values']);

        // Set default manager ID
        $assigned_manager_contact_ids[] = $main_admin_contact['contact_id'];

    }

    return $assigned_manager_contact_ids;
}

/**
 * Function to determine if given manager-contact relationship is inactive or active
 *
 * @param array $relation
 * @return boolean
 */
function relationActiveAndCurrent($relation){
  $endDate = empty($relation['end_date']) ? NULL : $relation['end_date'] . " 23:59:59";

  return $relation['is_active'] == 1 && (strtotime($endDate) >= time() || empty($endDate))
          && (empty($relation['start_date']) || strtotime($relation['start_date']) <= time());
}

/**
 * Implements hook_views_data()
 */
function civihr_employee_portal_views_data() {
  $data = array();

  $tables = date_views_base_tables();

  foreach ($tables as $base_table => $entity) {
    // The flexible date filter.
    $data[$base_table]['between_date_filter'] = array(
      'group' => t('Date'),
      'title' => t('Between Dates (!base_table)', array('!base_table' => $base_table)),
      'help' => t('Filter between two Views !base_table date fields.', array('!base_table' => $base_table)),
      'filter' => array(
        'handler' => 'views_between_dates_filter_handler',
        'empty field name' => t('Undated'),
        'is date' => TRUE,
      ),
    );
  }

  return $data;
}

/**
 * Implements hook_date_views_fields()
 *
 * @param string $field
 * @return array
 */
function civihr_employee_portal_date_views_fields($field) {
  $values = array();
  $sqlTypes = array(
      'date' => array(
        'hrjc_details.period_end_date',
        'hrjc_details.period_start_date',
        'absence_activity.absence_date',
      ),
  );
  if (in_array($field, $sqlTypes['date'])) {
    $values = array(
      'sql_type' => DATE_ISO,
    );
  }
  return $values;
}

/**
 * Check if given $form contains exposed filters of HR Report View.
 *
 * @param array $form
 * @return boolean
 */
function _is_hrreports_exposed_filters_form($form) {
    if (substr($form['#action'], 0, 20) === '/civihr_report_json_') {
        return TRUE;
    }
    return FALSE;
}

/**
 * Check if given $viewName matches HR Report View Table.
 *
 * @param string $viewName
 * @return boolean
 */
function _is_hrreports_data_table_view($viewName) {
    if (substr($viewName, 0, 14) === 'civihr_report_') {
        return TRUE;
    }
    return FALSE;
}

/**
 * Return Appraisal Employee filter type used on Appraisal Manager template.
 *
 * @param int $status
 * @param string $selfAppraisalDue
 * @param string $managerAppraisalDue
 * @param string $gradeDue
 * @return int
 */
function _get_appraisal_employee_filter_type($status, $selfAppraisalDue, $managerAppraisalDue, $gradeDue) {
  $today = date('Y-m-d');
  if ($gradeDue < $today) {
    return 2;
  }
  return 1;
}

/**
 * Return Appraisal Manager filter type used on Appraisal Manager template.
 *
 * @param int $status
 * @param string $selfAppraisalDue
 * @param string $managerAppraisalDue
 * @param string $gradeDue
 * @return int
 */
function _get_appraisal_manager_filter_type($status, $selfAppraisalDue, $managerAppraisalDue, $gradeDue) {
    $today = date('Y-m-d');
    if ($status === 5) {
        return 3;
    }
    if ($status === 1 && $selfAppraisalDue < $today) {
        return 1;
    }
    if ($status === 2 && $managerAppraisalDue < $today) {
        return 1;
    }
    if ($status === 3 && $gradeDue < $today) {
        return 1;
    }
    return 2;
}

/**
 * Return a key of the task filter by given date.
 * Used in Tasks block template.
 *
 * @param string $date
 * @param boolean $normalize
 *   normalize the filter to match the list of filters offered
 *   in the UI ('tomorrow' and 'week' are grouped together)
 * @return string
 */
function _get_task_filter_by_date($date, $normalize = false) {
  $today = (new DateTime())->format('Y-m-d');
  $tomorrow = (new DateTime('tomorrow'))->format('Y-m-d');
  $nbDay = (new DateTime())->format('N');
  $weekEnd = (new DateTime())->modify('+' . (7 - $nbDay) . ' days')->format('Y-m-d');
  $taskDate = (new DateTime())->setTimestamp(strtotime(strip_tags($date)))->format('Y-m-d');

  $filter = 'week';

  if ($taskDate < $today) {
    $filter = 'overdue';
  }

  if ($taskDate == $today) {
    $filter = 'today';
  }

  if ($taskDate > $weekEnd) {
    $filter = 'later';
  }

  if ($taskDate == $tomorrow){
    $filter = 'tomorrow';
  }

  return $normalize ? ($filter == 'tomorrow' ? 'week' : $filter) : $filter;
}


/**
 * This method handle user redirection for special use cases
 *
 * The redirection is made by manually setting the Location header,
 * and it checks the current_path using the request_path() function,
 * meaning that the function can be used inside hook_boot() (When hook_boot()
 * is called, only a limited set of functions is available, and things like
 * drupal_goto() and current_path() cannot be used).
 */
function _user_redirection() {
  $publicFirewall = new PublicFirewall();
  global $user, $base_url;

  // This function should only be executed in a non-cli environment.
  // It calls exit() function, which causes errors when running drush commands
  if (drupal_is_cli()) {
    return;
  }

  $current_path = request_path();
  $requestURI = rawurlencode(request_uri());

  if (!$publicFirewall->canAccess($user, $current_path)) {
    $query = $current_path ? sprintf('?destination=%s', $requestURI) : '';
    $redirect_path = 'welcome-page' . $query;
  }
  elseif (in_array($current_path, ['', 'civicrm', 'civicrm/dashboard'])) {
    $tasksDashboard = 'civicrm/tasksassignments/dashboard#/tasks';
    $redirect_path = user_access('access CiviCRM') ? $tasksDashboard : 'dashboard';
  }

  if (!empty($redirect_path)) {
    drupal_add_http_header('Location', "$base_url/{$redirect_path}");
    exit();
  }
}

/**
 * Convert array option values in an array to labels
 *
 * @param string $optionGroup The option group name to check against for converting data
 * @param string $fieldName The option field name ( key ) in data array to be converted
 * @param array $data The data which contain an option field to be converted
 *
 * @return array The data list with converted option values
 */
function civihr_employee_portal_convert_array_option_value($optionGroup, $fieldName, $data) {
  // get location option values list
  $locationOptions = civicrm_api3('OptionValue', 'get', array(
    'sequential' => 1,
    'return' => array("value", "label"),
    'option_group_id' => $optionGroup,
    'options' => array('limit' => 0),
  ));

  // create a value => label array from option values
  $locationList = [];
  foreach($locationOptions['values'] as $location) {
    $locationList[$location['value']] = $location['label'];
  }

  // change location value to location label
  for($i=0; $i < count($data); $i++) {
    if (!empty($data[$i][$fieldName])) {
      $data[$i][$fieldName] = $locationList[$data[$i][$fieldName]];
    }
    else {
      $data[$i][$fieldName] = '';
    }
  }

  return $data;
}

/**
 * Get an array containing existing configuration labels for specified Report.
 *
 * @param string $reportName
 * @return array
 */
function civihr_employee_portal_get_report_configuration_list($reportName) {
  $list = array();
  $result = db_select('reports_configuration', 'rc')
    ->fields('rc', array('id', 'label'))
    ->condition('report_name', $reportName)
    ->orderBy('label')
    ->execute();
  while ($row = $result->fetchAssoc()) {
    $list[$row['id']] = $row['label'];
  }
  return $list;
}

/**
 * Print JSON encoded array with Report configuration for given Report name and ID.
 *
 * @param string $reportName
 * @param int $configId
 */
function civihr_employee_portal_get_report_configuration_json($reportName, $configId) {
  if (empty($reportName) || empty($configId)) {
    print drupal_json_output(array('status' => 'error'));
    drupal_exit();
  }
  $result = db_select('reports_configuration', 'rc')
    ->fields('rc', array('json_config'))
    ->condition('id', (int)$configId)
    ->condition('report_name', $reportName)
    ->range(0, 1)
    ->execute();
  if ($row = $result->fetchAssoc()) {
    print drupal_json_output(
      array(
        'config' => json_decode($row['json_config']),
        'status' => 'success',
      )
    );
  } else {
    print drupal_json_output(array('status' => 'error'));
  }

  drupal_exit();
}

/**
 * Save Report configuration in database.
 *
 * @param string $reportName
 * @param int $configId
 */
function civihr_employee_portal_save_report_configuration_json($reportName, $configId) {
  $jsonConfig = json_encode($_POST['json_config']);
  if ((empty($configId) && empty($_POST['label'])) || !$jsonConfig) {
    print drupal_json_output(array('status' => 'error'));
    drupal_exit();
  }
  $label = $_POST['label'];
  $responseData = array(
    'status' => 'success',
  );
  try {
    if (!empty($configId)) {
      $result = db_update('reports_configuration')
        ->condition('report_name', $reportName)
        ->condition('id', (int)$configId)
        ->fields(array(
          'json_config' => $jsonConfig,
        ))
        ->execute();
    } else {
      $result = db_select('reports_configuration', 'rc')
        ->fields('rc', array('id'))
        ->condition('report_name', $reportName)
        ->condition('label', $label)
        ->range(0, 1)
        ->execute();
      if ($row = $result->fetchAssoc()) {
        $responseData = array(
          'status' => 'already_exists',
          'id' => $row['id'],
        );
        print drupal_json_output($responseData);
        drupal_exit();
      }
      $result = db_insert('reports_configuration')
        ->fields(array(
          'report_name' => $reportName,
          'label' => $label,
          'json_config' => $jsonConfig,
        ))
      ->execute();
      $responseData['id'] = $result;
      $responseData['label'] = $label;
    }
  } catch (Exception $e) {
    $responseData = array(
      'status' => 'error',
    );
  }
  print drupal_json_output($responseData);
  drupal_exit();
}

/**
 * Delete Report configuration from database.
 *
 * @param string $reportName
 * @param int $configId
 */
function civihr_employee_portal_delete_report_configuration_json($reportName, $configId) {
  if (!empty($reportName) && empty(!$configId)) {
    $result = db_delete('reports_configuration')
      ->condition('report_name', $reportName)
      ->condition('id', (int)$configId)
      ->execute();
    if ($result) {
      print drupal_json_output(array('status' => 'success'));
      drupal_exit();
    }
  }
  print drupal_json_output(array('status' => 'error'));
  drupal_exit();
}

/**
 * Implements hook_html_head_alter().
 * Changes the favicon for both the SSP and CiviHR admin
 */
function civihr_employee_portal_html_head_alter(&$head_elements) {
  global $base_url;

  $default_favicon_element = 'drupal_add_html_head_link:shortcut icon:' . $base_url . '/misc/favicon.ico';
  $icoPath = drupal_get_path('module', 'civihr_employee_portal') . "/images/favicon.ico";

  $head_elements[$default_favicon_element]['#attributes']['href'] = "{$base_url}/{$icoPath}";
}

/**
 *  Return current version of Civihr.
 */
function get_civihr_version() {
  $civihrVersion = &drupal_static(__FUNCTION__);

  if (!isset($civihrVersion)) {
    if ($cache = cache_get('civihr_version')) {
      $civihrVersion = $cache->data;
    } else {
      try {
        // Civi init
        civicrm_initialize();
        $result = civicrm_api3('HRCoreInfo', 'getversion', array('sequential' => 1));
        $civihrVersion = $result['values'];
      } catch (CiviCRM_API3_Exception $e) {
        $error = $e->getMessage();
      }

      cache_set('civihr_version', $civihrVersion, 'cache', time() + 86400);
    }
  }

  return $civihrVersion;
}

<?php

use Drupal\civihr_employee_portal\Helpers\WebformHelper;
use Drupal\civihr_employee_portal\Forms\OnboardingWebForm;
use Drupal\civihr_employee_portal\Helpers\UrlHelper;
use Drupal\civihr_employee_portal\Helpers\TaxonomyHelper;

/**
 * Create Report Pages and Report Age Settings menu links.
 */
function civihr_employee_portal_update_7001() {
  // Report1: People
  if (!_is_menu_link_path_exists('reports/people/')) {
    $path = 'reports/people/';
    $link = array();
    $link['link_path'] = $path;
    $link['link_title'] = 'Report 1: People';
    $link['menu_name'] = 'hr-reports';
    $link['router_path'] = $path . '%';
    $link['module'] = 'menu';
    $link['options'] = array(
      'attributes' => array(
        'title' => 'CiviHR Report containing Employee, Contract and Role data.',
      ),
    );
    menu_link_save($link);
  }

  if (!_is_menu_link_path_exists('reports/leave_and_absence/')) {
    // Report 2: Leave and Absence
    $path = 'reports/leave_and_absence/';
    $link = array();
    $link['link_path'] = $path;
    $link['link_title'] = 'Report 2: Leave and Absence';
    $link['menu_name'] = 'hr-reports';
    $link['router_path'] = $path . '%';
    $link['module'] = 'menu';
    $link['options'] = array(
      'attributes' => array(
        'title' => 'CiviHR Report containing Employee, Contract, Role and Absence Activity data.',
      ),
    );
    menu_link_save($link);
  }

  if (!_is_menu_link_path_exists('reports/settings/age_group/')) {

    // Age groups
    $path = 'reports/settings/age_group/';
    $link = array();
    $link['link_path'] = $path;
    $link['link_title'] = 'Age groups';
    $link['menu_name'] = 'hr-reports-settings';
    $link['router_path'] = $path . '%';
    $link['module'] = 'menu';
    menu_link_save($link);
  }
}

/**
 * Create db table for Age groups (Report settings).
 */
function civihr_employee_portal_update_7002() {
    db_query('CREATE TABLE IF NOT EXISTS `reports_settings_age_group` (
    `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
    `age_from` int(3) DEFAULT NULL,
    `age_to` int(3) DEFAULT NULL,
    `label` varchar(32) NOT NULL,
    PRIMARY KEY (id)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8');
}

/**
 * Rearrange Report pages in Drupal menu.
 */
function civihr_employee_portal_update_7003() {
    db_update('menu_links')
    ->fields(
        array(
            'weight' => 99,
        )
    )
    ->condition('link_path', 'reports')
    ->execute();
    db_update('menu_links')
    ->fields(
        array(
            'weight' => 1,
        )
    )
    ->condition('link_path', 'reports/people/')
    ->execute();
    db_update('menu_links')
    ->fields(
        array(
            'weight' => 2,
        )
    )
    ->condition('link_path', 'reports/leave_and_absence/')
    ->execute();
    cache_clear_all();
}

/**
 * Enable HR Reports settings block.
 */
function civihr_employee_portal_update_7004() {
    db_update('block')
    ->fields(
        array(
            'region' => 'content',
            'visibility' => 1,
            'pages' => 'reports',
            'status' => 1,
            'weight' => 1,
        )
    )
    ->condition('module', 'menu')
    ->condition('delta', 'hr-reports-settings')
    ->execute();
    cache_clear_all();
}

/**
 * Create db table for Reports configuration.
 */
function civihr_employee_portal_update_7005() {
  db_query('CREATE TABLE IF NOT EXISTS `reports_configuration` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `report_name` VARCHAR(256) NOT NULL,
  `label` VARCHAR(256) NOT NULL,
  `json_config` TEXT DEFAULT NULL,
  PRIMARY KEY (id)
  ) ENGINE=InnoDB DEFAULT CHARSET=utf8');
}

/**
 * Implements hook_update_N().
 *  Enables modules and throws an exception if that can't be done.
 */
function civihr_employee_portal_update_7006() {
  $modules = ['civihr_leave_absences'];

  if (empty(module_enable($modules))) {
    throw new DrupalUpdateException(implode(', ', $modules) . ' or dependencies could not be enabled');
  }
}

/**
 * Implements hook_update_N().
 *  Enables modules and throws an exception if that can't be done.
 */
function civihr_employee_portal_update_7007() {
  $modules = ['leave_and_absences_features'];

  if (empty(module_enable($modules))) {
    throw new DrupalUpdateException(implode(', ', $modules) . ' or dependencies could not be enabled');
  }
}

/**
 * Create civihr_admin_local Role for existing sites.
 */
function civihr_employee_portal_update_7008() {
  if (!array_search('civihr_admin_local', user_roles())) {
    $role = new stdClass();
    $role->name = 'civihr_admin_local';
    $role->machine_name = 'civihr_admin_local';
    user_role_save($role);
  }
}

/**
 * Update My Details webform image description
 */
function civihr_employee_portal_update_7009() {
  $nodes = node_load_multiple(NULL, ["title" => "My details - edit"]);

  if (count($nodes) !== 1) {
    return;
  }

  $myDetailsEditNode = current($nodes);

  if (!isset($myDetailsEditNode->webform['components'])) {
    return;
  }

  $components = $myDetailsEditNode->webform['components'];
  $imageFieldName = 'Upload Image';
  $description = 'The image should be at least 130 x 130 pixels, but 400 x 400 '
  . 'pixels is the recommended size for the user image.';

  foreach ($components as $component) {
    if ($imageFieldName == $component['name']) {
      $component['extra']['description'] = $description;
      webform_component_update($component);
      break;
    }
  }
}

/**
 * Update My Details webform upload size
 */
function civihr_employee_portal_update_7010() {
  $nodes = node_load_multiple(NULL, ["title" => "My details - edit"]);

  if (count($nodes) !== 1) {
    return;
  }

  $myDetailsWebform = current($nodes);

  if (!isset($myDetailsWebform->webform['components'])) {
    return;
  }

  $components = $myDetailsWebform->webform['components'];
  $imageFieldName = 'Upload Image';

  foreach ($components as $component) {
    if ($imageFieldName == $component['name']) {
      $component['extra']['filtering']['size'] = '10MB';
      webform_component_update($component);
      break;
    }
  }
}

/**
 * Removes the "Emergency contact - edit" webform
 */
function civihr_employee_portal_update_7011() {
  $node = WebformHelper::findOneByTitle('Emergency contact - edit');

  if (!$node) {
    return;
  }

  node_delete($node->nid);
}

/**
 * Fixes location type IDs in the onboarding form.
 */
function civihr_employee_portal_update_7016() {
  $onboardingForm = WebformHelper::findOneByTitle(OnboardingWebForm::NAME);
  $civicrmWebform = &$onboardingForm->webform_civicrm;
  $contactData = &$civicrmWebform['data']['contact'][1];
  $phoneData = &$contactData['phone'];
  $addressData = &$contactData['address'];
  $emailData = &$contactData['email'];
  $instantMessengerData = &$contactData['im'];

  civicrm_initialize();
  $locationTypes = civicrm_api3('LocationType', 'get')['values'];
  $locationTypes = array_column($locationTypes, 'name', 'id');
  $homeTypeID = array_search('Home', $locationTypes);
  $workTypeID = array_search('Work', $locationTypes);

  $workPhone = &$phoneData[1];
  $homePhone = &$phoneData[2];
  $homeEmail = &$emailData[2];
  $workEmail = &$emailData[1];
  $homeAddress = &$addressData[1];
  $workInstantMessenger = &$instantMessengerData[1];

  $locationKey = 'location_type_id';

  $workPhone[$locationKey] = $workTypeID;
  $homePhone[$locationKey] = $homeTypeID;
  $workEmail[$locationKey] = $workTypeID;
  $homeEmail[$locationKey] = $homeTypeID;
  $homeAddress[$locationKey] = $homeTypeID;
  $workInstantMessenger[$locationKey] = $workTypeID;

  drupal_write_record('webform_civicrm_forms', $civicrmWebform, 'nid');
}

/**
 * Refreshes the node export files since the onboarding form file upload limit
 * was increased.
 */
function civihr_employee_portal_update_7017() {
  civicrm_initialize();
  drush_civihr_employee_portal_refresh_node_export_files();
}

/**
 * Remove old and unused links from the Reports menu
 */
function civihr_employee_portal_update_7018() {
  db_delete('menu_links')
    ->condition('menu_name', 'hr-reports')
    ->condition(
      'link_title',
      ['Report 1: People', 'Report 2: Leave and Absence'],
      'IN'
    )
    ->execute();

  cache_clear_all();
}

/**
 * Refreshes the node export files since the onboarding form required fields
 * were changed.
 */
function civihr_employee_portal_update_7019() {
  civicrm_initialize();
  drush_civihr_employee_portal_refresh_node_export_files();
}

/**
 * Imports the default report configurations
 */
function civihr_employee_portal_update_7020() {
  _civihr_employee_portal_create_default_reports_configuration();
}

/**
 * Remove the "Reports" link from the main navigation menu
 */
function civihr_employee_portal_update_7021() {
  db_delete('menu_links')
    ->condition('link_path', 'reports')
    ->execute();
}

/**
 * Fixes contact images that have multiple 'photo' query params.
 */
function civihr_employee_portal_update_7022() {
  civicrm_initialize();
  $params = ['return' => ['image_URL']];
  $contacts = civicrm_api3('Contact', 'get', $params)['values'];

  foreach ($contacts as $contact) {
    $imageUrl = $contact['image_URL'];
    $dedupedImageUrl = UrlHelper::dedupeUrlQueryParams($imageUrl);

    if ($imageUrl !== $dedupedImageUrl) {
      $params = ['image_URL' => $dedupedImageUrl, 'id' => $contact['id']];
      civicrm_api3('Contact', 'create', $params);
    }
  }
}

/**
 * Uninstall the views_json_query module
 */
function civihr_employee_portal_update_7023() {
  $modules = ['views_json_query'];
  module_disable(['views_json_query']);
  drupal_uninstall_modules($modules);
}

/**
 * Renames some roles. Basically the civihr_admin, civihr_staff
 * civihr_manager and civihr_admin_local roles.
 */
function civihr_employee_portal_update_7024() {
  $oldToNewNames = [
    'civihr_admin' => 'HR Admin',
    'civihr_staff' => 'Staff',
    'civihr_manager' => 'Manager',
    'civihr_admin_local' => 'Regional HR Admin'
  ];

  $roles = user_roles();

  foreach ($roles as $id => $roleName) {
    if (array_key_exists($roleName, $oldToNewNames)) {
      $roleObject = user_role_load($id);
      $roleObject->name = $oldToNewNames[$roleName];
      user_role_save($roleObject);

      //The role delegation module has dynamic permissions that changes
      //when a role name is updated in UI via hook form_user_admin_role_submit
      //We need to update it manually here.

      db_update('role_permission')
        ->condition('permission', "assign $roleName role")
        ->fields(array('permission' => "assign $oldToNewNames[$roleName] role"))
        ->execute();
    }
  }
}

/**
 * Revokes the 'access users overview' and the 'administer users'
 * permissions from the HR Admin and Regional HR Admin Role
 */
function civihr_employee_portal_update_7025() {
  $permissionsToRevoke = ['access users overview', 'administer users'];
  $roleNames = ['HR Admin', 'Regional HR Admin'];
  $roles = user_roles();
  $rolesToCheck  = array_intersect($roles, $roleNames);

  foreach($rolesToCheck as $rid => $role) {
    user_role_revoke_permissions($rid, $permissionsToRevoke);
  }
}

/**
 * Grants the 'administer staff accounts' permission to the
 * the HR Admin and Regional HR Admin Role.
 */
function civihr_employee_portal_update_7026() {
  $permissionsToAdd = ['administer staff accounts'];
  $roleNames = ['HR Admin', 'Regional HR Admin'];
  $roles = user_roles();
  $rolesToCheck  = array_intersect($roles, $roleNames);

  foreach($rolesToCheck as $rid => $role) {
    user_role_grant_permissions($rid, $permissionsToAdd);
  }
}

/**
 * Reverts the default CiviHR user permissions because they were modified
 */
function civihr_employee_portal_update_7027() {
  features_revert(['civihr_default_permissions' => ['user_permission']]);
}


/**
 * Refresh the node files as onboarding form node was altered
 */
function civihr_employee_portal_update_7028() {
  civicrm_initialize();
  drush_civihr_employee_portal_refresh_node_export_files();
}

/**
 * Add default terms for HR Resource Type vocabulary
 */
function civihr_employee_portal_update_7029() {
  TaxonomyHelper::createDefaultTerms();
}

/**
 * Function to determine whether menu link exists or not.
 *
 * @param string $path
 *   Path of the menu link.
 *
 * @return bool
 *   Status of the menu link path.
 */
function _is_menu_link_path_exists($path = '') {
  if ($path) {
    // Lookup for link path table if the path does exist.
    $menu_status = db_select('menu_links', 'ml')
      ->fields('ml', ['mlid'])
      ->condition('ml.link_path', $path)
      ->execute()->fetchField();
    return $menu_status ? TRUE : FALSE;
  }

  return FALSE;
}

<?php

/**
 * @file
 * Module to load css and js resources from a directory
 */

/**
 * Implements hook_init().
 */
function civicrm_resources_init() {

   civicrm_initialize();

   // Hardcoding extention name for now. 
   $machine_name = CRM_Core_DAO::getFieldValue('CRM_Core_DAO_Extension', 'Job Contract (CiviHR)', 'full_name', 'name');
   $ext_path = CRM_Extension_System::singleton()->getMapper()->keyToBasePath($machine_name);


   //civicrm_resources_add_resources($ext_path, array('gulpfile.js', 'hrjc.css', 'contact.js'));
   civicrm_resources_add_resources($ext_path);
}

/**
 *
 */
function civicrm_resources_add_resources($extention_path, $req_files = array()) {

   global $base_url;

   $files = civicrm_resources_file_scan_directory($extention_path, '/\.(css|js)$/i');
   
   $js_list = array();
   $css_list = array();
   
//@TODO: Logic to handle files of same name in different directories. 

   foreach ($files as $key => $file) {
   	    if(!empty($req_files)) {
   	      if (in_array($file->filename, $req_files) && preg_match('/\.js$/',$file->filename)) {
            $js_list[] = $file->uri;
   	      }
   	      if (in_array($file->filename, $req_files) && preg_match('/\.css$/',$file->filename)) {
            $css_list[] = $file->uri;
   	      }
   	    } 
   	    else {
   	      if (preg_match('/\.css$/',$file->filename)) {
            $css_list[] = $file->uri;
    	  } 
          elseif (preg_match('/\.js$/',$file->filename)) {
    	    $js_list[] = $file->uri;
          }
   	    }
    } 
   
   foreach ($css_list as $key => $css_file) {
     drupal_add_css(str_replace(DRUPAL_ROOT, $base_url, $css_file));
   } 
   foreach ($js_list as $key => $js_file) {
     drupal_add_js(str_replace(DRUPAL_ROOT, $base_url, $js_file));
   } 
}

/**
 *
 */
function civicrm_resources_file_scan_directory($dir, $mask, $options = array(), $depth = 0) {
  // Merge in defaults.
  $options += array(
    'nomask' => '/(\.\.?|CVS)$/',
    'callback' => 0,
    'recurse' => TRUE,
    'key' => 'uri',
    'min_depth' => 0,
  );

  $options['key'] = in_array($options['key'], array('uri', 'filename', 'name')) ? $options['key'] : 'uri';
  $files = array();
  if (is_dir($dir) && $handle = opendir($dir)) {
    while (FALSE !== ($filename = readdir($handle))) {
      if (!preg_match($options['nomask'], $filename) && $filename[0] != '.') {
        $uri = "$dir/$filename";
        $uri = file_stream_wrapper_uri_normalize($uri);
        if (is_dir($uri) && $options['recurse']) {
          $files = array_merge(civicrm_resources_file_scan_directory($uri, $mask, $options, $depth + 1), $files);
        }
        elseif ($depth >= $options['min_depth'] && preg_match($mask, $filename)) {
          $file = new stdClass();
          $file->uri = $uri;
          $file->filename = $filename;
          $file->name = pathinfo($filename, PATHINFO_FILENAME);
          $key = $options['key'];
          $files[$file->$key] = $file;
          if ($options['callback']) {
            $options['callback']($uri);
          }
        }
      }
    }

    closedir($handle);
  }

  return $files;
}

/**
 * Menu callback: displays the module settings page.
 */
function civicrm_resources_settings($form) {

  $form['refresh'] = array(
    '#type' => 'fieldset',
    '#title' => t('Refresh'),
  );

  $form['refresh']['refresh_paths'] = array(
    '#type' => 'submit',
    '#value' => t('Refresh all paths'),
    '#submit' => array('civicrm_resources_settings_refresh_submit'),
  );

  $form['registered_paths'] = array(
    '#type' => 'fieldset',
    '#title' => t('Refresh'),
  );

/*
  foreach ($all_settings as $settings) {

    // Prompt for the default pattern for this module
    $variable = 'pathauto_' . $module . '_pattern';
    $form['registered_paths'][$variable] = array(
      '#type' => 'textfield',
      '#title' => $patterndescr,
      '#default_value' => variable_get($variable, $patterndefault),
      '#size' => 65,
      '#maxlength' => 1280,
      '#element_validate' => array('token_element_validate'),
      '#after_build' => array('token_element_validate'),
      '#token_types' => array($settings->token_type),
      '#min_tokens' => 1,
      '#parents' => array($variable),
    );

    // If the module supports a set of specialized patterns, set
    // them up here
    if (isset($settings->patternitems)) {
      foreach ($settings->patternitems as $itemname => $itemlabel) {
        $variable = 'pathauto_' . $module . '_' . $itemname . '_pattern';
        $form[$module][$variable] = array(
          '#type' => 'textfield',
          '#title' => $itemlabel,
          '#default_value' => variable_get($variable, ''),
          '#size' => 65,
          '#maxlength' => 1280,
          '#element_validate' => array('token_element_validate'),
          '#after_build' => array('token_element_validate'),
          '#token_types' => array($settings->token_type),
          '#min_tokens' => 1,
          '#parents' => array($variable),
        );
      }
    }

    // Display the user documentation of placeholders supported by
    // this module, as a description on the last pattern
    $form[$module]['token_help'] = array(
      '#title' => t('Replacement patterns'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form[$module]['token_help']['help'] = array(
      '#theme' => 'token_tree',
      '#token_types' => array($settings->token_type),
    );
  }
*/
  $form['path_to_civicrm'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to civicrm'),
    '#default_value' => variable_get('path_to_civicrm', ''),
    '#description' => t('The path to core civicrm module.'),
    '#element_validate' => array('validate_path_to_civicrm')
  );
  return system_settings_form($form);
}


function validate_path_to_civicrm($element, $form_state) {
   return drupal_valid_path($form_state['path_to_civicrm']['values']['und'][0]);
}

function civicrm_resources_settings_submit($form, &$form_state) {
   
}

function civicrm_resources_settings_refresh_submit($form, &$form_state) {
   // @Todo : unset all path variables, and re-register after bootstraping civicrm
}

function civicrm_resources_load($extention_name, $files = array()) {

    //@TODO : Validate and throw a warning if same filename exsists in two subdirectories. 

}